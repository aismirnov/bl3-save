// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.1
// 	protoc        v3.11.3
// source: OakProfile.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PlayerInputBinding_Button struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RebindDataPath *string  `protobuf:"bytes,1,opt,name=rebind_data_path,json=rebindDataPath" json:"rebind_data_path,omitempty"`
	KeyNames       []string `protobuf:"bytes,2,rep,name=key_names,json=keyNames" json:"key_names,omitempty"`
}

func (x *PlayerInputBinding_Button) Reset() {
	*x = PlayerInputBinding_Button{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInputBinding_Button) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInputBinding_Button) ProtoMessage() {}

func (x *PlayerInputBinding_Button) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInputBinding_Button.ProtoReflect.Descriptor instead.
func (*PlayerInputBinding_Button) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{0}
}

func (x *PlayerInputBinding_Button) GetRebindDataPath() string {
	if x != nil && x.RebindDataPath != nil {
		return *x.RebindDataPath
	}
	return ""
}

func (x *PlayerInputBinding_Button) GetKeyNames() []string {
	if x != nil {
		return x.KeyNames
	}
	return nil
}

type PlayerInputBinding_Axis_Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyName  *string `protobuf:"bytes,1,opt,name=key_name,json=keyName" json:"key_name,omitempty"`
	Scale_3D *Vec3   `protobuf:"bytes,2,opt,name=scale_3d,json=scale3d" json:"scale_3d,omitempty"`
}

func (x *PlayerInputBinding_Axis_Key) Reset() {
	*x = PlayerInputBinding_Axis_Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInputBinding_Axis_Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInputBinding_Axis_Key) ProtoMessage() {}

func (x *PlayerInputBinding_Axis_Key) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInputBinding_Axis_Key.ProtoReflect.Descriptor instead.
func (*PlayerInputBinding_Axis_Key) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{1}
}

func (x *PlayerInputBinding_Axis_Key) GetKeyName() string {
	if x != nil && x.KeyName != nil {
		return *x.KeyName
	}
	return ""
}

func (x *PlayerInputBinding_Axis_Key) GetScale_3D() *Vec3 {
	if x != nil {
		return x.Scale_3D
	}
	return nil
}

type PlayerInputBinding_Axis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RebindDataPath *string                        `protobuf:"bytes,1,opt,name=rebind_data_path,json=rebindDataPath" json:"rebind_data_path,omitempty"`
	Keys           []*PlayerInputBinding_Axis_Key `protobuf:"bytes,2,rep,name=keys" json:"keys,omitempty"`
}

func (x *PlayerInputBinding_Axis) Reset() {
	*x = PlayerInputBinding_Axis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInputBinding_Axis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInputBinding_Axis) ProtoMessage() {}

func (x *PlayerInputBinding_Axis) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInputBinding_Axis.ProtoReflect.Descriptor instead.
func (*PlayerInputBinding_Axis) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{2}
}

func (x *PlayerInputBinding_Axis) GetRebindDataPath() string {
	if x != nil && x.RebindDataPath != nil {
		return *x.RebindDataPath
	}
	return ""
}

func (x *PlayerInputBinding_Axis) GetKeys() []*PlayerInputBinding_Axis_Key {
	if x != nil {
		return x.Keys
	}
	return nil
}

type PlayerInputBinding_Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryDataPath *string                      `protobuf:"bytes,1,opt,name=category_data_path,json=categoryDataPath" json:"category_data_path,omitempty"`
	ContextDataPath  *string                      `protobuf:"bytes,2,opt,name=context_data_path,json=contextDataPath" json:"context_data_path,omitempty"`
	ButtonBindings   []*PlayerInputBinding_Button `protobuf:"bytes,3,rep,name=button_bindings,json=buttonBindings" json:"button_bindings,omitempty"`
	AxisBindings     []*PlayerInputBinding_Axis   `protobuf:"bytes,4,rep,name=axis_bindings,json=axisBindings" json:"axis_bindings,omitempty"`
}

func (x *PlayerInputBinding_Category) Reset() {
	*x = PlayerInputBinding_Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInputBinding_Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInputBinding_Category) ProtoMessage() {}

func (x *PlayerInputBinding_Category) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInputBinding_Category.ProtoReflect.Descriptor instead.
func (*PlayerInputBinding_Category) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{3}
}

func (x *PlayerInputBinding_Category) GetCategoryDataPath() string {
	if x != nil && x.CategoryDataPath != nil {
		return *x.CategoryDataPath
	}
	return ""
}

func (x *PlayerInputBinding_Category) GetContextDataPath() string {
	if x != nil && x.ContextDataPath != nil {
		return *x.ContextDataPath
	}
	return ""
}

func (x *PlayerInputBinding_Category) GetButtonBindings() []*PlayerInputBinding_Button {
	if x != nil {
		return x.ButtonBindings
	}
	return nil
}

func (x *PlayerInputBinding_Category) GetAxisBindings() []*PlayerInputBinding_Axis {
	if x != nil {
		return x.AxisBindings
	}
	return nil
}

type PlayerInputBindings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []*PlayerInputBinding_Category `protobuf:"bytes,1,rep,name=categories" json:"categories,omitempty"`
}

func (x *PlayerInputBindings) Reset() {
	*x = PlayerInputBindings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInputBindings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInputBindings) ProtoMessage() {}

func (x *PlayerInputBindings) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInputBindings.ProtoReflect.Descriptor instead.
func (*PlayerInputBindings) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{4}
}

func (x *PlayerInputBindings) GetCategories() []*PlayerInputBinding_Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

type OakProfileLastInventoryFilterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotTypeId      *string `protobuf:"bytes,1,opt,name=slot_type_id,json=slotTypeId" json:"slot_type_id,omitempty"`
	LastFilterIndex *int32  `protobuf:"varint,2,opt,name=last_filter_index,json=lastFilterIndex" json:"last_filter_index,omitempty"`
}

func (x *OakProfileLastInventoryFilterInfo) Reset() {
	*x = OakProfileLastInventoryFilterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OakProfileLastInventoryFilterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OakProfileLastInventoryFilterInfo) ProtoMessage() {}

func (x *OakProfileLastInventoryFilterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OakProfileLastInventoryFilterInfo.ProtoReflect.Descriptor instead.
func (*OakProfileLastInventoryFilterInfo) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{5}
}

func (x *OakProfileLastInventoryFilterInfo) GetSlotTypeId() string {
	if x != nil && x.SlotTypeId != nil {
		return *x.SlotTypeId
	}
	return ""
}

func (x *OakProfileLastInventoryFilterInfo) GetLastFilterIndex() int32 {
	if x != nil && x.LastFilterIndex != nil {
		return *x.LastFilterIndex
	}
	return 0
}

type OakProfileMenuTutorialInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeenTutorials                  []string `protobuf:"bytes,1,rep,name=seen_tutorials,json=seenTutorials" json:"seen_tutorials,omitempty"`
	TutorialsDisabled              *bool    `protobuf:"varint,2,opt,name=tutorials_disabled,json=tutorialsDisabled" json:"tutorials_disabled,omitempty"`
	TutorialsAllowedInNonGameModes *bool    `protobuf:"varint,3,opt,name=tutorials_allowed_in_non_game_modes,json=tutorialsAllowedInNonGameModes" json:"tutorials_allowed_in_non_game_modes,omitempty"`
}

func (x *OakProfileMenuTutorialInfo) Reset() {
	*x = OakProfileMenuTutorialInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OakProfileMenuTutorialInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OakProfileMenuTutorialInfo) ProtoMessage() {}

func (x *OakProfileMenuTutorialInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OakProfileMenuTutorialInfo.ProtoReflect.Descriptor instead.
func (*OakProfileMenuTutorialInfo) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{6}
}

func (x *OakProfileMenuTutorialInfo) GetSeenTutorials() []string {
	if x != nil {
		return x.SeenTutorials
	}
	return nil
}

func (x *OakProfileMenuTutorialInfo) GetTutorialsDisabled() bool {
	if x != nil && x.TutorialsDisabled != nil {
		return *x.TutorialsDisabled
	}
	return false
}

func (x *OakProfileMenuTutorialInfo) GetTutorialsAllowedInNonGameModes() bool {
	if x != nil && x.TutorialsAllowedInNonGameModes != nil {
		return *x.TutorialsAllowedInNonGameModes
	}
	return false
}

type OakFriendEncounterData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumEncounters     *uint32 `protobuf:"varint,1,opt,name=num_encounters,json=numEncounters" json:"num_encounters,omitempty"`
	TimeLastEncounter *int64  `protobuf:"varint,2,opt,name=time_last_encounter,json=timeLastEncounter" json:"time_last_encounter,omitempty"`
}

func (x *OakFriendEncounterData) Reset() {
	*x = OakFriendEncounterData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OakFriendEncounterData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OakFriendEncounterData) ProtoMessage() {}

func (x *OakFriendEncounterData) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OakFriendEncounterData.ProtoReflect.Descriptor instead.
func (*OakFriendEncounterData) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{7}
}

func (x *OakFriendEncounterData) GetNumEncounters() uint32 {
	if x != nil && x.NumEncounters != nil {
		return *x.NumEncounters
	}
	return 0
}

func (x *OakFriendEncounterData) GetTimeLastEncounter() int64 {
	if x != nil && x.TimeLastEncounter != nil {
		return *x.TimeLastEncounter
	}
	return 0
}

type OakMailItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailItemType      *uint32 `protobuf:"varint,1,opt,name=mail_item_type,json=mailItemType" json:"mail_item_type,omitempty"`
	SenderDisplayName *string `protobuf:"bytes,2,opt,name=sender_display_name,json=senderDisplayName" json:"sender_display_name,omitempty"`
	Subject           *string `protobuf:"bytes,3,opt,name=subject" json:"subject,omitempty"`
	Body              *string `protobuf:"bytes,4,opt,name=body" json:"body,omitempty"`
	GearSerialNumber  *string `protobuf:"bytes,5,opt,name=gear_serial_number,json=gearSerialNumber" json:"gear_serial_number,omitempty"`
	MailGuid          *string `protobuf:"bytes,6,opt,name=mail_guid,json=mailGuid" json:"mail_guid,omitempty"`
	DateSent          *int64  `protobuf:"varint,7,opt,name=date_sent,json=dateSent" json:"date_sent,omitempty"`
	ExpirationDate    *int64  `protobuf:"varint,8,opt,name=expiration_date,json=expirationDate" json:"expiration_date,omitempty"`
	FromPlayerId      *string `protobuf:"bytes,9,opt,name=from_player_id,json=fromPlayerId" json:"from_player_id,omitempty"`
	HasBeenRead       *bool   `protobuf:"varint,10,opt,name=has_been_read,json=hasBeenRead" json:"has_been_read,omitempty"`
}

func (x *OakMailItem) Reset() {
	*x = OakMailItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OakMailItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OakMailItem) ProtoMessage() {}

func (x *OakMailItem) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OakMailItem.ProtoReflect.Descriptor instead.
func (*OakMailItem) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{8}
}

func (x *OakMailItem) GetMailItemType() uint32 {
	if x != nil && x.MailItemType != nil {
		return *x.MailItemType
	}
	return 0
}

func (x *OakMailItem) GetSenderDisplayName() string {
	if x != nil && x.SenderDisplayName != nil {
		return *x.SenderDisplayName
	}
	return ""
}

func (x *OakMailItem) GetSubject() string {
	if x != nil && x.Subject != nil {
		return *x.Subject
	}
	return ""
}

func (x *OakMailItem) GetBody() string {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return ""
}

func (x *OakMailItem) GetGearSerialNumber() string {
	if x != nil && x.GearSerialNumber != nil {
		return *x.GearSerialNumber
	}
	return ""
}

func (x *OakMailItem) GetMailGuid() string {
	if x != nil && x.MailGuid != nil {
		return *x.MailGuid
	}
	return ""
}

func (x *OakMailItem) GetDateSent() int64 {
	if x != nil && x.DateSent != nil {
		return *x.DateSent
	}
	return 0
}

func (x *OakMailItem) GetExpirationDate() int64 {
	if x != nil && x.ExpirationDate != nil {
		return *x.ExpirationDate
	}
	return 0
}

func (x *OakMailItem) GetFromPlayerId() string {
	if x != nil && x.FromPlayerId != nil {
		return *x.FromPlayerId
	}
	return ""
}

func (x *OakMailItem) GetHasBeenRead() bool {
	if x != nil && x.HasBeenRead != nil {
		return *x.HasBeenRead
	}
	return false
}

type GearSoldByFriendData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GearSerialNumber          *string `protobuf:"bytes,1,opt,name=gear_serial_number,json=gearSerialNumber" json:"gear_serial_number,omitempty"`
	PlayerClassIdentifierHash *int32  `protobuf:"varint,2,opt,name=player_class_identifier_hash,json=playerClassIdentifierHash" json:"player_class_identifier_hash,omitempty"`
	FriendNetId               *string `protobuf:"bytes,3,opt,name=friend_net_id,json=friendNetId" json:"friend_net_id,omitempty"`
}

func (x *GearSoldByFriendData) Reset() {
	*x = GearSoldByFriendData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearSoldByFriendData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearSoldByFriendData) ProtoMessage() {}

func (x *GearSoldByFriendData) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearSoldByFriendData.ProtoReflect.Descriptor instead.
func (*GearSoldByFriendData) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{9}
}

func (x *GearSoldByFriendData) GetGearSerialNumber() string {
	if x != nil && x.GearSerialNumber != nil {
		return *x.GearSerialNumber
	}
	return ""
}

func (x *GearSoldByFriendData) GetPlayerClassIdentifierHash() int32 {
	if x != nil && x.PlayerClassIdentifierHash != nil {
		return *x.PlayerClassIdentifierHash
	}
	return 0
}

func (x *GearSoldByFriendData) GetFriendNetId() string {
	if x != nil && x.FriendNetId != nil {
		return *x.FriendNetId
	}
	return ""
}

type OakCustomizationSaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNew                  *bool   `protobuf:"varint,1,opt,name=is_new,json=isNew" json:"is_new,omitempty"`
	CustomizationAssetPath *string `protobuf:"bytes,2,opt,name=customization_asset_path,json=customizationAssetPath" json:"customization_asset_path,omitempty"`
}

func (x *OakCustomizationSaveGameData) Reset() {
	*x = OakCustomizationSaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OakCustomizationSaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OakCustomizationSaveGameData) ProtoMessage() {}

func (x *OakCustomizationSaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OakCustomizationSaveGameData.ProtoReflect.Descriptor instead.
func (*OakCustomizationSaveGameData) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{10}
}

func (x *OakCustomizationSaveGameData) GetIsNew() bool {
	if x != nil && x.IsNew != nil {
		return *x.IsNew
	}
	return false
}

func (x *OakCustomizationSaveGameData) GetCustomizationAssetPath() string {
	if x != nil && x.CustomizationAssetPath != nil {
		return *x.CustomizationAssetPath
	}
	return ""
}

type OakInventoryCustomizationPartInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomizationPartHash *uint32 `protobuf:"varint,1,opt,name=customization_part_hash,json=customizationPartHash" json:"customization_part_hash,omitempty"`
	IsNew                 *bool   `protobuf:"varint,2,opt,name=is_new,json=isNew" json:"is_new,omitempty"`
}

func (x *OakInventoryCustomizationPartInfo) Reset() {
	*x = OakInventoryCustomizationPartInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OakInventoryCustomizationPartInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OakInventoryCustomizationPartInfo) ProtoMessage() {}

func (x *OakInventoryCustomizationPartInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OakInventoryCustomizationPartInfo.ProtoReflect.Descriptor instead.
func (*OakInventoryCustomizationPartInfo) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{11}
}

func (x *OakInventoryCustomizationPartInfo) GetCustomizationPartHash() uint32 {
	if x != nil && x.CustomizationPartHash != nil {
		return *x.CustomizationPartHash
	}
	return 0
}

func (x *OakInventoryCustomizationPartInfo) GetIsNew() bool {
	if x != nil && x.IsNew != nil {
		return *x.IsNew
	}
	return false
}

type GuardianRankRewardSaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumTokens      *int32  `protobuf:"varint,1,opt,name=num_tokens,json=numTokens" json:"num_tokens,omitempty"`
	RewardDataPath *string `protobuf:"bytes,2,opt,name=reward_data_path,json=rewardDataPath" json:"reward_data_path,omitempty"`
}

func (x *GuardianRankRewardSaveGameData) Reset() {
	*x = GuardianRankRewardSaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuardianRankRewardSaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuardianRankRewardSaveGameData) ProtoMessage() {}

func (x *GuardianRankRewardSaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuardianRankRewardSaveGameData.ProtoReflect.Descriptor instead.
func (*GuardianRankRewardSaveGameData) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{12}
}

func (x *GuardianRankRewardSaveGameData) GetNumTokens() int32 {
	if x != nil && x.NumTokens != nil {
		return *x.NumTokens
	}
	return 0
}

func (x *GuardianRankRewardSaveGameData) GetRewardDataPath() string {
	if x != nil && x.RewardDataPath != nil {
		return *x.RewardDataPath
	}
	return ""
}

type GuardianRankProfileData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableTokens    *int32                            `protobuf:"varint,1,opt,name=available_tokens,json=availableTokens" json:"available_tokens,omitempty"`
	RankRewards        []*GuardianRankRewardSaveGameData `protobuf:"bytes,2,rep,name=rank_rewards,json=rankRewards" json:"rank_rewards,omitempty"`
	GuardianRank       *int32                            `protobuf:"varint,3,opt,name=guardian_rank,json=guardianRank" json:"guardian_rank,omitempty"`
	GuardianExperience *int32                            `protobuf:"varint,4,opt,name=guardian_experience,json=guardianExperience" json:"guardian_experience,omitempty"`
}

func (x *GuardianRankProfileData) Reset() {
	*x = GuardianRankProfileData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuardianRankProfileData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuardianRankProfileData) ProtoMessage() {}

func (x *GuardianRankProfileData) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuardianRankProfileData.ProtoReflect.Descriptor instead.
func (*GuardianRankProfileData) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{13}
}

func (x *GuardianRankProfileData) GetAvailableTokens() int32 {
	if x != nil && x.AvailableTokens != nil {
		return *x.AvailableTokens
	}
	return 0
}

func (x *GuardianRankProfileData) GetRankRewards() []*GuardianRankRewardSaveGameData {
	if x != nil {
		return x.RankRewards
	}
	return nil
}

func (x *GuardianRankProfileData) GetGuardianRank() int32 {
	if x != nil && x.GuardianRank != nil {
		return *x.GuardianRank
	}
	return 0
}

func (x *GuardianRankProfileData) GetGuardianExperience() int32 {
	if x != nil && x.GuardianExperience != nil {
		return *x.GuardianExperience
	}
	return 0
}

type CrewQuartersDecorationItemSaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNew                   *bool   `protobuf:"varint,1,opt,name=is_new,json=isNew" json:"is_new,omitempty"`
	DecorationItemAssetPath *string `protobuf:"bytes,2,opt,name=decoration_item_asset_path,json=decorationItemAssetPath" json:"decoration_item_asset_path,omitempty"`
}

func (x *CrewQuartersDecorationItemSaveGameData) Reset() {
	*x = CrewQuartersDecorationItemSaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrewQuartersDecorationItemSaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrewQuartersDecorationItemSaveGameData) ProtoMessage() {}

func (x *CrewQuartersDecorationItemSaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrewQuartersDecorationItemSaveGameData.ProtoReflect.Descriptor instead.
func (*CrewQuartersDecorationItemSaveGameData) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{14}
}

func (x *CrewQuartersDecorationItemSaveGameData) GetIsNew() bool {
	if x != nil && x.IsNew != nil {
		return *x.IsNew
	}
	return false
}

func (x *CrewQuartersDecorationItemSaveGameData) GetDecorationItemAssetPath() string {
	if x != nil && x.DecorationItemAssetPath != nil {
		return *x.DecorationItemAssetPath
	}
	return ""
}

type CrewQuartersRoomItemSaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNew             *bool   `protobuf:"varint,1,opt,name=is_new,json=isNew" json:"is_new,omitempty"`
	RoomItemAssetPath *string `protobuf:"bytes,2,opt,name=room_item_asset_path,json=roomItemAssetPath" json:"room_item_asset_path,omitempty"`
}

func (x *CrewQuartersRoomItemSaveGameData) Reset() {
	*x = CrewQuartersRoomItemSaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrewQuartersRoomItemSaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrewQuartersRoomItemSaveGameData) ProtoMessage() {}

func (x *CrewQuartersRoomItemSaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrewQuartersRoomItemSaveGameData.ProtoReflect.Descriptor instead.
func (*CrewQuartersRoomItemSaveGameData) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{15}
}

func (x *CrewQuartersRoomItemSaveGameData) GetIsNew() bool {
	if x != nil && x.IsNew != nil {
		return *x.IsNew
	}
	return false
}

func (x *CrewQuartersRoomItemSaveGameData) GetRoomItemAssetPath() string {
	if x != nil && x.RoomItemAssetPath != nil {
		return *x.RoomItemAssetPath
	}
	return ""
}

type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableAimAssist                      *bool                                     `protobuf:"varint,1,opt,name=enable_aim_assist,json=enableAimAssist" json:"enable_aim_assist,omitempty"`
	GamepadInvertLook                    *bool                                     `protobuf:"varint,2,opt,name=gamepad_invert_look,json=gamepadInvertLook" json:"gamepad_invert_look,omitempty"`
	GamepadInvertTurn                    *bool                                     `protobuf:"varint,3,opt,name=gamepad_invert_turn,json=gamepadInvertTurn" json:"gamepad_invert_turn,omitempty"`
	GamepadInvertMove                    *bool                                     `protobuf:"varint,4,opt,name=gamepad_invert_move,json=gamepadInvertMove" json:"gamepad_invert_move,omitempty"`
	GamepadInvertStrafe                  *bool                                     `protobuf:"varint,5,opt,name=gamepad_invert_strafe,json=gamepadInvertStrafe" json:"gamepad_invert_strafe,omitempty"`
	EnableVibration                      *bool                                     `protobuf:"varint,6,opt,name=enable_vibration,json=enableVibration" json:"enable_vibration,omitempty"`
	InvertMousePitch                     *bool                                     `protobuf:"varint,7,opt,name=invert_mouse_pitch,json=invertMousePitch" json:"invert_mouse_pitch,omitempty"`
	EnableMouseSmoothing                 *bool                                     `protobuf:"varint,8,opt,name=enable_mouse_smoothing,json=enableMouseSmoothing" json:"enable_mouse_smoothing,omitempty"`
	MouseScale                           *float32                                  `protobuf:"fixed32,9,opt,name=mouse_scale,json=mouseScale" json:"mouse_scale,omitempty"`
	ShowDamageNumbers                    *bool                                     `protobuf:"varint,10,opt,name=show_damage_numbers,json=showDamageNumbers" json:"show_damage_numbers,omitempty"`
	ShowDamageNumberIcons                *bool                                     `protobuf:"varint,11,opt,name=show_damage_number_icons,json=showDamageNumberIcons" json:"show_damage_number_icons,omitempty"`
	EnableTrainingMessages               *bool                                     `protobuf:"varint,12,opt,name=enable_training_messages,json=enableTrainingMessages" json:"enable_training_messages,omitempty"`
	ShowTextChat                         *bool                                     `protobuf:"varint,13,opt,name=show_text_chat,json=showTextChat" json:"show_text_chat,omitempty"`
	CenterCrosshair                      *bool                                     `protobuf:"varint,14,opt,name=center_crosshair,json=centerCrosshair" json:"center_crosshair,omitempty"`
	ToggleSprint                         *bool                                     `protobuf:"varint,15,opt,name=toggle_sprint,json=toggleSprint" json:"toggle_sprint,omitempty"`
	ToggleCrouch                         *bool                                     `protobuf:"varint,16,opt,name=toggle_crouch,json=toggleCrouch" json:"toggle_crouch,omitempty"`
	CensorContent                        *bool                                     `protobuf:"varint,17,opt,name=censor_content,json=censorContent" json:"censor_content,omitempty"`
	MusicVolume                          *float32                                  `protobuf:"fixed32,18,opt,name=music_volume,json=musicVolume" json:"music_volume,omitempty"`
	SoundEffectsVolume                   *float32                                  `protobuf:"fixed32,19,opt,name=sound_effects_volume,json=soundEffectsVolume" json:"sound_effects_volume,omitempty"`
	VoVolume                             *float32                                  `protobuf:"fixed32,20,opt,name=vo_volume,json=voVolume" json:"vo_volume,omitempty"`
	VoiceVolume                          *float32                                  `protobuf:"fixed32,21,opt,name=voice_volume,json=voiceVolume" json:"voice_volume,omitempty"`
	EnableOptionalVo                     *bool                                     `protobuf:"varint,22,opt,name=enable_optional_vo,json=enableOptionalVo" json:"enable_optional_vo,omitempty"`
	PushToTalk                           *bool                                     `protobuf:"varint,23,opt,name=push_to_talk,json=pushToTalk" json:"push_to_talk,omitempty"`
	EnableControllerAudio                *bool                                     `protobuf:"varint,24,opt,name=enable_controller_audio,json=enableControllerAudio" json:"enable_controller_audio,omitempty"`
	SpeakerAngleFront                    *float32                                  `protobuf:"fixed32,25,opt,name=speaker_angle_front,json=speakerAngleFront" json:"speaker_angle_front,omitempty"`
	SpeakerAngleSide                     *float32                                  `protobuf:"fixed32,26,opt,name=speaker_angle_side,json=speakerAngleSide" json:"speaker_angle_side,omitempty"`
	SpeakerAngleBack                     *float32                                  `protobuf:"fixed32,27,opt,name=speaker_angle_back,json=speakerAngleBack" json:"speaker_angle_back,omitempty"`
	SpeakerSetup                         *uint32                                   `protobuf:"varint,28,opt,name=speaker_setup,json=speakerSetup" json:"speaker_setup,omitempty"`
	MuteAudioOnFocusLoss                 *bool                                     `protobuf:"varint,29,opt,name=mute_audio_on_focus_loss,json=muteAudioOnFocusLoss" json:"mute_audio_on_focus_loss,omitempty"`
	HideStrictNatHelpDialog              *bool                                     `protobuf:"varint,34,opt,name=hide_strict_nat_help_dialog,json=hideStrictNatHelpDialog" json:"hide_strict_nat_help_dialog,omitempty"`
	PlayerInputBindings                  *PlayerInputBindings                      `protobuf:"bytes,35,opt,name=player_input_bindings,json=playerInputBindings" json:"player_input_bindings,omitempty"`
	NewsHashes                           []uint32                                  `protobuf:"varint,36,rep,name=news_hashes,json=newsHashes" json:"news_hashes,omitempty"`
	LastUsedSavegameId                   *uint32                                   `protobuf:"varint,37,opt,name=last_used_savegame_id,json=lastUsedSavegameId" json:"last_used_savegame_id,omitempty"`
	GamepadHipSensitivityLevel           *int32                                    `protobuf:"varint,38,opt,name=gamepad_hip_sensitivity_level,json=gamepadHipSensitivityLevel" json:"gamepad_hip_sensitivity_level,omitempty"`
	GamepadZoomedSensitivityLevel        *int32                                    `protobuf:"varint,39,opt,name=gamepad_zoomed_sensitivity_level,json=gamepadZoomedSensitivityLevel" json:"gamepad_zoomed_sensitivity_level,omitempty"`
	GamepadVehicleSensitivityLevel       *int32                                    `protobuf:"varint,40,opt,name=gamepad_vehicle_sensitivity_level,json=gamepadVehicleSensitivityLevel" json:"gamepad_vehicle_sensitivity_level,omitempty"`
	GamepadMovementDeadZoneX             *float32                                  `protobuf:"fixed32,41,opt,name=gamepad_movement_dead_zone_x,json=gamepadMovementDeadZoneX" json:"gamepad_movement_dead_zone_x,omitempty"`
	GamepadMovementDeadZoneY             *float32                                  `protobuf:"fixed32,42,opt,name=gamepad_movement_dead_zone_y,json=gamepadMovementDeadZoneY" json:"gamepad_movement_dead_zone_y,omitempty"`
	GamepadLookDeadZoneInnerX            *float32                                  `protobuf:"fixed32,43,opt,name=gamepad_look_dead_zone_inner_x,json=gamepadLookDeadZoneInnerX" json:"gamepad_look_dead_zone_inner_x,omitempty"`
	GamepadLookDeadZoneOuterX            *float32                                  `protobuf:"fixed32,44,opt,name=gamepad_look_dead_zone_outer_x,json=gamepadLookDeadZoneOuterX" json:"gamepad_look_dead_zone_outer_x,omitempty"`
	GamepadLookDeadZoneInnerY            *float32                                  `protobuf:"fixed32,45,opt,name=gamepad_look_dead_zone_inner_y,json=gamepadLookDeadZoneInnerY" json:"gamepad_look_dead_zone_inner_y,omitempty"`
	GamepadLookDeadZoneOuterY            *float32                                  `protobuf:"fixed32,46,opt,name=gamepad_look_dead_zone_outer_y,json=gamepadLookDeadZoneOuterY" json:"gamepad_look_dead_zone_outer_y,omitempty"`
	GamepadVehicleMovementDeadZoneX      *float32                                  `protobuf:"fixed32,47,opt,name=gamepad_vehicle_movement_dead_zone_x,json=gamepadVehicleMovementDeadZoneX" json:"gamepad_vehicle_movement_dead_zone_x,omitempty"`
	GamepadVehicleMovementDeadZoneY      *float32                                  `protobuf:"fixed32,48,opt,name=gamepad_vehicle_movement_dead_zone_y,json=gamepadVehicleMovementDeadZoneY" json:"gamepad_vehicle_movement_dead_zone_y,omitempty"`
	GamepadVehicleLookDeadZoneInnerX     *float32                                  `protobuf:"fixed32,49,opt,name=gamepad_vehicle_look_dead_zone_inner_x,json=gamepadVehicleLookDeadZoneInnerX" json:"gamepad_vehicle_look_dead_zone_inner_x,omitempty"`
	GamepadVehicleLookDeadZoneOuterX     *float32                                  `protobuf:"fixed32,50,opt,name=gamepad_vehicle_look_dead_zone_outer_x,json=gamepadVehicleLookDeadZoneOuterX" json:"gamepad_vehicle_look_dead_zone_outer_x,omitempty"`
	GamepadVehicleLookDeadZoneInnerY     *float32                                  `protobuf:"fixed32,51,opt,name=gamepad_vehicle_look_dead_zone_inner_y,json=gamepadVehicleLookDeadZoneInnerY" json:"gamepad_vehicle_look_dead_zone_inner_y,omitempty"`
	GamepadVehicleLookDeadZoneOuterY     *float32                                  `protobuf:"fixed32,52,opt,name=gamepad_vehicle_look_dead_zone_outer_y,json=gamepadVehicleLookDeadZoneOuterY" json:"gamepad_vehicle_look_dead_zone_outer_y,omitempty"`
	GamepadLeftDeadZoneInner             *float32                                  `protobuf:"fixed32,53,opt,name=gamepad_left_dead_zone_inner,json=gamepadLeftDeadZoneInner" json:"gamepad_left_dead_zone_inner,omitempty"`
	GamepadLeftDeadZoneOuter             *float32                                  `protobuf:"fixed32,54,opt,name=gamepad_left_dead_zone_outer,json=gamepadLeftDeadZoneOuter" json:"gamepad_left_dead_zone_outer,omitempty"`
	GamepadRightDeadZoneInner            *float32                                  `protobuf:"fixed32,55,opt,name=gamepad_right_dead_zone_inner,json=gamepadRightDeadZoneInner" json:"gamepad_right_dead_zone_inner,omitempty"`
	GamepadRightDeadZoneOuter            *float32                                  `protobuf:"fixed32,56,opt,name=gamepad_right_dead_zone_outer,json=gamepadRightDeadZoneOuter" json:"gamepad_right_dead_zone_outer,omitempty"`
	GamepadLookAxialDeadZoneScale        *float32                                  `protobuf:"fixed32,57,opt,name=gamepad_look_axial_dead_zone_scale,json=gamepadLookAxialDeadZoneScale" json:"gamepad_look_axial_dead_zone_scale,omitempty"`
	GamepadMoveAxialDeadZoneScale        *float32                                  `protobuf:"fixed32,58,opt,name=gamepad_move_axial_dead_zone_scale,json=gamepadMoveAxialDeadZoneScale" json:"gamepad_move_axial_dead_zone_scale,omitempty"`
	GamepadUseAdvancedHipAimSettings     *bool                                     `protobuf:"varint,59,opt,name=gamepad_use_advanced_hip_aim_settings,json=gamepadUseAdvancedHipAimSettings" json:"gamepad_use_advanced_hip_aim_settings,omitempty"`
	GamepadUseAdvancedZoomedAimSettings  *bool                                     `protobuf:"varint,60,opt,name=gamepad_use_advanced_zoomed_aim_settings,json=gamepadUseAdvancedZoomedAimSettings" json:"gamepad_use_advanced_zoomed_aim_settings,omitempty"`
	GamepadUseAdvancedVehicleAimSettings *bool                                     `protobuf:"varint,61,opt,name=gamepad_use_advanced_vehicle_aim_settings,json=gamepadUseAdvancedVehicleAimSettings" json:"gamepad_use_advanced_vehicle_aim_settings,omitempty"`
	GamepadHipYawRate                    *float32                                  `protobuf:"fixed32,62,opt,name=gamepad_hip_yaw_rate,json=gamepadHipYawRate" json:"gamepad_hip_yaw_rate,omitempty"`
	GamepadHipPitchRate                  *float32                                  `protobuf:"fixed32,63,opt,name=gamepad_hip_pitch_rate,json=gamepadHipPitchRate" json:"gamepad_hip_pitch_rate,omitempty"`
	GamepadHipExtraYaw                   *float32                                  `protobuf:"fixed32,64,opt,name=gamepad_hip_extra_yaw,json=gamepadHipExtraYaw" json:"gamepad_hip_extra_yaw,omitempty"`
	GamepadHipExtraPitch                 *float32                                  `protobuf:"fixed32,65,opt,name=gamepad_hip_extra_pitch,json=gamepadHipExtraPitch" json:"gamepad_hip_extra_pitch,omitempty"`
	GamepadHipRampUpTime                 *float32                                  `protobuf:"fixed32,66,opt,name=gamepad_hip_ramp_up_time,json=gamepadHipRampUpTime" json:"gamepad_hip_ramp_up_time,omitempty"`
	GamepadHipRampUpDelay                *float32                                  `protobuf:"fixed32,67,opt,name=gamepad_hip_ramp_up_delay,json=gamepadHipRampUpDelay" json:"gamepad_hip_ramp_up_delay,omitempty"`
	GamepadZoomedYawRate                 *float32                                  `protobuf:"fixed32,68,opt,name=gamepad_zoomed_yaw_rate,json=gamepadZoomedYawRate" json:"gamepad_zoomed_yaw_rate,omitempty"`
	GamepadZoomedPitchRate               *float32                                  `protobuf:"fixed32,69,opt,name=gamepad_zoomed_pitch_rate,json=gamepadZoomedPitchRate" json:"gamepad_zoomed_pitch_rate,omitempty"`
	GamepadZoomedExtraYaw                *float32                                  `protobuf:"fixed32,70,opt,name=gamepad_zoomed_extra_yaw,json=gamepadZoomedExtraYaw" json:"gamepad_zoomed_extra_yaw,omitempty"`
	GamepadZoomedExtraPitch              *float32                                  `protobuf:"fixed32,71,opt,name=gamepad_zoomed_extra_pitch,json=gamepadZoomedExtraPitch" json:"gamepad_zoomed_extra_pitch,omitempty"`
	GamepadZoomedRampUpTime              *float32                                  `protobuf:"fixed32,72,opt,name=gamepad_zoomed_ramp_up_time,json=gamepadZoomedRampUpTime" json:"gamepad_zoomed_ramp_up_time,omitempty"`
	GamepadZoomedRampUpDelay             *float32                                  `protobuf:"fixed32,73,opt,name=gamepad_zoomed_ramp_up_delay,json=gamepadZoomedRampUpDelay" json:"gamepad_zoomed_ramp_up_delay,omitempty"`
	GamepadVehicleYawRate                *float32                                  `protobuf:"fixed32,74,opt,name=gamepad_vehicle_yaw_rate,json=gamepadVehicleYawRate" json:"gamepad_vehicle_yaw_rate,omitempty"`
	GamepadVehiclePitchRate              *float32                                  `protobuf:"fixed32,75,opt,name=gamepad_vehicle_pitch_rate,json=gamepadVehiclePitchRate" json:"gamepad_vehicle_pitch_rate,omitempty"`
	GamepadVehicleExtraYaw               *float32                                  `protobuf:"fixed32,76,opt,name=gamepad_vehicle_extra_yaw,json=gamepadVehicleExtraYaw" json:"gamepad_vehicle_extra_yaw,omitempty"`
	GamepadVehicleExtraPitch             *float32                                  `protobuf:"fixed32,77,opt,name=gamepad_vehicle_extra_pitch,json=gamepadVehicleExtraPitch" json:"gamepad_vehicle_extra_pitch,omitempty"`
	GamepadVehicleRampUpTime             *float32                                  `protobuf:"fixed32,78,opt,name=gamepad_vehicle_ramp_up_time,json=gamepadVehicleRampUpTime" json:"gamepad_vehicle_ramp_up_time,omitempty"`
	GamepadVehicleRampUpDelay            *float32                                  `protobuf:"fixed32,79,opt,name=gamepad_vehicle_ramp_up_delay,json=gamepadVehicleRampUpDelay" json:"gamepad_vehicle_ramp_up_delay,omitempty"`
	IronsightAimAssist                   *bool                                     `protobuf:"varint,80,opt,name=ironsight_aim_assist,json=ironsightAimAssist" json:"ironsight_aim_assist,omitempty"`
	WalkingJoystickScheme                *uint32                                   `protobuf:"varint,81,opt,name=walking_joystick_scheme,json=walkingJoystickScheme" json:"walking_joystick_scheme,omitempty"`
	DrivingJoystickScheme                *uint32                                   `protobuf:"varint,82,opt,name=driving_joystick_scheme,json=drivingJoystickScheme" json:"driving_joystick_scheme,omitempty"`
	MouseAdsScale                        *float32                                  `protobuf:"fixed32,83,opt,name=mouse_ads_scale,json=mouseAdsScale" json:"mouse_ads_scale,omitempty"`
	MouseVehicleScale                    *float32                                  `protobuf:"fixed32,84,opt,name=mouse_vehicle_scale,json=mouseVehicleScale" json:"mouse_vehicle_scale,omitempty"`
	MouseIronsightAimAssist              *bool                                     `protobuf:"varint,85,opt,name=mouse_ironsight_aim_assist,json=mouseIronsightAimAssist" json:"mouse_ironsight_aim_assist,omitempty"`
	VehicleInputMode                     *uint32                                   `protobuf:"varint,86,opt,name=vehicle_input_mode,json=vehicleInputMode" json:"vehicle_input_mode,omitempty"`
	WeaponAimToggle                      *bool                                     `protobuf:"varint,87,opt,name=weapon_aim_toggle,json=weaponAimToggle" json:"weapon_aim_toggle,omitempty"`
	MantleRequiresButton                 *bool                                     `protobuf:"varint,88,opt,name=mantle_requires_button,json=mantleRequiresButton" json:"mantle_requires_button,omitempty"`
	FixedMinimapRotation                 *bool                                     `protobuf:"varint,89,opt,name=fixed_minimap_rotation,json=fixedMinimapRotation" json:"fixed_minimap_rotation,omitempty"`
	MapInvertPitch                       *bool                                     `protobuf:"varint,90,opt,name=map_invert_pitch,json=mapInvertPitch" json:"map_invert_pitch,omitempty"`
	MapInvertYaw                         *bool                                     `protobuf:"varint,91,opt,name=map_invert_yaw,json=mapInvertYaw" json:"map_invert_yaw,omitempty"`
	Difficulty                           *uint32                                   `protobuf:"varint,92,opt,name=difficulty" json:"difficulty,omitempty"`
	SwapDualWieldControls                *bool                                     `protobuf:"varint,93,opt,name=swap_dual_wield_controls,json=swapDualWieldControls" json:"swap_dual_wield_controls,omitempty"`
	BaseFov                              *float32                                  `protobuf:"fixed32,94,opt,name=base_fov,json=baseFov" json:"base_fov,omitempty"`
	CrosshairNeutralColorFrame           *uint32                                   `protobuf:"varint,95,opt,name=crosshair_neutral_color_frame,json=crosshairNeutralColorFrame" json:"crosshair_neutral_color_frame,omitempty"`
	CrosshairEnemyColorFrame             *uint32                                   `protobuf:"varint,96,opt,name=crosshair_enemy_color_frame,json=crosshairEnemyColorFrame" json:"crosshair_enemy_color_frame,omitempty"`
	CrosshairAllyColorFrame              *uint32                                   `protobuf:"varint,97,opt,name=crosshair_ally_color_frame,json=crosshairAllyColorFrame" json:"crosshair_ally_color_frame,omitempty"`
	EnableSubtitles                      *bool                                     `protobuf:"varint,98,opt,name=enable_subtitles,json=enableSubtitles" json:"enable_subtitles,omitempty"`
	EnableClosedCaptions                 *bool                                     `protobuf:"varint,99,opt,name=enable_closed_captions,json=enableClosedCaptions" json:"enable_closed_captions,omitempty"`
	LastStatusMenuPage                   *string                                   `protobuf:"bytes,100,opt,name=last_status_menu_page,json=lastStatusMenuPage" json:"last_status_menu_page,omitempty"`
	InventoryScreenLastFilter            []*OakProfileLastInventoryFilterInfo      `protobuf:"bytes,101,rep,name=inventory_screen_last_filter,json=inventoryScreenLastFilter" json:"inventory_screen_last_filter,omitempty"`
	TutorialInfo                         *OakProfileMenuTutorialInfo               `protobuf:"bytes,102,opt,name=tutorial_info,json=tutorialInfo" json:"tutorial_info,omitempty"`
	DefaultNetworkType                   *uint32                                   `protobuf:"varint,103,opt,name=default_network_type,json=defaultNetworkType" json:"default_network_type,omitempty"`
	DefaultInviteType                    *uint32                                   `protobuf:"varint,104,opt,name=default_invite_type,json=defaultInviteType" json:"default_invite_type,omitempty"`
	MatchmakingRegion                    *string                                   `protobuf:"bytes,105,opt,name=matchmaking_region,json=matchmakingRegion" json:"matchmaking_region,omitempty"`
	StreamingService                     *uint32                                   `protobuf:"varint,106,opt,name=streaming_service,json=streamingService" json:"streaming_service,omitempty"`
	MaxCachedFriendEvents                *int32                                    `protobuf:"varint,107,opt,name=max_cached_friend_events,json=maxCachedFriendEvents" json:"max_cached_friend_events,omitempty"`
	MaxCachedFriendStatuses              *int32                                    `protobuf:"varint,108,opt,name=max_cached_friend_statuses,json=maxCachedFriendStatuses" json:"max_cached_friend_statuses,omitempty"`
	FriendEvents                         []string                                  `protobuf:"bytes,109,rep,name=friend_events,json=friendEvents" json:"friend_events,omitempty"`
	FriendStatuses                       []string                                  `protobuf:"bytes,110,rep,name=friend_statuses,json=friendStatuses" json:"friend_statuses,omitempty"`
	LastWhisperFetchEventsTime           *int64                                    `protobuf:"varint,111,opt,name=last_whisper_fetch_events_time,json=lastWhisperFetchEventsTime" json:"last_whisper_fetch_events_time,omitempty"`
	LastWhisperFetchStatusesTime         *int64                                    `protobuf:"varint,112,opt,name=last_whisper_fetch_statuses_time,json=lastWhisperFetchStatusesTime" json:"last_whisper_fetch_statuses_time,omitempty"`
	RecentlyMetPlayers                   []string                                  `protobuf:"bytes,132,rep,name=recently_met_players,json=recentlyMetPlayers" json:"recently_met_players,omitempty"`
	FriendEncounters                     []*Profile_FriendEncountersEntry          `protobuf:"bytes,133,rep,name=friend_encounters,json=friendEncounters" json:"friend_encounters,omitempty"`
	MaxFriendEncounterSize               *int32                                    `protobuf:"varint,134,opt,name=max_friend_encounter_size,json=maxFriendEncounterSize" json:"max_friend_encounter_size,omitempty"`
	ProfileStatsData                     []*GameStatSaveGameData                   `protobuf:"bytes,135,rep,name=profile_stats_data,json=profileStatsData" json:"profile_stats_data,omitempty"`
	BankInventoryCategoryList            []*InventoryCategorySaveData              `protobuf:"bytes,136,rep,name=bank_inventory_category_list,json=bankInventoryCategoryList" json:"bank_inventory_category_list,omitempty"`
	BankInventoryList                    [][]byte                                  `protobuf:"bytes,137,rep,name=bank_inventory_list,json=bankInventoryList" json:"bank_inventory_list,omitempty"`
	LostLootInventoryList                [][]byte                                  `protobuf:"bytes,138,rep,name=lost_loot_inventory_list,json=lostLootInventoryList" json:"lost_loot_inventory_list,omitempty"`
	NpcMailItems                         []*OakMailItem                            `protobuf:"bytes,139,rep,name=npc_mail_items,json=npcMailItems" json:"npc_mail_items,omitempty"`
	MailGuids                            []string                                  `protobuf:"bytes,140,rep,name=mail_guids,json=mailGuids" json:"mail_guids,omitempty"`
	UnreadMailGuids                      []string                                  `protobuf:"bytes,141,rep,name=unread_mail_guids,json=unreadMailGuids" json:"unread_mail_guids,omitempty"`
	GearSoldByFriends                    []*GearSoldByFriendData                   `protobuf:"bytes,142,rep,name=gear_sold_by_friends,json=gearSoldByFriends" json:"gear_sold_by_friends,omitempty"`
	ProfileSduList                       []*OakSDUSaveGameData                     `protobuf:"bytes,143,rep,name=profile_sdu_list,json=profileSduList" json:"profile_sdu_list,omitempty"`
	UnlockedCustomizations               []*OakCustomizationSaveGameData           `protobuf:"bytes,144,rep,name=unlocked_customizations,json=unlockedCustomizations" json:"unlocked_customizations,omitempty"`
	UnlockedInventoryCustomizationParts  []*OakInventoryCustomizationPartInfo      `protobuf:"bytes,145,rep,name=unlocked_inventory_customization_parts,json=unlockedInventoryCustomizationParts" json:"unlocked_inventory_customization_parts,omitempty"`
	GuardianRank                         *GuardianRankProfileData                  `protobuf:"bytes,146,opt,name=guardian_rank,json=guardianRank" json:"guardian_rank,omitempty"`
	UnlockedCrewQuartersDecorations      []*CrewQuartersDecorationItemSaveGameData `protobuf:"bytes,147,rep,name=unlocked_crew_quarters_decorations,json=unlockedCrewQuartersDecorations" json:"unlocked_crew_quarters_decorations,omitempty"`
	UnlockedCrewQuartersRooms            []*CrewQuartersRoomItemSaveGameData       `protobuf:"bytes,148,rep,name=unlocked_crew_quarters_rooms,json=unlockedCrewQuartersRooms" json:"unlocked_crew_quarters_rooms,omitempty"`
	EnableMouseAcceleration              *bool                                     `protobuf:"varint,150,opt,name=enable_mouse_acceleration,json=enableMouseAcceleration" json:"enable_mouse_acceleration,omitempty"`
	EnableGamepadInput                   *bool                                     `protobuf:"varint,151,opt,name=enable_gamepad_input,json=enableGamepadInput" json:"enable_gamepad_input,omitempty"`
	UseClassicGamepadInput               *bool                                     `protobuf:"varint,152,opt,name=use_classic_gamepad_input,json=useClassicGamepadInput" json:"use_classic_gamepad_input,omitempty"`
	MasterVolume                         *float32                                  `protobuf:"fixed32,153,opt,name=master_volume,json=masterVolume" json:"master_volume,omitempty"`
	MonitorDisplayType                   *uint32                                   `protobuf:"varint,154,opt,name=monitor_display_type,json=monitorDisplayType" json:"monitor_display_type,omitempty"`
	GraphicsMode                         *uint32                                   `protobuf:"varint,155,opt,name=graphics_mode,json=graphicsMode" json:"graphics_mode,omitempty"`
	FrameRateLimit                       *uint32                                   `protobuf:"varint,156,opt,name=frame_rate_limit,json=frameRateLimit" json:"frame_rate_limit,omitempty"`
	BaseVehicleFov                       *float32                                  `protobuf:"fixed32,157,opt,name=base_vehicle_fov,json=baseVehicleFov" json:"base_vehicle_fov,omitempty"`
	GraphicsQuality                      *uint32                                   `protobuf:"varint,158,opt,name=graphics_quality,json=graphicsQuality" json:"graphics_quality,omitempty"`
	AnisotropicFiltering                 *uint32                                   `protobuf:"varint,159,opt,name=anisotropic_filtering,json=anisotropicFiltering" json:"anisotropic_filtering,omitempty"`
	ShadowQuality                        *uint32                                   `protobuf:"varint,160,opt,name=shadow_quality,json=shadowQuality" json:"shadow_quality,omitempty"`
	DisplayPerformanceStats              *uint32                                   `protobuf:"varint,161,opt,name=display_performance_stats,json=displayPerformanceStats" json:"display_performance_stats,omitempty"`
	TextureDetail                        *uint32                                   `protobuf:"varint,162,opt,name=texture_detail,json=textureDetail" json:"texture_detail,omitempty"`
	DrawDistance                         *uint32                                   `protobuf:"varint,163,opt,name=draw_distance,json=drawDistance" json:"draw_distance,omitempty"`
	Clutter                              *uint32                                   `protobuf:"varint,164,opt,name=clutter" json:"clutter,omitempty"`
	Tessellation                         *uint32                                   `protobuf:"varint,165,opt,name=tessellation" json:"tessellation,omitempty"`
	Foliage                              *uint32                                   `protobuf:"varint,166,opt,name=foliage" json:"foliage,omitempty"`
	FoliageShadows                       *bool                                     `protobuf:"varint,167,opt,name=foliage_shadows,json=foliageShadows" json:"foliage_shadows,omitempty"`
	PlanarReflections                    *bool                                     `protobuf:"varint,168,opt,name=planar_reflections,json=planarReflections" json:"planar_reflections,omitempty"`
	VolumetricFog                        *uint32                                   `protobuf:"varint,169,opt,name=volumetric_fog,json=volumetricFog" json:"volumetric_fog,omitempty"`
	ScreenSpaceReflections               *uint32                                   `protobuf:"varint,170,opt,name=screen_space_reflections,json=screenSpaceReflections" json:"screen_space_reflections,omitempty"`
	CharacterTextureDetail               *uint32                                   `protobuf:"varint,171,opt,name=character_texture_detail,json=characterTextureDetail" json:"character_texture_detail,omitempty"`
	CharacterDetail                      *uint32                                   `protobuf:"varint,172,opt,name=character_detail,json=characterDetail" json:"character_detail,omitempty"`
	AmbientOcclusionQuality              *uint32                                   `protobuf:"varint,173,opt,name=ambient_occlusion_quality,json=ambientOcclusionQuality" json:"ambient_occlusion_quality,omitempty"`
	ObjectMotionBlur                     *bool                                     `protobuf:"varint,174,opt,name=object_motion_blur,json=objectMotionBlur" json:"object_motion_blur,omitempty"`
	LensFlare                            *bool                                     `protobuf:"varint,175,opt,name=lens_flare,json=lensFlare" json:"lens_flare,omitempty"`
	CombatNumberLongFormat               *bool                                     `protobuf:"varint,176,opt,name=combat_number_long_format,json=combatNumberLongFormat" json:"combat_number_long_format,omitempty"`
	ShowMinimapLegendaries               *bool                                     `protobuf:"varint,177,opt,name=show_minimap_legendaries,json=showMinimapLegendaries" json:"show_minimap_legendaries,omitempty"`
	UsePlayerCallouts                    *bool                                     `protobuf:"varint,178,opt,name=use_player_callouts,json=usePlayerCallouts" json:"use_player_callouts,omitempty"`
	FriendEventNotificationLifetime      *uint32                                   `protobuf:"varint,179,opt,name=friend_event_notification_lifetime,json=friendEventNotificationLifetime" json:"friend_event_notification_lifetime,omitempty"`
	FriendEventNotificationFrequency     *uint32                                   `protobuf:"varint,180,opt,name=friend_event_notification_frequency,json=friendEventNotificationFrequency" json:"friend_event_notification_frequency,omitempty"`
	TradeRequestReceptionType            *uint32                                   `protobuf:"varint,181,opt,name=trade_request_reception_type,json=tradeRequestReceptionType" json:"trade_request_reception_type,omitempty"`
	HeadBobScale                         *float32                                  `protobuf:"fixed32,182,opt,name=head_bob_scale,json=headBobScale" json:"head_bob_scale,omitempty"`
	HasSeenFirstBoot                     *bool                                     `protobuf:"varint,184,opt,name=has_seen_first_boot,json=hasSeenFirstBoot" json:"has_seen_first_boot,omitempty"`
	SubsCcSize                           *float32                                  `protobuf:"fixed32,189,opt,name=subs_cc_size,json=subsCcSize" json:"subs_cc_size,omitempty"`
	CcSubsBackgroundOpacity              *float32                                  `protobuf:"fixed32,190,opt,name=cc_subs_background_opacity,json=ccSubsBackgroundOpacity" json:"cc_subs_background_opacity,omitempty"`
	WalkingButtonScheme                  *uint32                                   `protobuf:"varint,191,opt,name=walking_button_scheme,json=walkingButtonScheme" json:"walking_button_scheme,omitempty"`
	DrivingButtonScheme                  *uint32                                   `protobuf:"varint,192,opt,name=driving_button_scheme,json=drivingButtonScheme" json:"driving_button_scheme,omitempty"`
	GlyphMode                            *uint32                                   `protobuf:"varint,193,opt,name=glyph_mode,json=glyphMode" json:"glyph_mode,omitempty"`
	Use_MPH                              *bool                                     `protobuf:"varint,194,opt,name=use_MPH,json=useMPH" json:"use_MPH,omitempty"`
	RegisteredDownloadableEntitlements   []*RegisteredDownloadableEntitlements     `protobuf:"bytes,195,rep,name=registered_downloadable_entitlements,json=registeredDownloadableEntitlements" json:"registered_downloadable_entitlements,omitempty"`
	SeenNewsItems                        []string                                  `protobuf:"bytes,196,rep,name=seen_news_items,json=seenNewsItems" json:"seen_news_items,omitempty"`
	AutoCenteringEnabled                 *bool                                     `protobuf:"varint,197,opt,name=auto_centering_enabled,json=autoCenteringEnabled" json:"auto_centering_enabled,omitempty"`
	IncreasedChanceForSubscribers        *bool                                     `protobuf:"varint,198,opt,name=increased_chance_for_subscribers,json=increasedChanceForSubscribers" json:"increased_chance_for_subscribers,omitempty"`
	RareChestEventEnabled                *bool                                     `protobuf:"varint,199,opt,name=rare_chest_event_enabled,json=rareChestEventEnabled" json:"rare_chest_event_enabled,omitempty"`
	BadassEventEnabled                   *bool                                     `protobuf:"varint,200,opt,name=badass_event_enabled,json=badassEventEnabled" json:"badass_event_enabled,omitempty"`
	PinataEventEnabled                   *bool                                     `protobuf:"varint,201,opt,name=pinata_event_enabled,json=pinataEventEnabled" json:"pinata_event_enabled,omitempty"`
	MinTimeBetweenBadassEvents           *int32                                    `protobuf:"varint,202,opt,name=min_time_between_badass_events,json=minTimeBetweenBadassEvents" json:"min_time_between_badass_events,omitempty"`
	HudScaleMultiplier                   *float32                                  `protobuf:"fixed32,203,opt,name=hud_scale_multiplier,json=hudScaleMultiplier" json:"hud_scale_multiplier,omitempty"`
	DisableSpatialAudio                  *bool                                     `protobuf:"varint,204,opt,name=disable_spatial_audio,json=disableSpatialAudio" json:"disable_spatial_audio,omitempty"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{16}
}

func (x *Profile) GetEnableAimAssist() bool {
	if x != nil && x.EnableAimAssist != nil {
		return *x.EnableAimAssist
	}
	return false
}

func (x *Profile) GetGamepadInvertLook() bool {
	if x != nil && x.GamepadInvertLook != nil {
		return *x.GamepadInvertLook
	}
	return false
}

func (x *Profile) GetGamepadInvertTurn() bool {
	if x != nil && x.GamepadInvertTurn != nil {
		return *x.GamepadInvertTurn
	}
	return false
}

func (x *Profile) GetGamepadInvertMove() bool {
	if x != nil && x.GamepadInvertMove != nil {
		return *x.GamepadInvertMove
	}
	return false
}

func (x *Profile) GetGamepadInvertStrafe() bool {
	if x != nil && x.GamepadInvertStrafe != nil {
		return *x.GamepadInvertStrafe
	}
	return false
}

func (x *Profile) GetEnableVibration() bool {
	if x != nil && x.EnableVibration != nil {
		return *x.EnableVibration
	}
	return false
}

func (x *Profile) GetInvertMousePitch() bool {
	if x != nil && x.InvertMousePitch != nil {
		return *x.InvertMousePitch
	}
	return false
}

func (x *Profile) GetEnableMouseSmoothing() bool {
	if x != nil && x.EnableMouseSmoothing != nil {
		return *x.EnableMouseSmoothing
	}
	return false
}

func (x *Profile) GetMouseScale() float32 {
	if x != nil && x.MouseScale != nil {
		return *x.MouseScale
	}
	return 0
}

func (x *Profile) GetShowDamageNumbers() bool {
	if x != nil && x.ShowDamageNumbers != nil {
		return *x.ShowDamageNumbers
	}
	return false
}

func (x *Profile) GetShowDamageNumberIcons() bool {
	if x != nil && x.ShowDamageNumberIcons != nil {
		return *x.ShowDamageNumberIcons
	}
	return false
}

func (x *Profile) GetEnableTrainingMessages() bool {
	if x != nil && x.EnableTrainingMessages != nil {
		return *x.EnableTrainingMessages
	}
	return false
}

func (x *Profile) GetShowTextChat() bool {
	if x != nil && x.ShowTextChat != nil {
		return *x.ShowTextChat
	}
	return false
}

func (x *Profile) GetCenterCrosshair() bool {
	if x != nil && x.CenterCrosshair != nil {
		return *x.CenterCrosshair
	}
	return false
}

func (x *Profile) GetToggleSprint() bool {
	if x != nil && x.ToggleSprint != nil {
		return *x.ToggleSprint
	}
	return false
}

func (x *Profile) GetToggleCrouch() bool {
	if x != nil && x.ToggleCrouch != nil {
		return *x.ToggleCrouch
	}
	return false
}

func (x *Profile) GetCensorContent() bool {
	if x != nil && x.CensorContent != nil {
		return *x.CensorContent
	}
	return false
}

func (x *Profile) GetMusicVolume() float32 {
	if x != nil && x.MusicVolume != nil {
		return *x.MusicVolume
	}
	return 0
}

func (x *Profile) GetSoundEffectsVolume() float32 {
	if x != nil && x.SoundEffectsVolume != nil {
		return *x.SoundEffectsVolume
	}
	return 0
}

func (x *Profile) GetVoVolume() float32 {
	if x != nil && x.VoVolume != nil {
		return *x.VoVolume
	}
	return 0
}

func (x *Profile) GetVoiceVolume() float32 {
	if x != nil && x.VoiceVolume != nil {
		return *x.VoiceVolume
	}
	return 0
}

func (x *Profile) GetEnableOptionalVo() bool {
	if x != nil && x.EnableOptionalVo != nil {
		return *x.EnableOptionalVo
	}
	return false
}

func (x *Profile) GetPushToTalk() bool {
	if x != nil && x.PushToTalk != nil {
		return *x.PushToTalk
	}
	return false
}

func (x *Profile) GetEnableControllerAudio() bool {
	if x != nil && x.EnableControllerAudio != nil {
		return *x.EnableControllerAudio
	}
	return false
}

func (x *Profile) GetSpeakerAngleFront() float32 {
	if x != nil && x.SpeakerAngleFront != nil {
		return *x.SpeakerAngleFront
	}
	return 0
}

func (x *Profile) GetSpeakerAngleSide() float32 {
	if x != nil && x.SpeakerAngleSide != nil {
		return *x.SpeakerAngleSide
	}
	return 0
}

func (x *Profile) GetSpeakerAngleBack() float32 {
	if x != nil && x.SpeakerAngleBack != nil {
		return *x.SpeakerAngleBack
	}
	return 0
}

func (x *Profile) GetSpeakerSetup() uint32 {
	if x != nil && x.SpeakerSetup != nil {
		return *x.SpeakerSetup
	}
	return 0
}

func (x *Profile) GetMuteAudioOnFocusLoss() bool {
	if x != nil && x.MuteAudioOnFocusLoss != nil {
		return *x.MuteAudioOnFocusLoss
	}
	return false
}

func (x *Profile) GetHideStrictNatHelpDialog() bool {
	if x != nil && x.HideStrictNatHelpDialog != nil {
		return *x.HideStrictNatHelpDialog
	}
	return false
}

func (x *Profile) GetPlayerInputBindings() *PlayerInputBindings {
	if x != nil {
		return x.PlayerInputBindings
	}
	return nil
}

func (x *Profile) GetNewsHashes() []uint32 {
	if x != nil {
		return x.NewsHashes
	}
	return nil
}

func (x *Profile) GetLastUsedSavegameId() uint32 {
	if x != nil && x.LastUsedSavegameId != nil {
		return *x.LastUsedSavegameId
	}
	return 0
}

func (x *Profile) GetGamepadHipSensitivityLevel() int32 {
	if x != nil && x.GamepadHipSensitivityLevel != nil {
		return *x.GamepadHipSensitivityLevel
	}
	return 0
}

func (x *Profile) GetGamepadZoomedSensitivityLevel() int32 {
	if x != nil && x.GamepadZoomedSensitivityLevel != nil {
		return *x.GamepadZoomedSensitivityLevel
	}
	return 0
}

func (x *Profile) GetGamepadVehicleSensitivityLevel() int32 {
	if x != nil && x.GamepadVehicleSensitivityLevel != nil {
		return *x.GamepadVehicleSensitivityLevel
	}
	return 0
}

func (x *Profile) GetGamepadMovementDeadZoneX() float32 {
	if x != nil && x.GamepadMovementDeadZoneX != nil {
		return *x.GamepadMovementDeadZoneX
	}
	return 0
}

func (x *Profile) GetGamepadMovementDeadZoneY() float32 {
	if x != nil && x.GamepadMovementDeadZoneY != nil {
		return *x.GamepadMovementDeadZoneY
	}
	return 0
}

func (x *Profile) GetGamepadLookDeadZoneInnerX() float32 {
	if x != nil && x.GamepadLookDeadZoneInnerX != nil {
		return *x.GamepadLookDeadZoneInnerX
	}
	return 0
}

func (x *Profile) GetGamepadLookDeadZoneOuterX() float32 {
	if x != nil && x.GamepadLookDeadZoneOuterX != nil {
		return *x.GamepadLookDeadZoneOuterX
	}
	return 0
}

func (x *Profile) GetGamepadLookDeadZoneInnerY() float32 {
	if x != nil && x.GamepadLookDeadZoneInnerY != nil {
		return *x.GamepadLookDeadZoneInnerY
	}
	return 0
}

func (x *Profile) GetGamepadLookDeadZoneOuterY() float32 {
	if x != nil && x.GamepadLookDeadZoneOuterY != nil {
		return *x.GamepadLookDeadZoneOuterY
	}
	return 0
}

func (x *Profile) GetGamepadVehicleMovementDeadZoneX() float32 {
	if x != nil && x.GamepadVehicleMovementDeadZoneX != nil {
		return *x.GamepadVehicleMovementDeadZoneX
	}
	return 0
}

func (x *Profile) GetGamepadVehicleMovementDeadZoneY() float32 {
	if x != nil && x.GamepadVehicleMovementDeadZoneY != nil {
		return *x.GamepadVehicleMovementDeadZoneY
	}
	return 0
}

func (x *Profile) GetGamepadVehicleLookDeadZoneInnerX() float32 {
	if x != nil && x.GamepadVehicleLookDeadZoneInnerX != nil {
		return *x.GamepadVehicleLookDeadZoneInnerX
	}
	return 0
}

func (x *Profile) GetGamepadVehicleLookDeadZoneOuterX() float32 {
	if x != nil && x.GamepadVehicleLookDeadZoneOuterX != nil {
		return *x.GamepadVehicleLookDeadZoneOuterX
	}
	return 0
}

func (x *Profile) GetGamepadVehicleLookDeadZoneInnerY() float32 {
	if x != nil && x.GamepadVehicleLookDeadZoneInnerY != nil {
		return *x.GamepadVehicleLookDeadZoneInnerY
	}
	return 0
}

func (x *Profile) GetGamepadVehicleLookDeadZoneOuterY() float32 {
	if x != nil && x.GamepadVehicleLookDeadZoneOuterY != nil {
		return *x.GamepadVehicleLookDeadZoneOuterY
	}
	return 0
}

func (x *Profile) GetGamepadLeftDeadZoneInner() float32 {
	if x != nil && x.GamepadLeftDeadZoneInner != nil {
		return *x.GamepadLeftDeadZoneInner
	}
	return 0
}

func (x *Profile) GetGamepadLeftDeadZoneOuter() float32 {
	if x != nil && x.GamepadLeftDeadZoneOuter != nil {
		return *x.GamepadLeftDeadZoneOuter
	}
	return 0
}

func (x *Profile) GetGamepadRightDeadZoneInner() float32 {
	if x != nil && x.GamepadRightDeadZoneInner != nil {
		return *x.GamepadRightDeadZoneInner
	}
	return 0
}

func (x *Profile) GetGamepadRightDeadZoneOuter() float32 {
	if x != nil && x.GamepadRightDeadZoneOuter != nil {
		return *x.GamepadRightDeadZoneOuter
	}
	return 0
}

func (x *Profile) GetGamepadLookAxialDeadZoneScale() float32 {
	if x != nil && x.GamepadLookAxialDeadZoneScale != nil {
		return *x.GamepadLookAxialDeadZoneScale
	}
	return 0
}

func (x *Profile) GetGamepadMoveAxialDeadZoneScale() float32 {
	if x != nil && x.GamepadMoveAxialDeadZoneScale != nil {
		return *x.GamepadMoveAxialDeadZoneScale
	}
	return 0
}

func (x *Profile) GetGamepadUseAdvancedHipAimSettings() bool {
	if x != nil && x.GamepadUseAdvancedHipAimSettings != nil {
		return *x.GamepadUseAdvancedHipAimSettings
	}
	return false
}

func (x *Profile) GetGamepadUseAdvancedZoomedAimSettings() bool {
	if x != nil && x.GamepadUseAdvancedZoomedAimSettings != nil {
		return *x.GamepadUseAdvancedZoomedAimSettings
	}
	return false
}

func (x *Profile) GetGamepadUseAdvancedVehicleAimSettings() bool {
	if x != nil && x.GamepadUseAdvancedVehicleAimSettings != nil {
		return *x.GamepadUseAdvancedVehicleAimSettings
	}
	return false
}

func (x *Profile) GetGamepadHipYawRate() float32 {
	if x != nil && x.GamepadHipYawRate != nil {
		return *x.GamepadHipYawRate
	}
	return 0
}

func (x *Profile) GetGamepadHipPitchRate() float32 {
	if x != nil && x.GamepadHipPitchRate != nil {
		return *x.GamepadHipPitchRate
	}
	return 0
}

func (x *Profile) GetGamepadHipExtraYaw() float32 {
	if x != nil && x.GamepadHipExtraYaw != nil {
		return *x.GamepadHipExtraYaw
	}
	return 0
}

func (x *Profile) GetGamepadHipExtraPitch() float32 {
	if x != nil && x.GamepadHipExtraPitch != nil {
		return *x.GamepadHipExtraPitch
	}
	return 0
}

func (x *Profile) GetGamepadHipRampUpTime() float32 {
	if x != nil && x.GamepadHipRampUpTime != nil {
		return *x.GamepadHipRampUpTime
	}
	return 0
}

func (x *Profile) GetGamepadHipRampUpDelay() float32 {
	if x != nil && x.GamepadHipRampUpDelay != nil {
		return *x.GamepadHipRampUpDelay
	}
	return 0
}

func (x *Profile) GetGamepadZoomedYawRate() float32 {
	if x != nil && x.GamepadZoomedYawRate != nil {
		return *x.GamepadZoomedYawRate
	}
	return 0
}

func (x *Profile) GetGamepadZoomedPitchRate() float32 {
	if x != nil && x.GamepadZoomedPitchRate != nil {
		return *x.GamepadZoomedPitchRate
	}
	return 0
}

func (x *Profile) GetGamepadZoomedExtraYaw() float32 {
	if x != nil && x.GamepadZoomedExtraYaw != nil {
		return *x.GamepadZoomedExtraYaw
	}
	return 0
}

func (x *Profile) GetGamepadZoomedExtraPitch() float32 {
	if x != nil && x.GamepadZoomedExtraPitch != nil {
		return *x.GamepadZoomedExtraPitch
	}
	return 0
}

func (x *Profile) GetGamepadZoomedRampUpTime() float32 {
	if x != nil && x.GamepadZoomedRampUpTime != nil {
		return *x.GamepadZoomedRampUpTime
	}
	return 0
}

func (x *Profile) GetGamepadZoomedRampUpDelay() float32 {
	if x != nil && x.GamepadZoomedRampUpDelay != nil {
		return *x.GamepadZoomedRampUpDelay
	}
	return 0
}

func (x *Profile) GetGamepadVehicleYawRate() float32 {
	if x != nil && x.GamepadVehicleYawRate != nil {
		return *x.GamepadVehicleYawRate
	}
	return 0
}

func (x *Profile) GetGamepadVehiclePitchRate() float32 {
	if x != nil && x.GamepadVehiclePitchRate != nil {
		return *x.GamepadVehiclePitchRate
	}
	return 0
}

func (x *Profile) GetGamepadVehicleExtraYaw() float32 {
	if x != nil && x.GamepadVehicleExtraYaw != nil {
		return *x.GamepadVehicleExtraYaw
	}
	return 0
}

func (x *Profile) GetGamepadVehicleExtraPitch() float32 {
	if x != nil && x.GamepadVehicleExtraPitch != nil {
		return *x.GamepadVehicleExtraPitch
	}
	return 0
}

func (x *Profile) GetGamepadVehicleRampUpTime() float32 {
	if x != nil && x.GamepadVehicleRampUpTime != nil {
		return *x.GamepadVehicleRampUpTime
	}
	return 0
}

func (x *Profile) GetGamepadVehicleRampUpDelay() float32 {
	if x != nil && x.GamepadVehicleRampUpDelay != nil {
		return *x.GamepadVehicleRampUpDelay
	}
	return 0
}

func (x *Profile) GetIronsightAimAssist() bool {
	if x != nil && x.IronsightAimAssist != nil {
		return *x.IronsightAimAssist
	}
	return false
}

func (x *Profile) GetWalkingJoystickScheme() uint32 {
	if x != nil && x.WalkingJoystickScheme != nil {
		return *x.WalkingJoystickScheme
	}
	return 0
}

func (x *Profile) GetDrivingJoystickScheme() uint32 {
	if x != nil && x.DrivingJoystickScheme != nil {
		return *x.DrivingJoystickScheme
	}
	return 0
}

func (x *Profile) GetMouseAdsScale() float32 {
	if x != nil && x.MouseAdsScale != nil {
		return *x.MouseAdsScale
	}
	return 0
}

func (x *Profile) GetMouseVehicleScale() float32 {
	if x != nil && x.MouseVehicleScale != nil {
		return *x.MouseVehicleScale
	}
	return 0
}

func (x *Profile) GetMouseIronsightAimAssist() bool {
	if x != nil && x.MouseIronsightAimAssist != nil {
		return *x.MouseIronsightAimAssist
	}
	return false
}

func (x *Profile) GetVehicleInputMode() uint32 {
	if x != nil && x.VehicleInputMode != nil {
		return *x.VehicleInputMode
	}
	return 0
}

func (x *Profile) GetWeaponAimToggle() bool {
	if x != nil && x.WeaponAimToggle != nil {
		return *x.WeaponAimToggle
	}
	return false
}

func (x *Profile) GetMantleRequiresButton() bool {
	if x != nil && x.MantleRequiresButton != nil {
		return *x.MantleRequiresButton
	}
	return false
}

func (x *Profile) GetFixedMinimapRotation() bool {
	if x != nil && x.FixedMinimapRotation != nil {
		return *x.FixedMinimapRotation
	}
	return false
}

func (x *Profile) GetMapInvertPitch() bool {
	if x != nil && x.MapInvertPitch != nil {
		return *x.MapInvertPitch
	}
	return false
}

func (x *Profile) GetMapInvertYaw() bool {
	if x != nil && x.MapInvertYaw != nil {
		return *x.MapInvertYaw
	}
	return false
}

func (x *Profile) GetDifficulty() uint32 {
	if x != nil && x.Difficulty != nil {
		return *x.Difficulty
	}
	return 0
}

func (x *Profile) GetSwapDualWieldControls() bool {
	if x != nil && x.SwapDualWieldControls != nil {
		return *x.SwapDualWieldControls
	}
	return false
}

func (x *Profile) GetBaseFov() float32 {
	if x != nil && x.BaseFov != nil {
		return *x.BaseFov
	}
	return 0
}

func (x *Profile) GetCrosshairNeutralColorFrame() uint32 {
	if x != nil && x.CrosshairNeutralColorFrame != nil {
		return *x.CrosshairNeutralColorFrame
	}
	return 0
}

func (x *Profile) GetCrosshairEnemyColorFrame() uint32 {
	if x != nil && x.CrosshairEnemyColorFrame != nil {
		return *x.CrosshairEnemyColorFrame
	}
	return 0
}

func (x *Profile) GetCrosshairAllyColorFrame() uint32 {
	if x != nil && x.CrosshairAllyColorFrame != nil {
		return *x.CrosshairAllyColorFrame
	}
	return 0
}

func (x *Profile) GetEnableSubtitles() bool {
	if x != nil && x.EnableSubtitles != nil {
		return *x.EnableSubtitles
	}
	return false
}

func (x *Profile) GetEnableClosedCaptions() bool {
	if x != nil && x.EnableClosedCaptions != nil {
		return *x.EnableClosedCaptions
	}
	return false
}

func (x *Profile) GetLastStatusMenuPage() string {
	if x != nil && x.LastStatusMenuPage != nil {
		return *x.LastStatusMenuPage
	}
	return ""
}

func (x *Profile) GetInventoryScreenLastFilter() []*OakProfileLastInventoryFilterInfo {
	if x != nil {
		return x.InventoryScreenLastFilter
	}
	return nil
}

func (x *Profile) GetTutorialInfo() *OakProfileMenuTutorialInfo {
	if x != nil {
		return x.TutorialInfo
	}
	return nil
}

func (x *Profile) GetDefaultNetworkType() uint32 {
	if x != nil && x.DefaultNetworkType != nil {
		return *x.DefaultNetworkType
	}
	return 0
}

func (x *Profile) GetDefaultInviteType() uint32 {
	if x != nil && x.DefaultInviteType != nil {
		return *x.DefaultInviteType
	}
	return 0
}

func (x *Profile) GetMatchmakingRegion() string {
	if x != nil && x.MatchmakingRegion != nil {
		return *x.MatchmakingRegion
	}
	return ""
}

func (x *Profile) GetStreamingService() uint32 {
	if x != nil && x.StreamingService != nil {
		return *x.StreamingService
	}
	return 0
}

func (x *Profile) GetMaxCachedFriendEvents() int32 {
	if x != nil && x.MaxCachedFriendEvents != nil {
		return *x.MaxCachedFriendEvents
	}
	return 0
}

func (x *Profile) GetMaxCachedFriendStatuses() int32 {
	if x != nil && x.MaxCachedFriendStatuses != nil {
		return *x.MaxCachedFriendStatuses
	}
	return 0
}

func (x *Profile) GetFriendEvents() []string {
	if x != nil {
		return x.FriendEvents
	}
	return nil
}

func (x *Profile) GetFriendStatuses() []string {
	if x != nil {
		return x.FriendStatuses
	}
	return nil
}

func (x *Profile) GetLastWhisperFetchEventsTime() int64 {
	if x != nil && x.LastWhisperFetchEventsTime != nil {
		return *x.LastWhisperFetchEventsTime
	}
	return 0
}

func (x *Profile) GetLastWhisperFetchStatusesTime() int64 {
	if x != nil && x.LastWhisperFetchStatusesTime != nil {
		return *x.LastWhisperFetchStatusesTime
	}
	return 0
}

func (x *Profile) GetRecentlyMetPlayers() []string {
	if x != nil {
		return x.RecentlyMetPlayers
	}
	return nil
}

func (x *Profile) GetFriendEncounters() []*Profile_FriendEncountersEntry {
	if x != nil {
		return x.FriendEncounters
	}
	return nil
}

func (x *Profile) GetMaxFriendEncounterSize() int32 {
	if x != nil && x.MaxFriendEncounterSize != nil {
		return *x.MaxFriendEncounterSize
	}
	return 0
}

func (x *Profile) GetProfileStatsData() []*GameStatSaveGameData {
	if x != nil {
		return x.ProfileStatsData
	}
	return nil
}

func (x *Profile) GetBankInventoryCategoryList() []*InventoryCategorySaveData {
	if x != nil {
		return x.BankInventoryCategoryList
	}
	return nil
}

func (x *Profile) GetBankInventoryList() [][]byte {
	if x != nil {
		return x.BankInventoryList
	}
	return nil
}

func (x *Profile) GetLostLootInventoryList() [][]byte {
	if x != nil {
		return x.LostLootInventoryList
	}
	return nil
}

func (x *Profile) GetNpcMailItems() []*OakMailItem {
	if x != nil {
		return x.NpcMailItems
	}
	return nil
}

func (x *Profile) GetMailGuids() []string {
	if x != nil {
		return x.MailGuids
	}
	return nil
}

func (x *Profile) GetUnreadMailGuids() []string {
	if x != nil {
		return x.UnreadMailGuids
	}
	return nil
}

func (x *Profile) GetGearSoldByFriends() []*GearSoldByFriendData {
	if x != nil {
		return x.GearSoldByFriends
	}
	return nil
}

func (x *Profile) GetProfileSduList() []*OakSDUSaveGameData {
	if x != nil {
		return x.ProfileSduList
	}
	return nil
}

func (x *Profile) GetUnlockedCustomizations() []*OakCustomizationSaveGameData {
	if x != nil {
		return x.UnlockedCustomizations
	}
	return nil
}

func (x *Profile) GetUnlockedInventoryCustomizationParts() []*OakInventoryCustomizationPartInfo {
	if x != nil {
		return x.UnlockedInventoryCustomizationParts
	}
	return nil
}

func (x *Profile) GetGuardianRank() *GuardianRankProfileData {
	if x != nil {
		return x.GuardianRank
	}
	return nil
}

func (x *Profile) GetUnlockedCrewQuartersDecorations() []*CrewQuartersDecorationItemSaveGameData {
	if x != nil {
		return x.UnlockedCrewQuartersDecorations
	}
	return nil
}

func (x *Profile) GetUnlockedCrewQuartersRooms() []*CrewQuartersRoomItemSaveGameData {
	if x != nil {
		return x.UnlockedCrewQuartersRooms
	}
	return nil
}

func (x *Profile) GetEnableMouseAcceleration() bool {
	if x != nil && x.EnableMouseAcceleration != nil {
		return *x.EnableMouseAcceleration
	}
	return false
}

func (x *Profile) GetEnableGamepadInput() bool {
	if x != nil && x.EnableGamepadInput != nil {
		return *x.EnableGamepadInput
	}
	return false
}

func (x *Profile) GetUseClassicGamepadInput() bool {
	if x != nil && x.UseClassicGamepadInput != nil {
		return *x.UseClassicGamepadInput
	}
	return false
}

func (x *Profile) GetMasterVolume() float32 {
	if x != nil && x.MasterVolume != nil {
		return *x.MasterVolume
	}
	return 0
}

func (x *Profile) GetMonitorDisplayType() uint32 {
	if x != nil && x.MonitorDisplayType != nil {
		return *x.MonitorDisplayType
	}
	return 0
}

func (x *Profile) GetGraphicsMode() uint32 {
	if x != nil && x.GraphicsMode != nil {
		return *x.GraphicsMode
	}
	return 0
}

func (x *Profile) GetFrameRateLimit() uint32 {
	if x != nil && x.FrameRateLimit != nil {
		return *x.FrameRateLimit
	}
	return 0
}

func (x *Profile) GetBaseVehicleFov() float32 {
	if x != nil && x.BaseVehicleFov != nil {
		return *x.BaseVehicleFov
	}
	return 0
}

func (x *Profile) GetGraphicsQuality() uint32 {
	if x != nil && x.GraphicsQuality != nil {
		return *x.GraphicsQuality
	}
	return 0
}

func (x *Profile) GetAnisotropicFiltering() uint32 {
	if x != nil && x.AnisotropicFiltering != nil {
		return *x.AnisotropicFiltering
	}
	return 0
}

func (x *Profile) GetShadowQuality() uint32 {
	if x != nil && x.ShadowQuality != nil {
		return *x.ShadowQuality
	}
	return 0
}

func (x *Profile) GetDisplayPerformanceStats() uint32 {
	if x != nil && x.DisplayPerformanceStats != nil {
		return *x.DisplayPerformanceStats
	}
	return 0
}

func (x *Profile) GetTextureDetail() uint32 {
	if x != nil && x.TextureDetail != nil {
		return *x.TextureDetail
	}
	return 0
}

func (x *Profile) GetDrawDistance() uint32 {
	if x != nil && x.DrawDistance != nil {
		return *x.DrawDistance
	}
	return 0
}

func (x *Profile) GetClutter() uint32 {
	if x != nil && x.Clutter != nil {
		return *x.Clutter
	}
	return 0
}

func (x *Profile) GetTessellation() uint32 {
	if x != nil && x.Tessellation != nil {
		return *x.Tessellation
	}
	return 0
}

func (x *Profile) GetFoliage() uint32 {
	if x != nil && x.Foliage != nil {
		return *x.Foliage
	}
	return 0
}

func (x *Profile) GetFoliageShadows() bool {
	if x != nil && x.FoliageShadows != nil {
		return *x.FoliageShadows
	}
	return false
}

func (x *Profile) GetPlanarReflections() bool {
	if x != nil && x.PlanarReflections != nil {
		return *x.PlanarReflections
	}
	return false
}

func (x *Profile) GetVolumetricFog() uint32 {
	if x != nil && x.VolumetricFog != nil {
		return *x.VolumetricFog
	}
	return 0
}

func (x *Profile) GetScreenSpaceReflections() uint32 {
	if x != nil && x.ScreenSpaceReflections != nil {
		return *x.ScreenSpaceReflections
	}
	return 0
}

func (x *Profile) GetCharacterTextureDetail() uint32 {
	if x != nil && x.CharacterTextureDetail != nil {
		return *x.CharacterTextureDetail
	}
	return 0
}

func (x *Profile) GetCharacterDetail() uint32 {
	if x != nil && x.CharacterDetail != nil {
		return *x.CharacterDetail
	}
	return 0
}

func (x *Profile) GetAmbientOcclusionQuality() uint32 {
	if x != nil && x.AmbientOcclusionQuality != nil {
		return *x.AmbientOcclusionQuality
	}
	return 0
}

func (x *Profile) GetObjectMotionBlur() bool {
	if x != nil && x.ObjectMotionBlur != nil {
		return *x.ObjectMotionBlur
	}
	return false
}

func (x *Profile) GetLensFlare() bool {
	if x != nil && x.LensFlare != nil {
		return *x.LensFlare
	}
	return false
}

func (x *Profile) GetCombatNumberLongFormat() bool {
	if x != nil && x.CombatNumberLongFormat != nil {
		return *x.CombatNumberLongFormat
	}
	return false
}

func (x *Profile) GetShowMinimapLegendaries() bool {
	if x != nil && x.ShowMinimapLegendaries != nil {
		return *x.ShowMinimapLegendaries
	}
	return false
}

func (x *Profile) GetUsePlayerCallouts() bool {
	if x != nil && x.UsePlayerCallouts != nil {
		return *x.UsePlayerCallouts
	}
	return false
}

func (x *Profile) GetFriendEventNotificationLifetime() uint32 {
	if x != nil && x.FriendEventNotificationLifetime != nil {
		return *x.FriendEventNotificationLifetime
	}
	return 0
}

func (x *Profile) GetFriendEventNotificationFrequency() uint32 {
	if x != nil && x.FriendEventNotificationFrequency != nil {
		return *x.FriendEventNotificationFrequency
	}
	return 0
}

func (x *Profile) GetTradeRequestReceptionType() uint32 {
	if x != nil && x.TradeRequestReceptionType != nil {
		return *x.TradeRequestReceptionType
	}
	return 0
}

func (x *Profile) GetHeadBobScale() float32 {
	if x != nil && x.HeadBobScale != nil {
		return *x.HeadBobScale
	}
	return 0
}

func (x *Profile) GetHasSeenFirstBoot() bool {
	if x != nil && x.HasSeenFirstBoot != nil {
		return *x.HasSeenFirstBoot
	}
	return false
}

func (x *Profile) GetSubsCcSize() float32 {
	if x != nil && x.SubsCcSize != nil {
		return *x.SubsCcSize
	}
	return 0
}

func (x *Profile) GetCcSubsBackgroundOpacity() float32 {
	if x != nil && x.CcSubsBackgroundOpacity != nil {
		return *x.CcSubsBackgroundOpacity
	}
	return 0
}

func (x *Profile) GetWalkingButtonScheme() uint32 {
	if x != nil && x.WalkingButtonScheme != nil {
		return *x.WalkingButtonScheme
	}
	return 0
}

func (x *Profile) GetDrivingButtonScheme() uint32 {
	if x != nil && x.DrivingButtonScheme != nil {
		return *x.DrivingButtonScheme
	}
	return 0
}

func (x *Profile) GetGlyphMode() uint32 {
	if x != nil && x.GlyphMode != nil {
		return *x.GlyphMode
	}
	return 0
}

func (x *Profile) GetUse_MPH() bool {
	if x != nil && x.Use_MPH != nil {
		return *x.Use_MPH
	}
	return false
}

func (x *Profile) GetRegisteredDownloadableEntitlements() []*RegisteredDownloadableEntitlements {
	if x != nil {
		return x.RegisteredDownloadableEntitlements
	}
	return nil
}

func (x *Profile) GetSeenNewsItems() []string {
	if x != nil {
		return x.SeenNewsItems
	}
	return nil
}

func (x *Profile) GetAutoCenteringEnabled() bool {
	if x != nil && x.AutoCenteringEnabled != nil {
		return *x.AutoCenteringEnabled
	}
	return false
}

func (x *Profile) GetIncreasedChanceForSubscribers() bool {
	if x != nil && x.IncreasedChanceForSubscribers != nil {
		return *x.IncreasedChanceForSubscribers
	}
	return false
}

func (x *Profile) GetRareChestEventEnabled() bool {
	if x != nil && x.RareChestEventEnabled != nil {
		return *x.RareChestEventEnabled
	}
	return false
}

func (x *Profile) GetBadassEventEnabled() bool {
	if x != nil && x.BadassEventEnabled != nil {
		return *x.BadassEventEnabled
	}
	return false
}

func (x *Profile) GetPinataEventEnabled() bool {
	if x != nil && x.PinataEventEnabled != nil {
		return *x.PinataEventEnabled
	}
	return false
}

func (x *Profile) GetMinTimeBetweenBadassEvents() int32 {
	if x != nil && x.MinTimeBetweenBadassEvents != nil {
		return *x.MinTimeBetweenBadassEvents
	}
	return 0
}

func (x *Profile) GetHudScaleMultiplier() float32 {
	if x != nil && x.HudScaleMultiplier != nil {
		return *x.HudScaleMultiplier
	}
	return 0
}

func (x *Profile) GetDisableSpatialAudio() bool {
	if x != nil && x.DisableSpatialAudio != nil {
		return *x.DisableSpatialAudio
	}
	return false
}

type Profile_FriendEncountersEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string                 `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *OakFriendEncounterData `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *Profile_FriendEncountersEntry) Reset() {
	*x = Profile_FriendEncountersEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile_FriendEncountersEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile_FriendEncountersEntry) ProtoMessage() {}

func (x *Profile_FriendEncountersEntry) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile_FriendEncountersEntry.ProtoReflect.Descriptor instead.
func (*Profile_FriendEncountersEntry) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{16, 0}
}

func (x *Profile_FriendEncountersEntry) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Profile_FriendEncountersEntry) GetValue() *OakFriendEncounterData {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_OakProfile_proto protoreflect.FileDescriptor

var file_OakProfile_proto_rawDesc = []byte{
	0x0a, 0x10, 0x4f, 0x61, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x07, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x1a, 0x0f, 0x4f, 0x61, 0x6b,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x62, 0x0a, 0x19,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x62,
	0x69, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x22, 0x62, 0x0a, 0x1b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x78, 0x69, 0x73, 0x5f, 0x4b, 0x65, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x5f, 0x33, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4f,
	0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x07, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x33, 0x64, 0x22, 0x7d, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x78, 0x69, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x62, 0x69, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76,
	0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x78, 0x69, 0x73, 0x5f, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x22, 0x8b, 0x02, 0x0a, 0x1b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4b, 0x0a,
	0x0f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x0e, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x61, 0x78,
	0x69, 0x73, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x41,
	0x78, 0x69, 0x73, 0x52, 0x0c, 0x61, 0x78, 0x69, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0x5b, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4f,
	0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x71,
	0x0a, 0x21, 0x4f, 0x61, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6c, 0x6f, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0xbf, 0x01, 0x0a, 0x1a, 0x4f, 0x61, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x4d, 0x65, 0x6e, 0x75, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x65, 0x6e, 0x54, 0x75,
	0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x75, 0x74, 0x6f, 0x72,
	0x69, 0x61, 0x6c, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x23, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x6e,
	0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1e, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x49, 0x6e, 0x4e, 0x6f, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0x6f, 0x0a, 0x16, 0x4f, 0x61, 0x6b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a,
	0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x22, 0xec, 0x02, 0x0a, 0x0b, 0x4f, 0x61, 0x6b, 0x4d, 0x61, 0x69, 0x6c,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61,
	0x69, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x65, 0x61, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x65, 0x61, 0x72, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x69, 0x6c, 0x47,
	0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x62, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x42, 0x65, 0x65, 0x6e, 0x52,
	0x65, 0x61, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x61, 0x72, 0x53, 0x6f, 0x6c, 0x64,
	0x42, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12,
	0x67, 0x65, 0x61, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x65, 0x61, 0x72, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x19, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4e, 0x65, 0x74, 0x49, 0x64, 0x22,
	0x6f, 0x0a, 0x1c, 0x4f, 0x61, 0x6b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x22, 0x72, 0x0a, 0x21, 0x4f, 0x61, 0x6b, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x15, 0x0a,
	0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69,
	0x73, 0x4e, 0x65, 0x77, 0x22, 0x69, 0x0a, 0x1e, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e,
	0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68, 0x22,
	0xe6, 0x01, 0x0a, 0x17, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x52, 0x61, 0x6e, 0x6b,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x4f,
	0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x52,
	0x61, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x69, 0x61, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x2f, 0x0a, 0x13, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x69, 0x61, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x7c, 0x0a, 0x26, 0x43, 0x72, 0x65, 0x77,
	0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x3b, 0x0a, 0x1a, 0x64, 0x65, 0x63,
	0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x64,
	0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0x6a, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x77, 0x51, 0x75,
	0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x61,
	0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73,
	0x5f, 0x6e, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x65,
	0x77, 0x12, 0x2f, 0x0a, 0x14, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x22, 0xcc, 0x4e, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x69, 0x6d, 0x5f, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x69, 0x6d, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x61,
	0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x6f,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64,
	0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x61,
	0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x75, 0x72,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64,
	0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x61,
	0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x76,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64,
	0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x67, 0x61,
	0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x61, 0x66, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x67, 0x61, 0x6d, 0x65, 0x70,
	0x61, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x53, 0x74, 0x72, 0x61, 0x66, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x56, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x69, 0x74, 0x63, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x6f, 0x75,
	0x73, 0x65, 0x50, 0x69, 0x74, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x6f, 0x75, 0x73, 0x65, 0x53, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x68, 0x6f,
	0x77, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x37,
	0x0a, 0x18, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x54,
	0x65, 0x78, 0x74, 0x43, 0x68, 0x61, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x68, 0x61, 0x69, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x68, 0x61,
	0x69, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x53, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x5f, 0x63, 0x72, 0x6f, 0x75, 0x63, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x72, 0x6f, 0x75, 0x63, 0x68, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x75, 0x73, 0x69, 0x63,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x76, 0x6f, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74,
	0x6f, 0x5f, 0x74, 0x61, 0x6c, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x75,
	0x73, 0x68, 0x54, 0x6f, 0x54, 0x61, 0x6c, 0x6b, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x12, 0x2e, 0x0a, 0x13, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x67, 0x6c,
	0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6e, 0x74,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x67, 0x6c,
	0x65, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x73, 0x70,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x73, 0x70, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x12, 0x36, 0x0a, 0x18, 0x6d, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x6d, 0x75, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x6e,
	0x46, 0x6f, 0x63, 0x75, 0x73, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x68, 0x69, 0x64,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x74, 0x5f, 0x68, 0x65, 0x6c,
	0x70, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x68, 0x69, 0x64, 0x65, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4e, 0x61, 0x74, 0x48, 0x65, 0x6c,
	0x70, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x50, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x77,
	0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a,
	0x6e, 0x65, 0x77, 0x73, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x64, 0x53, 0x61, 0x76, 0x65, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a,
	0x1d, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x68, 0x69, 0x70, 0x5f, 0x73, 0x65, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x48, 0x69, 0x70,
	0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x47, 0x0a, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6f, 0x6d,
	0x65, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x67, 0x61, 0x6d, 0x65,
	0x70, 0x61, 0x64, 0x5a, 0x6f, 0x6f, 0x6d, 0x65, 0x64, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x49, 0x0a, 0x21, 0x67, 0x61, 0x6d,
	0x65, 0x70, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x1c, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f,
	0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x7a, 0x6f,
	0x6e, 0x65, 0x5f, 0x78, 0x18, 0x29, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x67, 0x61, 0x6d, 0x65,
	0x70, 0x61, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x61, 0x64, 0x5a,
	0x6f, 0x6e, 0x65, 0x58, 0x12, 0x3e, 0x0a, 0x1c, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f,
	0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x7a, 0x6f,
	0x6e, 0x65, 0x5f, 0x79, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x67, 0x61, 0x6d, 0x65,
	0x70, 0x61, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x61, 0x64, 0x5a,
	0x6f, 0x6e, 0x65, 0x59, 0x12, 0x41, 0x0a, 0x1e, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f,
	0x6c, 0x6f, 0x6f, 0x6b, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x78, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x67, 0x61,
	0x6d, 0x65, 0x70, 0x61, 0x64, 0x4c, 0x6f, 0x6f, 0x6b, 0x44, 0x65, 0x61, 0x64, 0x5a, 0x6f, 0x6e,
	0x65, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x58, 0x12, 0x41, 0x0a, 0x1e, 0x67, 0x61, 0x6d, 0x65, 0x70,
	0x61, 0x64, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x78, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x19, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x4c, 0x6f, 0x6f, 0x6b, 0x44, 0x65, 0x61, 0x64,
	0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x58, 0x12, 0x41, 0x0a, 0x1e, 0x67, 0x61,
	0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f,
	0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x79, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x19, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x4c, 0x6f, 0x6f, 0x6b, 0x44,
	0x65, 0x61, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x59, 0x12, 0x41, 0x0a,
	0x1e, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x5f, 0x64, 0x65,
	0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x79, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x4c, 0x6f,
	0x6f, 0x6b, 0x44, 0x65, 0x61, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x59,
	0x12, 0x4d, 0x0a, 0x24, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x61,
	0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x78, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1f,
	0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x61, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x58, 0x12,
	0x4d, 0x0a, 0x24, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x64,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x79, 0x18, 0x30, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1f, 0x67,
	0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x61, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x59, 0x12, 0x50,
	0x0a, 0x26, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x78, 0x18, 0x31, 0x20, 0x01, 0x28, 0x02, 0x52, 0x20,
	0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x6f,
	0x6f, 0x6b, 0x44, 0x65, 0x61, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x58,
	0x12, 0x50, 0x0a, 0x26, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x7a, 0x6f,
	0x6e, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x78, 0x18, 0x32, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x4c, 0x6f, 0x6f, 0x6b, 0x44, 0x65, 0x61, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x75, 0x74, 0x65,
	0x72, 0x58, 0x12, 0x50, 0x0a, 0x26, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f,
	0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x79, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x44, 0x65, 0x61, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x6e,
	0x6e, 0x65, 0x72, 0x59, 0x12, 0x50, 0x0a, 0x26, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f,
	0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x5f, 0x64, 0x65, 0x61,
	0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x79, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x44, 0x65, 0x61, 0x64, 0x5a, 0x6f, 0x6e, 0x65,
	0x4f, 0x75, 0x74, 0x65, 0x72, 0x59, 0x12, 0x3e, 0x0a, 0x1c, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61,
	0x64, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x67, 0x61,
	0x6d, 0x65, 0x70, 0x61, 0x64, 0x4c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x61, 0x64, 0x5a, 0x6f, 0x6e,
	0x65, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x1c, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61,
	0x64, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x36, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x67, 0x61,
	0x6d, 0x65, 0x70, 0x61, 0x64, 0x4c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x61, 0x64, 0x5a, 0x6f, 0x6e,
	0x65, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x1d, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61,
	0x64, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x37, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x67,
	0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x61, 0x64, 0x5a,
	0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x1d, 0x67, 0x61, 0x6d, 0x65,
	0x70, 0x61, 0x64, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x38, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x19, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x61,
	0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x22, 0x67, 0x61,
	0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x5f, 0x61, 0x78, 0x69, 0x61, 0x6c,
	0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x4c,
	0x6f, 0x6f, 0x6b, 0x41, 0x78, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x64, 0x5a, 0x6f, 0x6e, 0x65,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x22, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64,
	0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x78, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x61, 0x64,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x1d, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x41, 0x78,
	0x69, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x12, 0x4f, 0x0a, 0x25, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x5f,
	0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x70, 0x5f, 0x61, 0x69, 0x6d,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x20, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x55, 0x73, 0x65, 0x41, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x48, 0x69, 0x70, 0x41, 0x69, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x55, 0x0a, 0x28, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x75, 0x73, 0x65,
	0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6f, 0x6d, 0x65, 0x64,
	0x5f, 0x61, 0x69, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x23, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x55, 0x73, 0x65, 0x41,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5a, 0x6f, 0x6f, 0x6d, 0x65, 0x64, 0x41, 0x69, 0x6d,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x57, 0x0a, 0x29, 0x67, 0x61, 0x6d, 0x65,
	0x70, 0x61, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64,
	0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x61, 0x69, 0x6d, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x67, 0x61, 0x6d,
	0x65, 0x70, 0x61, 0x64, 0x55, 0x73, 0x65, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x69, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x2f, 0x0a, 0x14, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x68, 0x69, 0x70,
	0x5f, 0x79, 0x61, 0x77, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x11, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x48, 0x69, 0x70, 0x59, 0x61, 0x77, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x68, 0x69,
	0x70, 0x5f, 0x70, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x3f, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x13, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x48, 0x69, 0x70, 0x50, 0x69,
	0x74, 0x63, 0x68, 0x52, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x67, 0x61, 0x6d, 0x65, 0x70,
	0x61, 0x64, 0x5f, 0x68, 0x69, 0x70, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x79, 0x61, 0x77,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x48,
	0x69, 0x70, 0x45, 0x78, 0x74, 0x72, 0x61, 0x59, 0x61, 0x77, 0x12, 0x35, 0x0a, 0x17, 0x67, 0x61,
	0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x68, 0x69, 0x70, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x70, 0x69, 0x74, 0x63, 0x68, 0x18, 0x41, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x67, 0x61, 0x6d,
	0x65, 0x70, 0x61, 0x64, 0x48, 0x69, 0x70, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x69, 0x74, 0x63,
	0x68, 0x12, 0x36, 0x0a, 0x18, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x68, 0x69, 0x70,
	0x5f, 0x72, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x42, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x14, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x48, 0x69, 0x70, 0x52,
	0x61, 0x6d, 0x70, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x67, 0x61, 0x6d,
	0x65, 0x70, 0x61, 0x64, 0x5f, 0x68, 0x69, 0x70, 0x5f, 0x72, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x70,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x43, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x67, 0x61,
	0x6d, 0x65, 0x70, 0x61, 0x64, 0x48, 0x69, 0x70, 0x52, 0x61, 0x6d, 0x70, 0x55, 0x70, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x7a,
	0x6f, 0x6f, 0x6d, 0x65, 0x64, 0x5f, 0x79, 0x61, 0x77, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x44,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5a, 0x6f, 0x6f,
	0x6d, 0x65, 0x64, 0x59, 0x61, 0x77, 0x52, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x67, 0x61,
	0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6f, 0x6d, 0x65, 0x64, 0x5f, 0x70, 0x69, 0x74,
	0x63, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x67,
	0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5a, 0x6f, 0x6f, 0x6d, 0x65, 0x64, 0x50, 0x69, 0x74, 0x63,
	0x68, 0x52, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64,
	0x5f, 0x7a, 0x6f, 0x6f, 0x6d, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x79, 0x61,
	0x77, 0x18, 0x46, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64,
	0x5a, 0x6f, 0x6f, 0x6d, 0x65, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x59, 0x61, 0x77, 0x12, 0x3b,
	0x0a, 0x1a, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6f, 0x6d, 0x65, 0x64,
	0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x69, 0x74, 0x63, 0x68, 0x18, 0x47, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x17, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5a, 0x6f, 0x6f, 0x6d, 0x65,
	0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x69, 0x74, 0x63, 0x68, 0x12, 0x3c, 0x0a, 0x1b, 0x67,
	0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6f, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x61,
	0x6d, 0x70, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x17, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5a, 0x6f, 0x6f, 0x6d, 0x65, 0x64, 0x52,
	0x61, 0x6d, 0x70, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x67, 0x61, 0x6d,
	0x65, 0x70, 0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6f, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x6d, 0x70,
	0x5f, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x49, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x18, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5a, 0x6f, 0x6f, 0x6d, 0x65, 0x64, 0x52, 0x61,
	0x6d, 0x70, 0x55, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x67, 0x61, 0x6d,
	0x65, 0x70, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x79, 0x61, 0x77,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x67, 0x61, 0x6d,
	0x65, 0x70, 0x61, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x59, 0x61, 0x77, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x4b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x69, 0x74, 0x63, 0x68, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x39, 0x0a, 0x19, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x79, 0x61, 0x77, 0x18, 0x4c, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x16, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x59, 0x61, 0x77, 0x12, 0x3d, 0x0a, 0x1b, 0x67, 0x61,
	0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x5f, 0x70, 0x69, 0x74, 0x63, 0x68, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x18, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x50, 0x69, 0x74, 0x63, 0x68, 0x12, 0x3e, 0x0a, 0x1c, 0x67, 0x61, 0x6d,
	0x65, 0x70, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x6d,
	0x70, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x18, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52,
	0x61, 0x6d, 0x70, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x67, 0x61, 0x6d,
	0x65, 0x70, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x6d,
	0x70, 0x5f, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x19, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x52, 0x61, 0x6d, 0x70, 0x55, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x69,
	0x72, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x61, 0x69, 0x6d, 0x5f, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x72, 0x6f, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x41, 0x69, 0x6d, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x17, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67,
	0x5f, 0x6a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x18, 0x52, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x4a,
	0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x73, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x18, 0x53, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x41, 0x64, 0x73,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x54, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x11, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69,
	0x72, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x61, 0x69, 0x6d, 0x5f, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x18, 0x55, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6d, 0x6f, 0x75, 0x73, 0x65,
	0x49, 0x72, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x41, 0x69, 0x6d, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x5f, 0x61, 0x69, 0x6d, 0x5f, 0x74,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x18, 0x57, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x77, 0x65, 0x61,
	0x70, 0x6f, 0x6e, 0x41, 0x69, 0x6d, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x16,
	0x6d, 0x61, 0x6e, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x58, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6d, 0x61,
	0x6e, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x61, 0x70, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x59, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x66, 0x69, 0x78, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x70,
	0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f,
	0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x69, 0x74, 0x63, 0x68, 0x18, 0x5a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x50, 0x69, 0x74,
	0x63, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x5f, 0x79, 0x61, 0x77, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x49,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x59, 0x61, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x77, 0x61, 0x70,
	0x5f, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x73, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x77, 0x61, 0x70,
	0x44, 0x75, 0x61, 0x6c, 0x57, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x6f, 0x76, 0x18, 0x5e, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x46, 0x6f, 0x76, 0x12, 0x41, 0x0a, 0x1d,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x5f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1a, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x68, 0x61, 0x69, 0x72, 0x4e, 0x65,
	0x75, 0x74, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x1b, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x65, 0x6e, 0x65,
	0x6d, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x60,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x68, 0x61, 0x69, 0x72, 0x45,
	0x6e, 0x65, 0x6d, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x1a, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x79,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x61, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x17, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x68, 0x61, 0x69, 0x72, 0x41, 0x6c, 0x6c,
	0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18,
	0x62, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x63, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x15,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x6e, 0x75,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x6e, 0x75, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x6b, 0x0a, 0x1c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e,
	0x4f, 0x61, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0d,
	0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x4f, 0x61,
	0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x54, 0x75, 0x74, 0x6f,
	0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x67,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x68, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x69,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x6a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x6b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3b, 0x0a,
	0x1a, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x6c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x6d, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x18, 0x6e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x20,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x70, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x6c, 0x61, 0x73, 0x74, 0x57, 0x68, 0x69, 0x73,
	0x70, 0x65, 0x72, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79,
	0x5f, 0x6d, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x84, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x4d, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x54, 0x0a, 0x11, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x85, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a,
	0x19, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4c, 0x0a, 0x12, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x87, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x64, 0x0a, 0x1c, 0x62, 0x61, 0x6e, 0x6b, 0x5f,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x88, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x19, 0x62, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a,
	0x13, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x89, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x11, 0x62, 0x61, 0x6e,
	0x6b, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x18, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x8a, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x15, 0x6c, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x6e, 0x70, 0x63, 0x5f,
	0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x8b, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x4f, 0x61, 0x6b, 0x4d,
	0x61, 0x69, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x6e, 0x70, 0x63, 0x4d, 0x61, 0x69, 0x6c,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x67, 0x75,
	0x69, 0x64, 0x73, 0x18, 0x8c, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x69, 0x6c,
	0x47, 0x75, 0x69, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x73, 0x18, 0x8d, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x47, 0x75, 0x69,
	0x64, 0x73, 0x12, 0x4f, 0x0a, 0x14, 0x67, 0x65, 0x61, 0x72, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x5f,
	0x62, 0x79, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x8e, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x47, 0x65, 0x61, 0x72,
	0x53, 0x6f, 0x6c, 0x64, 0x42, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x11, 0x67, 0x65, 0x61, 0x72, 0x53, 0x6f, 0x6c, 0x64, 0x42, 0x79, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x64, 0x75, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x8f, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x44, 0x55, 0x53,
	0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x64, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x17, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x90, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x4f, 0x61, 0x6b, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x16, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x80, 0x01, 0x0a,
	0x26, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x91, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x4f, 0x61, 0x6b, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x23, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12,
	0x46, 0x0a, 0x0d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x92, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76,
	0x65, 0x2e, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x69, 0x61, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x7d, 0x0a, 0x22, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x77, 0x5f, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72,
	0x73, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x93, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x77, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x44, 0x65, 0x63, 0x6f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x1f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x43,
	0x72, 0x65, 0x77, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x44, 0x65, 0x63, 0x6f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6b, 0x0a, 0x1c, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x77, 0x5f, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73,
	0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x94, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x77, 0x51, 0x75, 0x61, 0x72,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x61, 0x76, 0x65,
	0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x19, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x43, 0x72, 0x65, 0x77, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x52, 0x6f,
	0x6f, 0x6d, 0x73, 0x12, 0x3b, 0x0a, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x6f, 0x75, 0x73, 0x65, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x31, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x70,
	0x61, 0x64, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x9a, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x76, 0x18, 0x9d, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x46, 0x6f, 0x76, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73,
	0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x34, 0x0a, 0x15, 0x61, 0x6e, 0x69, 0x73, 0x6f, 0x74, 0x72, 0x6f, 0x70, 0x69, 0x63, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x61, 0x6e, 0x69, 0x73, 0x6f, 0x74, 0x72, 0x6f, 0x70, 0x69, 0x63, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3b,
	0x0a, 0x19, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0xa1, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x17, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74,
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0xa2, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x72, 0x61,
	0x77, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x63, 0x6c, 0x75,
	0x74, 0x74, 0x65, 0x72, 0x18, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6c, 0x75,
	0x74, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x65, 0x73,
	0x73, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x07, 0x66, 0x6f, 0x6c,
	0x69, 0x61, 0x67, 0x65, 0x18, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x6f, 0x6c,
	0x69, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x6f, 0x6c, 0x69, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x18, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x66, 0x6f, 0x6c, 0x69, 0x61, 0x67, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x12, 0x2e,
	0x0a, 0x12, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x6c, 0x61,
	0x6e, 0x61, 0x72, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x66, 0x6f, 0x67,
	0x18, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x46, 0x6f, 0x67, 0x12, 0x39, 0x0a, 0x18, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x39, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0xab, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x54,
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x10,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3b, 0x0a, 0x19, 0x61, 0x6d, 0x62, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x63, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x61, 0x6d,
	0x62, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x63, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x75, 0x72, 0x18, 0xae, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x6c, 0x75, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x6e, 0x73, 0x5f, 0x66, 0x6c, 0x61,
	0x72, 0x65, 0x18, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x65, 0x6e, 0x73, 0x46,
	0x6c, 0x61, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x39, 0x0a, 0x18, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x70,
	0x5f, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0xb1, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x16, 0x73, 0x68, 0x6f, 0x77, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x70,
	0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x75,
	0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75,
	0x74, 0x73, 0x18, 0xb2, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x75, 0x73, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x22,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x23, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x40, 0x0a, 0x1c, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xb5, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x19, 0x74, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x68, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x6f, 0x62, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0xb6,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x42, 0x6f, 0x62, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0xb8, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x68, 0x61, 0x73, 0x53, 0x65, 0x65, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x42,
	0x6f, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x5f, 0x63, 0x63, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x73,
	0x43, 0x63, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x63, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x63, 0x63, 0x53,
	0x75, 0x62, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x15, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0xbf, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x64, 0x72, 0x69,
	0x76, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x18, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x64, 0x72, 0x69, 0x76, 0x69,
	0x6e, 0x67, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xc1, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x4d, 0x50, 0x48, 0x18, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x4d, 0x50, 0x48, 0x12, 0x7e, 0x0a, 0x24, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0xc3, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76,
	0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x22, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x65, 0x6e,
	0x5f, 0x6e, 0x65, 0x77, 0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0xc4, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x65, 0x6e, 0x4e, 0x65, 0x77, 0x73, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xc5, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x20, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x18, 0xc6, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1d, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xc7,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x72, 0x61, 0x72, 0x65, 0x43, 0x68, 0x65, 0x73, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x14,
	0x62, 0x61, 0x64, 0x61, 0x73, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x62, 0x61, 0x64,
	0x61, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x31, 0x0a, 0x14, 0x70, 0x69, 0x6e, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x70, 0x69, 0x6e, 0x61, 0x74, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62,
	0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x62, 0x61, 0x64, 0x61, 0x73, 0x73, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x6d, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x42, 0x61, 0x64, 0x61, 0x73,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x68, 0x75, 0x64, 0x5f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18,
	0xcb, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x68, 0x75, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x15, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x1a,
	0x60, 0x0a, 0x15, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4f, 0x61, 0x6b, 0x53,
	0x61, 0x76, 0x65, 0x2e, 0x4f, 0x61, 0x6b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x66, 0x69, 0x32, 0x30, 0x31, 0x37, 0x2f, 0x62, 0x6c, 0x33, 0x2d, 0x73, 0x61, 0x76, 0x65,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62,
}

var (
	file_OakProfile_proto_rawDescOnce sync.Once
	file_OakProfile_proto_rawDescData = file_OakProfile_proto_rawDesc
)

func file_OakProfile_proto_rawDescGZIP() []byte {
	file_OakProfile_proto_rawDescOnce.Do(func() {
		file_OakProfile_proto_rawDescData = protoimpl.X.CompressGZIP(file_OakProfile_proto_rawDescData)
	})
	return file_OakProfile_proto_rawDescData
}

var file_OakProfile_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_OakProfile_proto_goTypes = []interface{}{
	(*PlayerInputBinding_Button)(nil),              // 0: OakSave.PlayerInputBinding_Button
	(*PlayerInputBinding_Axis_Key)(nil),            // 1: OakSave.PlayerInputBinding_Axis_Key
	(*PlayerInputBinding_Axis)(nil),                // 2: OakSave.PlayerInputBinding_Axis
	(*PlayerInputBinding_Category)(nil),            // 3: OakSave.PlayerInputBinding_Category
	(*PlayerInputBindings)(nil),                    // 4: OakSave.PlayerInputBindings
	(*OakProfileLastInventoryFilterInfo)(nil),      // 5: OakSave.OakProfileLastInventoryFilterInfo
	(*OakProfileMenuTutorialInfo)(nil),             // 6: OakSave.OakProfileMenuTutorialInfo
	(*OakFriendEncounterData)(nil),                 // 7: OakSave.OakFriendEncounterData
	(*OakMailItem)(nil),                            // 8: OakSave.OakMailItem
	(*GearSoldByFriendData)(nil),                   // 9: OakSave.GearSoldByFriendData
	(*OakCustomizationSaveGameData)(nil),           // 10: OakSave.OakCustomizationSaveGameData
	(*OakInventoryCustomizationPartInfo)(nil),      // 11: OakSave.OakInventoryCustomizationPartInfo
	(*GuardianRankRewardSaveGameData)(nil),         // 12: OakSave.GuardianRankRewardSaveGameData
	(*GuardianRankProfileData)(nil),                // 13: OakSave.GuardianRankProfileData
	(*CrewQuartersDecorationItemSaveGameData)(nil), // 14: OakSave.CrewQuartersDecorationItemSaveGameData
	(*CrewQuartersRoomItemSaveGameData)(nil),       // 15: OakSave.CrewQuartersRoomItemSaveGameData
	(*Profile)(nil),                                // 16: OakSave.Profile
	(*Profile_FriendEncountersEntry)(nil),          // 17: OakSave.Profile.FriendEncountersEntry
	(*Vec3)(nil),                                   // 18: OakSave.Vec3
	(*GameStatSaveGameData)(nil),                   // 19: OakSave.GameStatSaveGameData
	(*InventoryCategorySaveData)(nil),              // 20: OakSave.InventoryCategorySaveData
	(*OakSDUSaveGameData)(nil),                     // 21: OakSave.OakSDUSaveGameData
	(*RegisteredDownloadableEntitlements)(nil),     // 22: OakSave.RegisteredDownloadableEntitlements
}
var file_OakProfile_proto_depIdxs = []int32{
	18, // 0: OakSave.PlayerInputBinding_Axis_Key.scale_3d:type_name -> OakSave.Vec3
	1,  // 1: OakSave.PlayerInputBinding_Axis.keys:type_name -> OakSave.PlayerInputBinding_Axis_Key
	0,  // 2: OakSave.PlayerInputBinding_Category.button_bindings:type_name -> OakSave.PlayerInputBinding_Button
	2,  // 3: OakSave.PlayerInputBinding_Category.axis_bindings:type_name -> OakSave.PlayerInputBinding_Axis
	3,  // 4: OakSave.PlayerInputBindings.categories:type_name -> OakSave.PlayerInputBinding_Category
	12, // 5: OakSave.GuardianRankProfileData.rank_rewards:type_name -> OakSave.GuardianRankRewardSaveGameData
	4,  // 6: OakSave.Profile.player_input_bindings:type_name -> OakSave.PlayerInputBindings
	5,  // 7: OakSave.Profile.inventory_screen_last_filter:type_name -> OakSave.OakProfileLastInventoryFilterInfo
	6,  // 8: OakSave.Profile.tutorial_info:type_name -> OakSave.OakProfileMenuTutorialInfo
	17, // 9: OakSave.Profile.friend_encounters:type_name -> OakSave.Profile.FriendEncountersEntry
	19, // 10: OakSave.Profile.profile_stats_data:type_name -> OakSave.GameStatSaveGameData
	20, // 11: OakSave.Profile.bank_inventory_category_list:type_name -> OakSave.InventoryCategorySaveData
	8,  // 12: OakSave.Profile.npc_mail_items:type_name -> OakSave.OakMailItem
	9,  // 13: OakSave.Profile.gear_sold_by_friends:type_name -> OakSave.GearSoldByFriendData
	21, // 14: OakSave.Profile.profile_sdu_list:type_name -> OakSave.OakSDUSaveGameData
	10, // 15: OakSave.Profile.unlocked_customizations:type_name -> OakSave.OakCustomizationSaveGameData
	11, // 16: OakSave.Profile.unlocked_inventory_customization_parts:type_name -> OakSave.OakInventoryCustomizationPartInfo
	13, // 17: OakSave.Profile.guardian_rank:type_name -> OakSave.GuardianRankProfileData
	14, // 18: OakSave.Profile.unlocked_crew_quarters_decorations:type_name -> OakSave.CrewQuartersDecorationItemSaveGameData
	15, // 19: OakSave.Profile.unlocked_crew_quarters_rooms:type_name -> OakSave.CrewQuartersRoomItemSaveGameData
	22, // 20: OakSave.Profile.registered_downloadable_entitlements:type_name -> OakSave.RegisteredDownloadableEntitlements
	7,  // 21: OakSave.Profile.FriendEncountersEntry.value:type_name -> OakSave.OakFriendEncounterData
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_OakProfile_proto_init() }
func file_OakProfile_proto_init() {
	if File_OakProfile_proto != nil {
		return
	}
	file_OakShared_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_OakProfile_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInputBinding_Button); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInputBinding_Axis_Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInputBinding_Axis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInputBinding_Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInputBindings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OakProfileLastInventoryFilterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OakProfileMenuTutorialInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OakFriendEncounterData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OakMailItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearSoldByFriendData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OakCustomizationSaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OakInventoryCustomizationPartInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuardianRankRewardSaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuardianRankProfileData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrewQuartersDecorationItemSaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrewQuartersRoomItemSaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile_FriendEncountersEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_OakProfile_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_OakProfile_proto_goTypes,
		DependencyIndexes: file_OakProfile_proto_depIdxs,
		MessageInfos:      file_OakProfile_proto_msgTypes,
	}.Build()
	File_OakProfile_proto = out.File
	file_OakProfile_proto_rawDesc = nil
	file_OakProfile_proto_goTypes = nil
	file_OakProfile_proto_depIdxs = nil
}
