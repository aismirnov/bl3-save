// Code generated by protoc-gen-go. DO NOT EDIT.
// source: OakProfile.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PlayerInputBinding_Button struct {
	RebindDataPath       *string  `protobuf:"bytes,1,opt,name=rebind_data_path,json=rebindDataPath" json:"rebind_data_path,omitempty"`
	KeyNames             []string `protobuf:"bytes,2,rep,name=key_names,json=keyNames" json:"key_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerInputBinding_Button) Reset()         { *m = PlayerInputBinding_Button{} }
func (m *PlayerInputBinding_Button) String() string { return proto.CompactTextString(m) }
func (*PlayerInputBinding_Button) ProtoMessage()    {}
func (*PlayerInputBinding_Button) Descriptor() ([]byte, []int) {
	return fileDescriptor_08b72a8408a178a8, []int{0}
}

func (m *PlayerInputBinding_Button) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerInputBinding_Button.Unmarshal(m, b)
}
func (m *PlayerInputBinding_Button) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerInputBinding_Button.Marshal(b, m, deterministic)
}
func (m *PlayerInputBinding_Button) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerInputBinding_Button.Merge(m, src)
}
func (m *PlayerInputBinding_Button) XXX_Size() int {
	return xxx_messageInfo_PlayerInputBinding_Button.Size(m)
}
func (m *PlayerInputBinding_Button) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerInputBinding_Button.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerInputBinding_Button proto.InternalMessageInfo

func (m *PlayerInputBinding_Button) GetRebindDataPath() string {
	if m != nil && m.RebindDataPath != nil {
		return *m.RebindDataPath
	}
	return ""
}

func (m *PlayerInputBinding_Button) GetKeyNames() []string {
	if m != nil {
		return m.KeyNames
	}
	return nil
}

type PlayerInputBinding_Axis_Key struct {
	KeyName              *string  `protobuf:"bytes,1,opt,name=key_name,json=keyName" json:"key_name,omitempty"`
	Scale_3D             *Vec3    `protobuf:"bytes,2,opt,name=scale_3d,json=scale3d" json:"scale_3d,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerInputBinding_Axis_Key) Reset()         { *m = PlayerInputBinding_Axis_Key{} }
func (m *PlayerInputBinding_Axis_Key) String() string { return proto.CompactTextString(m) }
func (*PlayerInputBinding_Axis_Key) ProtoMessage()    {}
func (*PlayerInputBinding_Axis_Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_08b72a8408a178a8, []int{1}
}

func (m *PlayerInputBinding_Axis_Key) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerInputBinding_Axis_Key.Unmarshal(m, b)
}
func (m *PlayerInputBinding_Axis_Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerInputBinding_Axis_Key.Marshal(b, m, deterministic)
}
func (m *PlayerInputBinding_Axis_Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerInputBinding_Axis_Key.Merge(m, src)
}
func (m *PlayerInputBinding_Axis_Key) XXX_Size() int {
	return xxx_messageInfo_PlayerInputBinding_Axis_Key.Size(m)
}
func (m *PlayerInputBinding_Axis_Key) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerInputBinding_Axis_Key.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerInputBinding_Axis_Key proto.InternalMessageInfo

func (m *PlayerInputBinding_Axis_Key) GetKeyName() string {
	if m != nil && m.KeyName != nil {
		return *m.KeyName
	}
	return ""
}

func (m *PlayerInputBinding_Axis_Key) GetScale_3D() *Vec3 {
	if m != nil {
		return m.Scale_3D
	}
	return nil
}

type PlayerInputBinding_Axis struct {
	RebindDataPath       *string                        `protobuf:"bytes,1,opt,name=rebind_data_path,json=rebindDataPath" json:"rebind_data_path,omitempty"`
	Keys                 []*PlayerInputBinding_Axis_Key `protobuf:"bytes,2,rep,name=keys" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *PlayerInputBinding_Axis) Reset()         { *m = PlayerInputBinding_Axis{} }
func (m *PlayerInputBinding_Axis) String() string { return proto.CompactTextString(m) }
func (*PlayerInputBinding_Axis) ProtoMessage()    {}
func (*PlayerInputBinding_Axis) Descriptor() ([]byte, []int) {
	return fileDescriptor_08b72a8408a178a8, []int{2}
}

func (m *PlayerInputBinding_Axis) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerInputBinding_Axis.Unmarshal(m, b)
}
func (m *PlayerInputBinding_Axis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerInputBinding_Axis.Marshal(b, m, deterministic)
}
func (m *PlayerInputBinding_Axis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerInputBinding_Axis.Merge(m, src)
}
func (m *PlayerInputBinding_Axis) XXX_Size() int {
	return xxx_messageInfo_PlayerInputBinding_Axis.Size(m)
}
func (m *PlayerInputBinding_Axis) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerInputBinding_Axis.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerInputBinding_Axis proto.InternalMessageInfo

func (m *PlayerInputBinding_Axis) GetRebindDataPath() string {
	if m != nil && m.RebindDataPath != nil {
		return *m.RebindDataPath
	}
	return ""
}

func (m *PlayerInputBinding_Axis) GetKeys() []*PlayerInputBinding_Axis_Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

type PlayerInputBinding_Category struct {
	CategoryDataPath     *string                      `protobuf:"bytes,1,opt,name=category_data_path,json=categoryDataPath" json:"category_data_path,omitempty"`
	ContextDataPath      *string                      `protobuf:"bytes,2,opt,name=context_data_path,json=contextDataPath" json:"context_data_path,omitempty"`
	ButtonBindings       []*PlayerInputBinding_Button `protobuf:"bytes,3,rep,name=button_bindings,json=buttonBindings" json:"button_bindings,omitempty"`
	AxisBindings         []*PlayerInputBinding_Axis   `protobuf:"bytes,4,rep,name=axis_bindings,json=axisBindings" json:"axis_bindings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *PlayerInputBinding_Category) Reset()         { *m = PlayerInputBinding_Category{} }
func (m *PlayerInputBinding_Category) String() string { return proto.CompactTextString(m) }
func (*PlayerInputBinding_Category) ProtoMessage()    {}
func (*PlayerInputBinding_Category) Descriptor() ([]byte, []int) {
	return fileDescriptor_08b72a8408a178a8, []int{3}
}

func (m *PlayerInputBinding_Category) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerInputBinding_Category.Unmarshal(m, b)
}
func (m *PlayerInputBinding_Category) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerInputBinding_Category.Marshal(b, m, deterministic)
}
func (m *PlayerInputBinding_Category) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerInputBinding_Category.Merge(m, src)
}
func (m *PlayerInputBinding_Category) XXX_Size() int {
	return xxx_messageInfo_PlayerInputBinding_Category.Size(m)
}
func (m *PlayerInputBinding_Category) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerInputBinding_Category.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerInputBinding_Category proto.InternalMessageInfo

func (m *PlayerInputBinding_Category) GetCategoryDataPath() string {
	if m != nil && m.CategoryDataPath != nil {
		return *m.CategoryDataPath
	}
	return ""
}

func (m *PlayerInputBinding_Category) GetContextDataPath() string {
	if m != nil && m.ContextDataPath != nil {
		return *m.ContextDataPath
	}
	return ""
}

func (m *PlayerInputBinding_Category) GetButtonBindings() []*PlayerInputBinding_Button {
	if m != nil {
		return m.ButtonBindings
	}
	return nil
}

func (m *PlayerInputBinding_Category) GetAxisBindings() []*PlayerInputBinding_Axis {
	if m != nil {
		return m.AxisBindings
	}
	return nil
}

type PlayerInputBindings struct {
	Categories           []*PlayerInputBinding_Category `protobuf:"bytes,1,rep,name=categories" json:"categories,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *PlayerInputBindings) Reset()         { *m = PlayerInputBindings{} }
func (m *PlayerInputBindings) String() string { return proto.CompactTextString(m) }
func (*PlayerInputBindings) ProtoMessage()    {}
func (*PlayerInputBindings) Descriptor() ([]byte, []int) {
	return fileDescriptor_08b72a8408a178a8, []int{4}
}

func (m *PlayerInputBindings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerInputBindings.Unmarshal(m, b)
}
func (m *PlayerInputBindings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerInputBindings.Marshal(b, m, deterministic)
}
func (m *PlayerInputBindings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerInputBindings.Merge(m, src)
}
func (m *PlayerInputBindings) XXX_Size() int {
	return xxx_messageInfo_PlayerInputBindings.Size(m)
}
func (m *PlayerInputBindings) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerInputBindings.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerInputBindings proto.InternalMessageInfo

func (m *PlayerInputBindings) GetCategories() []*PlayerInputBinding_Category {
	if m != nil {
		return m.Categories
	}
	return nil
}

type OakProfileLastInventoryFilterInfo struct {
	SlotTypeId           *string  `protobuf:"bytes,1,opt,name=slot_type_id,json=slotTypeId" json:"slot_type_id,omitempty"`
	LastFilterIndex      *int32   `protobuf:"varint,2,opt,name=last_filter_index,json=lastFilterIndex" json:"last_filter_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OakProfileLastInventoryFilterInfo) Reset()         { *m = OakProfileLastInventoryFilterInfo{} }
func (m *OakProfileLastInventoryFilterInfo) String() string { return proto.CompactTextString(m) }
func (*OakProfileLastInventoryFilterInfo) ProtoMessage()    {}
func (*OakProfileLastInventoryFilterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_08b72a8408a178a8, []int{5}
}

func (m *OakProfileLastInventoryFilterInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OakProfileLastInventoryFilterInfo.Unmarshal(m, b)
}
func (m *OakProfileLastInventoryFilterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OakProfileLastInventoryFilterInfo.Marshal(b, m, deterministic)
}
func (m *OakProfileLastInventoryFilterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OakProfileLastInventoryFilterInfo.Merge(m, src)
}
func (m *OakProfileLastInventoryFilterInfo) XXX_Size() int {
	return xxx_messageInfo_OakProfileLastInventoryFilterInfo.Size(m)
}
func (m *OakProfileLastInventoryFilterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OakProfileLastInventoryFilterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OakProfileLastInventoryFilterInfo proto.InternalMessageInfo

func (m *OakProfileLastInventoryFilterInfo) GetSlotTypeId() string {
	if m != nil && m.SlotTypeId != nil {
		return *m.SlotTypeId
	}
	return ""
}

func (m *OakProfileLastInventoryFilterInfo) GetLastFilterIndex() int32 {
	if m != nil && m.LastFilterIndex != nil {
		return *m.LastFilterIndex
	}
	return 0
}

type OakProfileMenuTutorialInfo struct {
	SeenTutorials                  []string `protobuf:"bytes,1,rep,name=seen_tutorials,json=seenTutorials" json:"seen_tutorials,omitempty"`
	TutorialsDisabled              *bool    `protobuf:"varint,2,opt,name=tutorials_disabled,json=tutorialsDisabled" json:"tutorials_disabled,omitempty"`
	TutorialsAllowedInNonGameModes *bool    `protobuf:"varint,3,opt,name=tutorials_allowed_in_non_game_modes,json=tutorialsAllowedInNonGameModes" json:"tutorials_allowed_in_non_game_modes,omitempty"`
	XXX_NoUnkeyedLiteral           struct{} `json:"-"`
	XXX_unrecognized               []byte   `json:"-"`
	XXX_sizecache                  int32    `json:"-"`
}

func (m *OakProfileMenuTutorialInfo) Reset()         { *m = OakProfileMenuTutorialInfo{} }
func (m *OakProfileMenuTutorialInfo) String() string { return proto.CompactTextString(m) }
func (*OakProfileMenuTutorialInfo) ProtoMessage()    {}
func (*OakProfileMenuTutorialInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_08b72a8408a178a8, []int{6}
}

func (m *OakProfileMenuTutorialInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OakProfileMenuTutorialInfo.Unmarshal(m, b)
}
func (m *OakProfileMenuTutorialInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OakProfileMenuTutorialInfo.Marshal(b, m, deterministic)
}
func (m *OakProfileMenuTutorialInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OakProfileMenuTutorialInfo.Merge(m, src)
}
func (m *OakProfileMenuTutorialInfo) XXX_Size() int {
	return xxx_messageInfo_OakProfileMenuTutorialInfo.Size(m)
}
func (m *OakProfileMenuTutorialInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OakProfileMenuTutorialInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OakProfileMenuTutorialInfo proto.InternalMessageInfo

func (m *OakProfileMenuTutorialInfo) GetSeenTutorials() []string {
	if m != nil {
		return m.SeenTutorials
	}
	return nil
}

func (m *OakProfileMenuTutorialInfo) GetTutorialsDisabled() bool {
	if m != nil && m.TutorialsDisabled != nil {
		return *m.TutorialsDisabled
	}
	return false
}

func (m *OakProfileMenuTutorialInfo) GetTutorialsAllowedInNonGameModes() bool {
	if m != nil && m.TutorialsAllowedInNonGameModes != nil {
		return *m.TutorialsAllowedInNonGameModes
	}
	return false
}

type OakFriendEncounterData struct {
	NumEncounters        *uint32  `protobuf:"varint,1,opt,name=num_encounters,json=numEncounters" json:"num_encounters,omitempty"`
	TimeLastEncounter    *int64   `protobuf:"varint,2,opt,name=time_last_encounter,json=timeLastEncounter" json:"time_last_encounter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OakFriendEncounterData) Reset()         { *m = OakFriendEncounterData{} }
func (m *OakFriendEncounterData) String() string { return proto.CompactTextString(m) }
func (*OakFriendEncounterData) ProtoMessage()    {}
func (*OakFriendEncounterData) Descriptor() ([]byte, []int) {
	return fileDescriptor_08b72a8408a178a8, []int{7}
}

func (m *OakFriendEncounterData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OakFriendEncounterData.Unmarshal(m, b)
}
func (m *OakFriendEncounterData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OakFriendEncounterData.Marshal(b, m, deterministic)
}
func (m *OakFriendEncounterData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OakFriendEncounterData.Merge(m, src)
}
func (m *OakFriendEncounterData) XXX_Size() int {
	return xxx_messageInfo_OakFriendEncounterData.Size(m)
}
func (m *OakFriendEncounterData) XXX_DiscardUnknown() {
	xxx_messageInfo_OakFriendEncounterData.DiscardUnknown(m)
}

var xxx_messageInfo_OakFriendEncounterData proto.InternalMessageInfo

func (m *OakFriendEncounterData) GetNumEncounters() uint32 {
	if m != nil && m.NumEncounters != nil {
		return *m.NumEncounters
	}
	return 0
}

func (m *OakFriendEncounterData) GetTimeLastEncounter() int64 {
	if m != nil && m.TimeLastEncounter != nil {
		return *m.TimeLastEncounter
	}
	return 0
}

type OakMailItem struct {
	MailItemType         *uint32  `protobuf:"varint,1,opt,name=mail_item_type,json=mailItemType" json:"mail_item_type,omitempty"`
	SenderDisplayName    *string  `protobuf:"bytes,2,opt,name=sender_display_name,json=senderDisplayName" json:"sender_display_name,omitempty"`
	Subject              *string  `protobuf:"bytes,3,opt,name=subject" json:"subject,omitempty"`
	Body                 *string  `protobuf:"bytes,4,opt,name=body" json:"body,omitempty"`
	GearSerialNumber     *string  `protobuf:"bytes,5,opt,name=gear_serial_number,json=gearSerialNumber" json:"gear_serial_number,omitempty"`
	MailGuid             *string  `protobuf:"bytes,6,opt,name=mail_guid,json=mailGuid" json:"mail_guid,omitempty"`
	DateSent             *int64   `protobuf:"varint,7,opt,name=date_sent,json=dateSent" json:"date_sent,omitempty"`
	ExpirationDate       *int64   `protobuf:"varint,8,opt,name=expiration_date,json=expirationDate" json:"expiration_date,omitempty"`
	FromPlayerId         *string  `protobuf:"bytes,9,opt,name=from_player_id,json=fromPlayerId" json:"from_player_id,omitempty"`
	HasBeenRead          *bool    `protobuf:"varint,10,opt,name=has_been_read,json=hasBeenRead" json:"has_been_read,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OakMailItem) Reset()         { *m = OakMailItem{} }
func (m *OakMailItem) String() string { return proto.CompactTextString(m) }
func (*OakMailItem) ProtoMessage()    {}
func (*OakMailItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_08b72a8408a178a8, []int{8}
}

func (m *OakMailItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OakMailItem.Unmarshal(m, b)
}
func (m *OakMailItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OakMailItem.Marshal(b, m, deterministic)
}
func (m *OakMailItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OakMailItem.Merge(m, src)
}
func (m *OakMailItem) XXX_Size() int {
	return xxx_messageInfo_OakMailItem.Size(m)
}
func (m *OakMailItem) XXX_DiscardUnknown() {
	xxx_messageInfo_OakMailItem.DiscardUnknown(m)
}

var xxx_messageInfo_OakMailItem proto.InternalMessageInfo

func (m *OakMailItem) GetMailItemType() uint32 {
	if m != nil && m.MailItemType != nil {
		return *m.MailItemType
	}
	return 0
}

func (m *OakMailItem) GetSenderDisplayName() string {
	if m != nil && m.SenderDisplayName != nil {
		return *m.SenderDisplayName
	}
	return ""
}

func (m *OakMailItem) GetSubject() string {
	if m != nil && m.Subject != nil {
		return *m.Subject
	}
	return ""
}

func (m *OakMailItem) GetBody() string {
	if m != nil && m.Body != nil {
		return *m.Body
	}
	return ""
}

func (m *OakMailItem) GetGearSerialNumber() string {
	if m != nil && m.GearSerialNumber != nil {
		return *m.GearSerialNumber
	}
	return ""
}

func (m *OakMailItem) GetMailGuid() string {
	if m != nil && m.MailGuid != nil {
		return *m.MailGuid
	}
	return ""
}

func (m *OakMailItem) GetDateSent() int64 {
	if m != nil && m.DateSent != nil {
		return *m.DateSent
	}
	return 0
}

func (m *OakMailItem) GetExpirationDate() int64 {
	if m != nil && m.ExpirationDate != nil {
		return *m.ExpirationDate
	}
	return 0
}

func (m *OakMailItem) GetFromPlayerId() string {
	if m != nil && m.FromPlayerId != nil {
		return *m.FromPlayerId
	}
	return ""
}

func (m *OakMailItem) GetHasBeenRead() bool {
	if m != nil && m.HasBeenRead != nil {
		return *m.HasBeenRead
	}
	return false
}

type GearSoldByFriendData struct {
	GearSerialNumber          *string  `protobuf:"bytes,1,opt,name=gear_serial_number,json=gearSerialNumber" json:"gear_serial_number,omitempty"`
	PlayerClassIdentifierHash *int32   `protobuf:"varint,2,opt,name=player_class_identifier_hash,json=playerClassIdentifierHash" json:"player_class_identifier_hash,omitempty"`
	FriendNetId               *string  `protobuf:"bytes,3,opt,name=friend_net_id,json=friendNetId" json:"friend_net_id,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *GearSoldByFriendData) Reset()         { *m = GearSoldByFriendData{} }
func (m *GearSoldByFriendData) String() string { return proto.CompactTextString(m) }
func (*GearSoldByFriendData) ProtoMessage()    {}
func (*GearSoldByFriendData) Descriptor() ([]byte, []int) {
	return fileDescriptor_08b72a8408a178a8, []int{9}
}

func (m *GearSoldByFriendData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GearSoldByFriendData.Unmarshal(m, b)
}
func (m *GearSoldByFriendData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GearSoldByFriendData.Marshal(b, m, deterministic)
}
func (m *GearSoldByFriendData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GearSoldByFriendData.Merge(m, src)
}
func (m *GearSoldByFriendData) XXX_Size() int {
	return xxx_messageInfo_GearSoldByFriendData.Size(m)
}
func (m *GearSoldByFriendData) XXX_DiscardUnknown() {
	xxx_messageInfo_GearSoldByFriendData.DiscardUnknown(m)
}

var xxx_messageInfo_GearSoldByFriendData proto.InternalMessageInfo

func (m *GearSoldByFriendData) GetGearSerialNumber() string {
	if m != nil && m.GearSerialNumber != nil {
		return *m.GearSerialNumber
	}
	return ""
}

func (m *GearSoldByFriendData) GetPlayerClassIdentifierHash() int32 {
	if m != nil && m.PlayerClassIdentifierHash != nil {
		return *m.PlayerClassIdentifierHash
	}
	return 0
}

func (m *GearSoldByFriendData) GetFriendNetId() string {
	if m != nil && m.FriendNetId != nil {
		return *m.FriendNetId
	}
	return ""
}

type OakCustomizationSaveGameData struct {
	IsNew                  *bool    `protobuf:"varint,1,opt,name=is_new,json=isNew" json:"is_new,omitempty"`
	CustomizationAssetPath *string  `protobuf:"bytes,2,opt,name=customization_asset_path,json=customizationAssetPath" json:"customization_asset_path,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *OakCustomizationSaveGameData) Reset()         { *m = OakCustomizationSaveGameData{} }
func (m *OakCustomizationSaveGameData) String() string { return proto.CompactTextString(m) }
func (*OakCustomizationSaveGameData) ProtoMessage()    {}
func (*OakCustomizationSaveGameData) Descriptor() ([]byte, []int) {
	return fileDescriptor_08b72a8408a178a8, []int{10}
}

func (m *OakCustomizationSaveGameData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OakCustomizationSaveGameData.Unmarshal(m, b)
}
func (m *OakCustomizationSaveGameData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OakCustomizationSaveGameData.Marshal(b, m, deterministic)
}
func (m *OakCustomizationSaveGameData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OakCustomizationSaveGameData.Merge(m, src)
}
func (m *OakCustomizationSaveGameData) XXX_Size() int {
	return xxx_messageInfo_OakCustomizationSaveGameData.Size(m)
}
func (m *OakCustomizationSaveGameData) XXX_DiscardUnknown() {
	xxx_messageInfo_OakCustomizationSaveGameData.DiscardUnknown(m)
}

var xxx_messageInfo_OakCustomizationSaveGameData proto.InternalMessageInfo

func (m *OakCustomizationSaveGameData) GetIsNew() bool {
	if m != nil && m.IsNew != nil {
		return *m.IsNew
	}
	return false
}

func (m *OakCustomizationSaveGameData) GetCustomizationAssetPath() string {
	if m != nil && m.CustomizationAssetPath != nil {
		return *m.CustomizationAssetPath
	}
	return ""
}

type OakInventoryCustomizationPartInfo struct {
	CustomizationPartHash *uint32  `protobuf:"varint,1,opt,name=customization_part_hash,json=customizationPartHash" json:"customization_part_hash,omitempty"`
	IsNew                 *bool    `protobuf:"varint,2,opt,name=is_new,json=isNew" json:"is_new,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *OakInventoryCustomizationPartInfo) Reset()         { *m = OakInventoryCustomizationPartInfo{} }
func (m *OakInventoryCustomizationPartInfo) String() string { return proto.CompactTextString(m) }
func (*OakInventoryCustomizationPartInfo) ProtoMessage()    {}
func (*OakInventoryCustomizationPartInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_08b72a8408a178a8, []int{11}
}

func (m *OakInventoryCustomizationPartInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OakInventoryCustomizationPartInfo.Unmarshal(m, b)
}
func (m *OakInventoryCustomizationPartInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OakInventoryCustomizationPartInfo.Marshal(b, m, deterministic)
}
func (m *OakInventoryCustomizationPartInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OakInventoryCustomizationPartInfo.Merge(m, src)
}
func (m *OakInventoryCustomizationPartInfo) XXX_Size() int {
	return xxx_messageInfo_OakInventoryCustomizationPartInfo.Size(m)
}
func (m *OakInventoryCustomizationPartInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OakInventoryCustomizationPartInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OakInventoryCustomizationPartInfo proto.InternalMessageInfo

func (m *OakInventoryCustomizationPartInfo) GetCustomizationPartHash() uint32 {
	if m != nil && m.CustomizationPartHash != nil {
		return *m.CustomizationPartHash
	}
	return 0
}

func (m *OakInventoryCustomizationPartInfo) GetIsNew() bool {
	if m != nil && m.IsNew != nil {
		return *m.IsNew
	}
	return false
}

type GuardianRankRewardSaveGameData struct {
	NumTokens            *int32   `protobuf:"varint,1,opt,name=num_tokens,json=numTokens" json:"num_tokens,omitempty"`
	RewardDataPath       *string  `protobuf:"bytes,2,opt,name=reward_data_path,json=rewardDataPath" json:"reward_data_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GuardianRankRewardSaveGameData) Reset()         { *m = GuardianRankRewardSaveGameData{} }
func (m *GuardianRankRewardSaveGameData) String() string { return proto.CompactTextString(m) }
func (*GuardianRankRewardSaveGameData) ProtoMessage()    {}
func (*GuardianRankRewardSaveGameData) Descriptor() ([]byte, []int) {
	return fileDescriptor_08b72a8408a178a8, []int{12}
}

func (m *GuardianRankRewardSaveGameData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GuardianRankRewardSaveGameData.Unmarshal(m, b)
}
func (m *GuardianRankRewardSaveGameData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GuardianRankRewardSaveGameData.Marshal(b, m, deterministic)
}
func (m *GuardianRankRewardSaveGameData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuardianRankRewardSaveGameData.Merge(m, src)
}
func (m *GuardianRankRewardSaveGameData) XXX_Size() int {
	return xxx_messageInfo_GuardianRankRewardSaveGameData.Size(m)
}
func (m *GuardianRankRewardSaveGameData) XXX_DiscardUnknown() {
	xxx_messageInfo_GuardianRankRewardSaveGameData.DiscardUnknown(m)
}

var xxx_messageInfo_GuardianRankRewardSaveGameData proto.InternalMessageInfo

func (m *GuardianRankRewardSaveGameData) GetNumTokens() int32 {
	if m != nil && m.NumTokens != nil {
		return *m.NumTokens
	}
	return 0
}

func (m *GuardianRankRewardSaveGameData) GetRewardDataPath() string {
	if m != nil && m.RewardDataPath != nil {
		return *m.RewardDataPath
	}
	return ""
}

type GuardianRankProfileData struct {
	AvailableTokens      *int32                            `protobuf:"varint,1,opt,name=available_tokens,json=availableTokens" json:"available_tokens,omitempty"`
	RankRewards          []*GuardianRankRewardSaveGameData `protobuf:"bytes,2,rep,name=rank_rewards,json=rankRewards" json:"rank_rewards,omitempty"`
	GuardianRank         *int32                            `protobuf:"varint,3,opt,name=guardian_rank,json=guardianRank" json:"guardian_rank,omitempty"`
	GuardianExperience   *int32                            `protobuf:"varint,4,opt,name=guardian_experience,json=guardianExperience" json:"guardian_experience,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *GuardianRankProfileData) Reset()         { *m = GuardianRankProfileData{} }
func (m *GuardianRankProfileData) String() string { return proto.CompactTextString(m) }
func (*GuardianRankProfileData) ProtoMessage()    {}
func (*GuardianRankProfileData) Descriptor() ([]byte, []int) {
	return fileDescriptor_08b72a8408a178a8, []int{13}
}

func (m *GuardianRankProfileData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GuardianRankProfileData.Unmarshal(m, b)
}
func (m *GuardianRankProfileData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GuardianRankProfileData.Marshal(b, m, deterministic)
}
func (m *GuardianRankProfileData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuardianRankProfileData.Merge(m, src)
}
func (m *GuardianRankProfileData) XXX_Size() int {
	return xxx_messageInfo_GuardianRankProfileData.Size(m)
}
func (m *GuardianRankProfileData) XXX_DiscardUnknown() {
	xxx_messageInfo_GuardianRankProfileData.DiscardUnknown(m)
}

var xxx_messageInfo_GuardianRankProfileData proto.InternalMessageInfo

func (m *GuardianRankProfileData) GetAvailableTokens() int32 {
	if m != nil && m.AvailableTokens != nil {
		return *m.AvailableTokens
	}
	return 0
}

func (m *GuardianRankProfileData) GetRankRewards() []*GuardianRankRewardSaveGameData {
	if m != nil {
		return m.RankRewards
	}
	return nil
}

func (m *GuardianRankProfileData) GetGuardianRank() int32 {
	if m != nil && m.GuardianRank != nil {
		return *m.GuardianRank
	}
	return 0
}

func (m *GuardianRankProfileData) GetGuardianExperience() int32 {
	if m != nil && m.GuardianExperience != nil {
		return *m.GuardianExperience
	}
	return 0
}

type CrewQuartersDecorationItemSaveGameData struct {
	IsNew                   *bool    `protobuf:"varint,1,opt,name=is_new,json=isNew" json:"is_new,omitempty"`
	DecorationItemAssetPath *string  `protobuf:"bytes,2,opt,name=decoration_item_asset_path,json=decorationItemAssetPath" json:"decoration_item_asset_path,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *CrewQuartersDecorationItemSaveGameData) Reset() {
	*m = CrewQuartersDecorationItemSaveGameData{}
}
func (m *CrewQuartersDecorationItemSaveGameData) String() string { return proto.CompactTextString(m) }
func (*CrewQuartersDecorationItemSaveGameData) ProtoMessage()    {}
func (*CrewQuartersDecorationItemSaveGameData) Descriptor() ([]byte, []int) {
	return fileDescriptor_08b72a8408a178a8, []int{14}
}

func (m *CrewQuartersDecorationItemSaveGameData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrewQuartersDecorationItemSaveGameData.Unmarshal(m, b)
}
func (m *CrewQuartersDecorationItemSaveGameData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrewQuartersDecorationItemSaveGameData.Marshal(b, m, deterministic)
}
func (m *CrewQuartersDecorationItemSaveGameData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrewQuartersDecorationItemSaveGameData.Merge(m, src)
}
func (m *CrewQuartersDecorationItemSaveGameData) XXX_Size() int {
	return xxx_messageInfo_CrewQuartersDecorationItemSaveGameData.Size(m)
}
func (m *CrewQuartersDecorationItemSaveGameData) XXX_DiscardUnknown() {
	xxx_messageInfo_CrewQuartersDecorationItemSaveGameData.DiscardUnknown(m)
}

var xxx_messageInfo_CrewQuartersDecorationItemSaveGameData proto.InternalMessageInfo

func (m *CrewQuartersDecorationItemSaveGameData) GetIsNew() bool {
	if m != nil && m.IsNew != nil {
		return *m.IsNew
	}
	return false
}

func (m *CrewQuartersDecorationItemSaveGameData) GetDecorationItemAssetPath() string {
	if m != nil && m.DecorationItemAssetPath != nil {
		return *m.DecorationItemAssetPath
	}
	return ""
}

type CrewQuartersRoomItemSaveGameData struct {
	IsNew                *bool    `protobuf:"varint,1,opt,name=is_new,json=isNew" json:"is_new,omitempty"`
	RoomItemAssetPath    *string  `protobuf:"bytes,2,opt,name=room_item_asset_path,json=roomItemAssetPath" json:"room_item_asset_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CrewQuartersRoomItemSaveGameData) Reset()         { *m = CrewQuartersRoomItemSaveGameData{} }
func (m *CrewQuartersRoomItemSaveGameData) String() string { return proto.CompactTextString(m) }
func (*CrewQuartersRoomItemSaveGameData) ProtoMessage()    {}
func (*CrewQuartersRoomItemSaveGameData) Descriptor() ([]byte, []int) {
	return fileDescriptor_08b72a8408a178a8, []int{15}
}

func (m *CrewQuartersRoomItemSaveGameData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrewQuartersRoomItemSaveGameData.Unmarshal(m, b)
}
func (m *CrewQuartersRoomItemSaveGameData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrewQuartersRoomItemSaveGameData.Marshal(b, m, deterministic)
}
func (m *CrewQuartersRoomItemSaveGameData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrewQuartersRoomItemSaveGameData.Merge(m, src)
}
func (m *CrewQuartersRoomItemSaveGameData) XXX_Size() int {
	return xxx_messageInfo_CrewQuartersRoomItemSaveGameData.Size(m)
}
func (m *CrewQuartersRoomItemSaveGameData) XXX_DiscardUnknown() {
	xxx_messageInfo_CrewQuartersRoomItemSaveGameData.DiscardUnknown(m)
}

var xxx_messageInfo_CrewQuartersRoomItemSaveGameData proto.InternalMessageInfo

func (m *CrewQuartersRoomItemSaveGameData) GetIsNew() bool {
	if m != nil && m.IsNew != nil {
		return *m.IsNew
	}
	return false
}

func (m *CrewQuartersRoomItemSaveGameData) GetRoomItemAssetPath() string {
	if m != nil && m.RoomItemAssetPath != nil {
		return *m.RoomItemAssetPath
	}
	return ""
}

type Profile struct {
	EnableAimAssist                      *bool                                     `protobuf:"varint,1,opt,name=enable_aim_assist,json=enableAimAssist" json:"enable_aim_assist,omitempty"`
	GamepadInvertLook                    *bool                                     `protobuf:"varint,2,opt,name=gamepad_invert_look,json=gamepadInvertLook" json:"gamepad_invert_look,omitempty"`
	GamepadInvertTurn                    *bool                                     `protobuf:"varint,3,opt,name=gamepad_invert_turn,json=gamepadInvertTurn" json:"gamepad_invert_turn,omitempty"`
	GamepadInvertMove                    *bool                                     `protobuf:"varint,4,opt,name=gamepad_invert_move,json=gamepadInvertMove" json:"gamepad_invert_move,omitempty"`
	GamepadInvertStrafe                  *bool                                     `protobuf:"varint,5,opt,name=gamepad_invert_strafe,json=gamepadInvertStrafe" json:"gamepad_invert_strafe,omitempty"`
	EnableVibration                      *bool                                     `protobuf:"varint,6,opt,name=enable_vibration,json=enableVibration" json:"enable_vibration,omitempty"`
	InvertMousePitch                     *bool                                     `protobuf:"varint,7,opt,name=invert_mouse_pitch,json=invertMousePitch" json:"invert_mouse_pitch,omitempty"`
	EnableMouseSmoothing                 *bool                                     `protobuf:"varint,8,opt,name=enable_mouse_smoothing,json=enableMouseSmoothing" json:"enable_mouse_smoothing,omitempty"`
	MouseScale                           *float32                                  `protobuf:"fixed32,9,opt,name=mouse_scale,json=mouseScale" json:"mouse_scale,omitempty"`
	ShowDamageNumbers                    *bool                                     `protobuf:"varint,10,opt,name=show_damage_numbers,json=showDamageNumbers" json:"show_damage_numbers,omitempty"`
	ShowDamageNumberIcons                *bool                                     `protobuf:"varint,11,opt,name=show_damage_number_icons,json=showDamageNumberIcons" json:"show_damage_number_icons,omitempty"`
	EnableTrainingMessages               *bool                                     `protobuf:"varint,12,opt,name=enable_training_messages,json=enableTrainingMessages" json:"enable_training_messages,omitempty"`
	ShowTextChat                         *bool                                     `protobuf:"varint,13,opt,name=show_text_chat,json=showTextChat" json:"show_text_chat,omitempty"`
	CenterCrosshair                      *bool                                     `protobuf:"varint,14,opt,name=center_crosshair,json=centerCrosshair" json:"center_crosshair,omitempty"`
	ToggleSprint                         *bool                                     `protobuf:"varint,15,opt,name=toggle_sprint,json=toggleSprint" json:"toggle_sprint,omitempty"`
	ToggleCrouch                         *bool                                     `protobuf:"varint,16,opt,name=toggle_crouch,json=toggleCrouch" json:"toggle_crouch,omitempty"`
	CensorContent                        *bool                                     `protobuf:"varint,17,opt,name=censor_content,json=censorContent" json:"censor_content,omitempty"`
	MusicVolume                          *float32                                  `protobuf:"fixed32,18,opt,name=music_volume,json=musicVolume" json:"music_volume,omitempty"`
	SoundEffectsVolume                   *float32                                  `protobuf:"fixed32,19,opt,name=sound_effects_volume,json=soundEffectsVolume" json:"sound_effects_volume,omitempty"`
	VoVolume                             *float32                                  `protobuf:"fixed32,20,opt,name=vo_volume,json=voVolume" json:"vo_volume,omitempty"`
	VoiceVolume                          *float32                                  `protobuf:"fixed32,21,opt,name=voice_volume,json=voiceVolume" json:"voice_volume,omitempty"`
	EnableOptionalVo                     *bool                                     `protobuf:"varint,22,opt,name=enable_optional_vo,json=enableOptionalVo" json:"enable_optional_vo,omitempty"`
	PushToTalk                           *bool                                     `protobuf:"varint,23,opt,name=push_to_talk,json=pushToTalk" json:"push_to_talk,omitempty"`
	EnableControllerAudio                *bool                                     `protobuf:"varint,24,opt,name=enable_controller_audio,json=enableControllerAudio" json:"enable_controller_audio,omitempty"`
	SpeakerAngleFront                    *float32                                  `protobuf:"fixed32,25,opt,name=speaker_angle_front,json=speakerAngleFront" json:"speaker_angle_front,omitempty"`
	SpeakerAngleSide                     *float32                                  `protobuf:"fixed32,26,opt,name=speaker_angle_side,json=speakerAngleSide" json:"speaker_angle_side,omitempty"`
	SpeakerAngleBack                     *float32                                  `protobuf:"fixed32,27,opt,name=speaker_angle_back,json=speakerAngleBack" json:"speaker_angle_back,omitempty"`
	SpeakerSetup                         *uint32                                   `protobuf:"varint,28,opt,name=speaker_setup,json=speakerSetup" json:"speaker_setup,omitempty"`
	MuteAudioOnFocusLoss                 *bool                                     `protobuf:"varint,29,opt,name=mute_audio_on_focus_loss,json=muteAudioOnFocusLoss" json:"mute_audio_on_focus_loss,omitempty"`
	HideStrictNatHelpDialog              *bool                                     `protobuf:"varint,34,opt,name=hide_strict_nat_help_dialog,json=hideStrictNatHelpDialog" json:"hide_strict_nat_help_dialog,omitempty"`
	PlayerInputBindings                  *PlayerInputBindings                      `protobuf:"bytes,35,opt,name=player_input_bindings,json=playerInputBindings" json:"player_input_bindings,omitempty"`
	NewsHashes                           []uint32                                  `protobuf:"varint,36,rep,name=news_hashes,json=newsHashes" json:"news_hashes,omitempty"`
	LastUsedSavegameId                   *uint32                                   `protobuf:"varint,37,opt,name=last_used_savegame_id,json=lastUsedSavegameId" json:"last_used_savegame_id,omitempty"`
	GamepadHipSensitivityLevel           *int32                                    `protobuf:"varint,38,opt,name=gamepad_hip_sensitivity_level,json=gamepadHipSensitivityLevel" json:"gamepad_hip_sensitivity_level,omitempty"`
	GamepadZoomedSensitivityLevel        *int32                                    `protobuf:"varint,39,opt,name=gamepad_zoomed_sensitivity_level,json=gamepadZoomedSensitivityLevel" json:"gamepad_zoomed_sensitivity_level,omitempty"`
	GamepadVehicleSensitivityLevel       *int32                                    `protobuf:"varint,40,opt,name=gamepad_vehicle_sensitivity_level,json=gamepadVehicleSensitivityLevel" json:"gamepad_vehicle_sensitivity_level,omitempty"`
	GamepadMovementDeadZoneX             *float32                                  `protobuf:"fixed32,41,opt,name=gamepad_movement_dead_zone_x,json=gamepadMovementDeadZoneX" json:"gamepad_movement_dead_zone_x,omitempty"`
	GamepadMovementDeadZoneY             *float32                                  `protobuf:"fixed32,42,opt,name=gamepad_movement_dead_zone_y,json=gamepadMovementDeadZoneY" json:"gamepad_movement_dead_zone_y,omitempty"`
	GamepadLookDeadZoneInnerX            *float32                                  `protobuf:"fixed32,43,opt,name=gamepad_look_dead_zone_inner_x,json=gamepadLookDeadZoneInnerX" json:"gamepad_look_dead_zone_inner_x,omitempty"`
	GamepadLookDeadZoneOuterX            *float32                                  `protobuf:"fixed32,44,opt,name=gamepad_look_dead_zone_outer_x,json=gamepadLookDeadZoneOuterX" json:"gamepad_look_dead_zone_outer_x,omitempty"`
	GamepadLookDeadZoneInnerY            *float32                                  `protobuf:"fixed32,45,opt,name=gamepad_look_dead_zone_inner_y,json=gamepadLookDeadZoneInnerY" json:"gamepad_look_dead_zone_inner_y,omitempty"`
	GamepadLookDeadZoneOuterY            *float32                                  `protobuf:"fixed32,46,opt,name=gamepad_look_dead_zone_outer_y,json=gamepadLookDeadZoneOuterY" json:"gamepad_look_dead_zone_outer_y,omitempty"`
	GamepadVehicleMovementDeadZoneX      *float32                                  `protobuf:"fixed32,47,opt,name=gamepad_vehicle_movement_dead_zone_x,json=gamepadVehicleMovementDeadZoneX" json:"gamepad_vehicle_movement_dead_zone_x,omitempty"`
	GamepadVehicleMovementDeadZoneY      *float32                                  `protobuf:"fixed32,48,opt,name=gamepad_vehicle_movement_dead_zone_y,json=gamepadVehicleMovementDeadZoneY" json:"gamepad_vehicle_movement_dead_zone_y,omitempty"`
	GamepadVehicleLookDeadZoneInnerX     *float32                                  `protobuf:"fixed32,49,opt,name=gamepad_vehicle_look_dead_zone_inner_x,json=gamepadVehicleLookDeadZoneInnerX" json:"gamepad_vehicle_look_dead_zone_inner_x,omitempty"`
	GamepadVehicleLookDeadZoneOuterX     *float32                                  `protobuf:"fixed32,50,opt,name=gamepad_vehicle_look_dead_zone_outer_x,json=gamepadVehicleLookDeadZoneOuterX" json:"gamepad_vehicle_look_dead_zone_outer_x,omitempty"`
	GamepadVehicleLookDeadZoneInnerY     *float32                                  `protobuf:"fixed32,51,opt,name=gamepad_vehicle_look_dead_zone_inner_y,json=gamepadVehicleLookDeadZoneInnerY" json:"gamepad_vehicle_look_dead_zone_inner_y,omitempty"`
	GamepadVehicleLookDeadZoneOuterY     *float32                                  `protobuf:"fixed32,52,opt,name=gamepad_vehicle_look_dead_zone_outer_y,json=gamepadVehicleLookDeadZoneOuterY" json:"gamepad_vehicle_look_dead_zone_outer_y,omitempty"`
	GamepadLeftDeadZoneInner             *float32                                  `protobuf:"fixed32,53,opt,name=gamepad_left_dead_zone_inner,json=gamepadLeftDeadZoneInner" json:"gamepad_left_dead_zone_inner,omitempty"`
	GamepadLeftDeadZoneOuter             *float32                                  `protobuf:"fixed32,54,opt,name=gamepad_left_dead_zone_outer,json=gamepadLeftDeadZoneOuter" json:"gamepad_left_dead_zone_outer,omitempty"`
	GamepadRightDeadZoneInner            *float32                                  `protobuf:"fixed32,55,opt,name=gamepad_right_dead_zone_inner,json=gamepadRightDeadZoneInner" json:"gamepad_right_dead_zone_inner,omitempty"`
	GamepadRightDeadZoneOuter            *float32                                  `protobuf:"fixed32,56,opt,name=gamepad_right_dead_zone_outer,json=gamepadRightDeadZoneOuter" json:"gamepad_right_dead_zone_outer,omitempty"`
	GamepadLookAxialDeadZoneScale        *float32                                  `protobuf:"fixed32,57,opt,name=gamepad_look_axial_dead_zone_scale,json=gamepadLookAxialDeadZoneScale" json:"gamepad_look_axial_dead_zone_scale,omitempty"`
	GamepadMoveAxialDeadZoneScale        *float32                                  `protobuf:"fixed32,58,opt,name=gamepad_move_axial_dead_zone_scale,json=gamepadMoveAxialDeadZoneScale" json:"gamepad_move_axial_dead_zone_scale,omitempty"`
	GamepadUseAdvancedHipAimSettings     *bool                                     `protobuf:"varint,59,opt,name=gamepad_use_advanced_hip_aim_settings,json=gamepadUseAdvancedHipAimSettings" json:"gamepad_use_advanced_hip_aim_settings,omitempty"`
	GamepadUseAdvancedZoomedAimSettings  *bool                                     `protobuf:"varint,60,opt,name=gamepad_use_advanced_zoomed_aim_settings,json=gamepadUseAdvancedZoomedAimSettings" json:"gamepad_use_advanced_zoomed_aim_settings,omitempty"`
	GamepadUseAdvancedVehicleAimSettings *bool                                     `protobuf:"varint,61,opt,name=gamepad_use_advanced_vehicle_aim_settings,json=gamepadUseAdvancedVehicleAimSettings" json:"gamepad_use_advanced_vehicle_aim_settings,omitempty"`
	GamepadHipYawRate                    *float32                                  `protobuf:"fixed32,62,opt,name=gamepad_hip_yaw_rate,json=gamepadHipYawRate" json:"gamepad_hip_yaw_rate,omitempty"`
	GamepadHipPitchRate                  *float32                                  `protobuf:"fixed32,63,opt,name=gamepad_hip_pitch_rate,json=gamepadHipPitchRate" json:"gamepad_hip_pitch_rate,omitempty"`
	GamepadHipExtraYaw                   *float32                                  `protobuf:"fixed32,64,opt,name=gamepad_hip_extra_yaw,json=gamepadHipExtraYaw" json:"gamepad_hip_extra_yaw,omitempty"`
	GamepadHipExtraPitch                 *float32                                  `protobuf:"fixed32,65,opt,name=gamepad_hip_extra_pitch,json=gamepadHipExtraPitch" json:"gamepad_hip_extra_pitch,omitempty"`
	GamepadHipRampUpTime                 *float32                                  `protobuf:"fixed32,66,opt,name=gamepad_hip_ramp_up_time,json=gamepadHipRampUpTime" json:"gamepad_hip_ramp_up_time,omitempty"`
	GamepadHipRampUpDelay                *float32                                  `protobuf:"fixed32,67,opt,name=gamepad_hip_ramp_up_delay,json=gamepadHipRampUpDelay" json:"gamepad_hip_ramp_up_delay,omitempty"`
	GamepadZoomedYawRate                 *float32                                  `protobuf:"fixed32,68,opt,name=gamepad_zoomed_yaw_rate,json=gamepadZoomedYawRate" json:"gamepad_zoomed_yaw_rate,omitempty"`
	GamepadZoomedPitchRate               *float32                                  `protobuf:"fixed32,69,opt,name=gamepad_zoomed_pitch_rate,json=gamepadZoomedPitchRate" json:"gamepad_zoomed_pitch_rate,omitempty"`
	GamepadZoomedExtraYaw                *float32                                  `protobuf:"fixed32,70,opt,name=gamepad_zoomed_extra_yaw,json=gamepadZoomedExtraYaw" json:"gamepad_zoomed_extra_yaw,omitempty"`
	GamepadZoomedExtraPitch              *float32                                  `protobuf:"fixed32,71,opt,name=gamepad_zoomed_extra_pitch,json=gamepadZoomedExtraPitch" json:"gamepad_zoomed_extra_pitch,omitempty"`
	GamepadZoomedRampUpTime              *float32                                  `protobuf:"fixed32,72,opt,name=gamepad_zoomed_ramp_up_time,json=gamepadZoomedRampUpTime" json:"gamepad_zoomed_ramp_up_time,omitempty"`
	GamepadZoomedRampUpDelay             *float32                                  `protobuf:"fixed32,73,opt,name=gamepad_zoomed_ramp_up_delay,json=gamepadZoomedRampUpDelay" json:"gamepad_zoomed_ramp_up_delay,omitempty"`
	GamepadVehicleYawRate                *float32                                  `protobuf:"fixed32,74,opt,name=gamepad_vehicle_yaw_rate,json=gamepadVehicleYawRate" json:"gamepad_vehicle_yaw_rate,omitempty"`
	GamepadVehiclePitchRate              *float32                                  `protobuf:"fixed32,75,opt,name=gamepad_vehicle_pitch_rate,json=gamepadVehiclePitchRate" json:"gamepad_vehicle_pitch_rate,omitempty"`
	GamepadVehicleExtraYaw               *float32                                  `protobuf:"fixed32,76,opt,name=gamepad_vehicle_extra_yaw,json=gamepadVehicleExtraYaw" json:"gamepad_vehicle_extra_yaw,omitempty"`
	GamepadVehicleExtraPitch             *float32                                  `protobuf:"fixed32,77,opt,name=gamepad_vehicle_extra_pitch,json=gamepadVehicleExtraPitch" json:"gamepad_vehicle_extra_pitch,omitempty"`
	GamepadVehicleRampUpTime             *float32                                  `protobuf:"fixed32,78,opt,name=gamepad_vehicle_ramp_up_time,json=gamepadVehicleRampUpTime" json:"gamepad_vehicle_ramp_up_time,omitempty"`
	GamepadVehicleRampUpDelay            *float32                                  `protobuf:"fixed32,79,opt,name=gamepad_vehicle_ramp_up_delay,json=gamepadVehicleRampUpDelay" json:"gamepad_vehicle_ramp_up_delay,omitempty"`
	IronsightAimAssist                   *bool                                     `protobuf:"varint,80,opt,name=ironsight_aim_assist,json=ironsightAimAssist" json:"ironsight_aim_assist,omitempty"`
	WalkingJoystickScheme                *uint32                                   `protobuf:"varint,81,opt,name=walking_joystick_scheme,json=walkingJoystickScheme" json:"walking_joystick_scheme,omitempty"`
	DrivingJoystickScheme                *uint32                                   `protobuf:"varint,82,opt,name=driving_joystick_scheme,json=drivingJoystickScheme" json:"driving_joystick_scheme,omitempty"`
	MouseAdsScale                        *float32                                  `protobuf:"fixed32,83,opt,name=mouse_ads_scale,json=mouseAdsScale" json:"mouse_ads_scale,omitempty"`
	MouseVehicleScale                    *float32                                  `protobuf:"fixed32,84,opt,name=mouse_vehicle_scale,json=mouseVehicleScale" json:"mouse_vehicle_scale,omitempty"`
	MouseIronsightAimAssist              *bool                                     `protobuf:"varint,85,opt,name=mouse_ironsight_aim_assist,json=mouseIronsightAimAssist" json:"mouse_ironsight_aim_assist,omitempty"`
	VehicleInputMode                     *uint32                                   `protobuf:"varint,86,opt,name=vehicle_input_mode,json=vehicleInputMode" json:"vehicle_input_mode,omitempty"`
	WeaponAimToggle                      *bool                                     `protobuf:"varint,87,opt,name=weapon_aim_toggle,json=weaponAimToggle" json:"weapon_aim_toggle,omitempty"`
	MantleRequiresButton                 *bool                                     `protobuf:"varint,88,opt,name=mantle_requires_button,json=mantleRequiresButton" json:"mantle_requires_button,omitempty"`
	FixedMinimapRotation                 *bool                                     `protobuf:"varint,89,opt,name=fixed_minimap_rotation,json=fixedMinimapRotation" json:"fixed_minimap_rotation,omitempty"`
	MapInvertPitch                       *bool                                     `protobuf:"varint,90,opt,name=map_invert_pitch,json=mapInvertPitch" json:"map_invert_pitch,omitempty"`
	MapInvertYaw                         *bool                                     `protobuf:"varint,91,opt,name=map_invert_yaw,json=mapInvertYaw" json:"map_invert_yaw,omitempty"`
	Difficulty                           *uint32                                   `protobuf:"varint,92,opt,name=difficulty" json:"difficulty,omitempty"`
	SwapDualWieldControls                *bool                                     `protobuf:"varint,93,opt,name=swap_dual_wield_controls,json=swapDualWieldControls" json:"swap_dual_wield_controls,omitempty"`
	BaseFov                              *float32                                  `protobuf:"fixed32,94,opt,name=base_fov,json=baseFov" json:"base_fov,omitempty"`
	CrosshairNeutralColorFrame           *uint32                                   `protobuf:"varint,95,opt,name=crosshair_neutral_color_frame,json=crosshairNeutralColorFrame" json:"crosshair_neutral_color_frame,omitempty"`
	CrosshairEnemyColorFrame             *uint32                                   `protobuf:"varint,96,opt,name=crosshair_enemy_color_frame,json=crosshairEnemyColorFrame" json:"crosshair_enemy_color_frame,omitempty"`
	CrosshairAllyColorFrame              *uint32                                   `protobuf:"varint,97,opt,name=crosshair_ally_color_frame,json=crosshairAllyColorFrame" json:"crosshair_ally_color_frame,omitempty"`
	EnableSubtitles                      *bool                                     `protobuf:"varint,98,opt,name=enable_subtitles,json=enableSubtitles" json:"enable_subtitles,omitempty"`
	EnableClosedCaptions                 *bool                                     `protobuf:"varint,99,opt,name=enable_closed_captions,json=enableClosedCaptions" json:"enable_closed_captions,omitempty"`
	LastStatusMenuPage                   *string                                   `protobuf:"bytes,100,opt,name=last_status_menu_page,json=lastStatusMenuPage" json:"last_status_menu_page,omitempty"`
	InventoryScreenLastFilter            []*OakProfileLastInventoryFilterInfo      `protobuf:"bytes,101,rep,name=inventory_screen_last_filter,json=inventoryScreenLastFilter" json:"inventory_screen_last_filter,omitempty"`
	TutorialInfo                         *OakProfileMenuTutorialInfo               `protobuf:"bytes,102,opt,name=tutorial_info,json=tutorialInfo" json:"tutorial_info,omitempty"`
	DefaultNetworkType                   *uint32                                   `protobuf:"varint,103,opt,name=default_network_type,json=defaultNetworkType" json:"default_network_type,omitempty"`
	DefaultInviteType                    *uint32                                   `protobuf:"varint,104,opt,name=default_invite_type,json=defaultInviteType" json:"default_invite_type,omitempty"`
	MatchmakingRegion                    *string                                   `protobuf:"bytes,105,opt,name=matchmaking_region,json=matchmakingRegion" json:"matchmaking_region,omitempty"`
	StreamingService                     *uint32                                   `protobuf:"varint,106,opt,name=streaming_service,json=streamingService" json:"streaming_service,omitempty"`
	MaxCachedFriendEvents                *int32                                    `protobuf:"varint,107,opt,name=max_cached_friend_events,json=maxCachedFriendEvents" json:"max_cached_friend_events,omitempty"`
	MaxCachedFriendStatuses              *int32                                    `protobuf:"varint,108,opt,name=max_cached_friend_statuses,json=maxCachedFriendStatuses" json:"max_cached_friend_statuses,omitempty"`
	FriendEvents                         []string                                  `protobuf:"bytes,109,rep,name=friend_events,json=friendEvents" json:"friend_events,omitempty"`
	FriendStatuses                       []string                                  `protobuf:"bytes,110,rep,name=friend_statuses,json=friendStatuses" json:"friend_statuses,omitempty"`
	LastWhisperFetchEventsTime           *int64                                    `protobuf:"varint,111,opt,name=last_whisper_fetch_events_time,json=lastWhisperFetchEventsTime" json:"last_whisper_fetch_events_time,omitempty"`
	LastWhisperFetchStatusesTime         *int64                                    `protobuf:"varint,112,opt,name=last_whisper_fetch_statuses_time,json=lastWhisperFetchStatusesTime" json:"last_whisper_fetch_statuses_time,omitempty"`
	RecentlyMetPlayers                   []string                                  `protobuf:"bytes,132,rep,name=recently_met_players,json=recentlyMetPlayers" json:"recently_met_players,omitempty"`
	FriendEncounters                     []*Profile_FriendEncountersEntry          `protobuf:"bytes,133,rep,name=friend_encounters,json=friendEncounters" json:"friend_encounters,omitempty"`
	MaxFriendEncounterSize               *int32                                    `protobuf:"varint,134,opt,name=max_friend_encounter_size,json=maxFriendEncounterSize" json:"max_friend_encounter_size,omitempty"`
	ProfileStatsData                     []*GameStatSaveGameData                   `protobuf:"bytes,135,rep,name=profile_stats_data,json=profileStatsData" json:"profile_stats_data,omitempty"`
	BankInventoryCategoryList            []*InventoryCategorySaveData              `protobuf:"bytes,136,rep,name=bank_inventory_category_list,json=bankInventoryCategoryList" json:"bank_inventory_category_list,omitempty"`
	BankInventoryList                    [][]byte                                  `protobuf:"bytes,137,rep,name=bank_inventory_list,json=bankInventoryList" json:"bank_inventory_list,omitempty"`
	LostLootInventoryList                [][]byte                                  `protobuf:"bytes,138,rep,name=lost_loot_inventory_list,json=lostLootInventoryList" json:"lost_loot_inventory_list,omitempty"`
	NpcMailItems                         []*OakMailItem                            `protobuf:"bytes,139,rep,name=npc_mail_items,json=npcMailItems" json:"npc_mail_items,omitempty"`
	MailGuids                            []string                                  `protobuf:"bytes,140,rep,name=mail_guids,json=mailGuids" json:"mail_guids,omitempty"`
	UnreadMailGuids                      []string                                  `protobuf:"bytes,141,rep,name=unread_mail_guids,json=unreadMailGuids" json:"unread_mail_guids,omitempty"`
	GearSoldByFriends                    []*GearSoldByFriendData                   `protobuf:"bytes,142,rep,name=gear_sold_by_friends,json=gearSoldByFriends" json:"gear_sold_by_friends,omitempty"`
	ProfileSduList                       []*OakSDUSaveGameData                     `protobuf:"bytes,143,rep,name=profile_sdu_list,json=profileSduList" json:"profile_sdu_list,omitempty"`
	UnlockedCustomizations               []*OakCustomizationSaveGameData           `protobuf:"bytes,144,rep,name=unlocked_customizations,json=unlockedCustomizations" json:"unlocked_customizations,omitempty"`
	UnlockedInventoryCustomizationParts  []*OakInventoryCustomizationPartInfo      `protobuf:"bytes,145,rep,name=unlocked_inventory_customization_parts,json=unlockedInventoryCustomizationParts" json:"unlocked_inventory_customization_parts,omitempty"`
	GuardianRank                         *GuardianRankProfileData                  `protobuf:"bytes,146,opt,name=guardian_rank,json=guardianRank" json:"guardian_rank,omitempty"`
	UnlockedCrewQuartersDecorations      []*CrewQuartersDecorationItemSaveGameData `protobuf:"bytes,147,rep,name=unlocked_crew_quarters_decorations,json=unlockedCrewQuartersDecorations" json:"unlocked_crew_quarters_decorations,omitempty"`
	UnlockedCrewQuartersRooms            []*CrewQuartersRoomItemSaveGameData       `protobuf:"bytes,148,rep,name=unlocked_crew_quarters_rooms,json=unlockedCrewQuartersRooms" json:"unlocked_crew_quarters_rooms,omitempty"`
	EnableMouseAcceleration              *bool                                     `protobuf:"varint,150,opt,name=enable_mouse_acceleration,json=enableMouseAcceleration" json:"enable_mouse_acceleration,omitempty"`
	EnableGamepadInput                   *bool                                     `protobuf:"varint,151,opt,name=enable_gamepad_input,json=enableGamepadInput" json:"enable_gamepad_input,omitempty"`
	UseClassicGamepadInput               *bool                                     `protobuf:"varint,152,opt,name=use_classic_gamepad_input,json=useClassicGamepadInput" json:"use_classic_gamepad_input,omitempty"`
	MasterVolume                         *float32                                  `protobuf:"fixed32,153,opt,name=master_volume,json=masterVolume" json:"master_volume,omitempty"`
	MonitorDisplayType                   *uint32                                   `protobuf:"varint,154,opt,name=monitor_display_type,json=monitorDisplayType" json:"monitor_display_type,omitempty"`
	GraphicsMode                         *uint32                                   `protobuf:"varint,155,opt,name=graphics_mode,json=graphicsMode" json:"graphics_mode,omitempty"`
	FrameRateLimit                       *uint32                                   `protobuf:"varint,156,opt,name=frame_rate_limit,json=frameRateLimit" json:"frame_rate_limit,omitempty"`
	BaseVehicleFov                       *float32                                  `protobuf:"fixed32,157,opt,name=base_vehicle_fov,json=baseVehicleFov" json:"base_vehicle_fov,omitempty"`
	GraphicsQuality                      *uint32                                   `protobuf:"varint,158,opt,name=graphics_quality,json=graphicsQuality" json:"graphics_quality,omitempty"`
	AnisotropicFiltering                 *uint32                                   `protobuf:"varint,159,opt,name=anisotropic_filtering,json=anisotropicFiltering" json:"anisotropic_filtering,omitempty"`
	ShadowQuality                        *uint32                                   `protobuf:"varint,160,opt,name=shadow_quality,json=shadowQuality" json:"shadow_quality,omitempty"`
	DisplayPerformanceStats              *uint32                                   `protobuf:"varint,161,opt,name=display_performance_stats,json=displayPerformanceStats" json:"display_performance_stats,omitempty"`
	TextureDetail                        *uint32                                   `protobuf:"varint,162,opt,name=texture_detail,json=textureDetail" json:"texture_detail,omitempty"`
	DrawDistance                         *uint32                                   `protobuf:"varint,163,opt,name=draw_distance,json=drawDistance" json:"draw_distance,omitempty"`
	Clutter                              *uint32                                   `protobuf:"varint,164,opt,name=clutter" json:"clutter,omitempty"`
	Tessellation                         *uint32                                   `protobuf:"varint,165,opt,name=tessellation" json:"tessellation,omitempty"`
	Foliage                              *uint32                                   `protobuf:"varint,166,opt,name=foliage" json:"foliage,omitempty"`
	FoliageShadows                       *bool                                     `protobuf:"varint,167,opt,name=foliage_shadows,json=foliageShadows" json:"foliage_shadows,omitempty"`
	PlanarReflections                    *bool                                     `protobuf:"varint,168,opt,name=planar_reflections,json=planarReflections" json:"planar_reflections,omitempty"`
	VolumetricFog                        *uint32                                   `protobuf:"varint,169,opt,name=volumetric_fog,json=volumetricFog" json:"volumetric_fog,omitempty"`
	ScreenSpaceReflections               *uint32                                   `protobuf:"varint,170,opt,name=screen_space_reflections,json=screenSpaceReflections" json:"screen_space_reflections,omitempty"`
	CharacterTextureDetail               *uint32                                   `protobuf:"varint,171,opt,name=character_texture_detail,json=characterTextureDetail" json:"character_texture_detail,omitempty"`
	CharacterDetail                      *uint32                                   `protobuf:"varint,172,opt,name=character_detail,json=characterDetail" json:"character_detail,omitempty"`
	AmbientOcclusionQuality              *uint32                                   `protobuf:"varint,173,opt,name=ambient_occlusion_quality,json=ambientOcclusionQuality" json:"ambient_occlusion_quality,omitempty"`
	ObjectMotionBlur                     *bool                                     `protobuf:"varint,174,opt,name=object_motion_blur,json=objectMotionBlur" json:"object_motion_blur,omitempty"`
	LensFlare                            *bool                                     `protobuf:"varint,175,opt,name=lens_flare,json=lensFlare" json:"lens_flare,omitempty"`
	CombatNumberLongFormat               *bool                                     `protobuf:"varint,176,opt,name=combat_number_long_format,json=combatNumberLongFormat" json:"combat_number_long_format,omitempty"`
	ShowMinimapLegendaries               *bool                                     `protobuf:"varint,177,opt,name=show_minimap_legendaries,json=showMinimapLegendaries" json:"show_minimap_legendaries,omitempty"`
	UsePlayerCallouts                    *bool                                     `protobuf:"varint,178,opt,name=use_player_callouts,json=usePlayerCallouts" json:"use_player_callouts,omitempty"`
	FriendEventNotificationLifetime      *uint32                                   `protobuf:"varint,179,opt,name=friend_event_notification_lifetime,json=friendEventNotificationLifetime" json:"friend_event_notification_lifetime,omitempty"`
	FriendEventNotificationFrequency     *uint32                                   `protobuf:"varint,180,opt,name=friend_event_notification_frequency,json=friendEventNotificationFrequency" json:"friend_event_notification_frequency,omitempty"`
	TradeRequestReceptionType            *uint32                                   `protobuf:"varint,181,opt,name=trade_request_reception_type,json=tradeRequestReceptionType" json:"trade_request_reception_type,omitempty"`
	HeadBobScale                         *float32                                  `protobuf:"fixed32,182,opt,name=head_bob_scale,json=headBobScale" json:"head_bob_scale,omitempty"`
	HasSeenFirstBoot                     *bool                                     `protobuf:"varint,184,opt,name=has_seen_first_boot,json=hasSeenFirstBoot" json:"has_seen_first_boot,omitempty"`
	SubsCcSize                           *float32                                  `protobuf:"fixed32,189,opt,name=subs_cc_size,json=subsCcSize" json:"subs_cc_size,omitempty"`
	CcSubsBackgroundOpacity              *float32                                  `protobuf:"fixed32,190,opt,name=cc_subs_background_opacity,json=ccSubsBackgroundOpacity" json:"cc_subs_background_opacity,omitempty"`
	WalkingButtonScheme                  *uint32                                   `protobuf:"varint,191,opt,name=walking_button_scheme,json=walkingButtonScheme" json:"walking_button_scheme,omitempty"`
	DrivingButtonScheme                  *uint32                                   `protobuf:"varint,192,opt,name=driving_button_scheme,json=drivingButtonScheme" json:"driving_button_scheme,omitempty"`
	GlyphMode                            *uint32                                   `protobuf:"varint,193,opt,name=glyph_mode,json=glyphMode" json:"glyph_mode,omitempty"`
	Use_MPH                              *bool                                     `protobuf:"varint,194,opt,name=use_MPH,json=useMPH" json:"use_MPH,omitempty"`
	RegisteredDownloadableEntitlements   []*RegisteredDownloadableEntitlements     `protobuf:"bytes,195,rep,name=registered_downloadable_entitlements,json=registeredDownloadableEntitlements" json:"registered_downloadable_entitlements,omitempty"`
	SeenNewsItems                        []string                                  `protobuf:"bytes,196,rep,name=seen_news_items,json=seenNewsItems" json:"seen_news_items,omitempty"`
	AutoCenteringEnabled                 *bool                                     `protobuf:"varint,197,opt,name=auto_centering_enabled,json=autoCenteringEnabled" json:"auto_centering_enabled,omitempty"`
	IncreasedChanceForSubscribers        *bool                                     `protobuf:"varint,198,opt,name=increased_chance_for_subscribers,json=increasedChanceForSubscribers" json:"increased_chance_for_subscribers,omitempty"`
	RareChestEventEnabled                *bool                                     `protobuf:"varint,199,opt,name=rare_chest_event_enabled,json=rareChestEventEnabled" json:"rare_chest_event_enabled,omitempty"`
	BadassEventEnabled                   *bool                                     `protobuf:"varint,200,opt,name=badass_event_enabled,json=badassEventEnabled" json:"badass_event_enabled,omitempty"`
	PinataEventEnabled                   *bool                                     `protobuf:"varint,201,opt,name=pinata_event_enabled,json=pinataEventEnabled" json:"pinata_event_enabled,omitempty"`
	MinTimeBetweenBadassEvents           *int32                                    `protobuf:"varint,202,opt,name=min_time_between_badass_events,json=minTimeBetweenBadassEvents" json:"min_time_between_badass_events,omitempty"`
	HudScaleMultiplier                   *float32                                  `protobuf:"fixed32,203,opt,name=hud_scale_multiplier,json=hudScaleMultiplier" json:"hud_scale_multiplier,omitempty"`
	DisableSpatialAudio                  *bool                                     `protobuf:"varint,204,opt,name=disable_spatial_audio,json=disableSpatialAudio" json:"disable_spatial_audio,omitempty"`
	XXX_NoUnkeyedLiteral                 struct{}                                  `json:"-"`
	XXX_unrecognized                     []byte                                    `json:"-"`
	XXX_sizecache                        int32                                     `json:"-"`
}

func (m *Profile) Reset()         { *m = Profile{} }
func (m *Profile) String() string { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()    {}
func (*Profile) Descriptor() ([]byte, []int) {
	return fileDescriptor_08b72a8408a178a8, []int{16}
}

func (m *Profile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Profile.Unmarshal(m, b)
}
func (m *Profile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Profile.Marshal(b, m, deterministic)
}
func (m *Profile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Profile.Merge(m, src)
}
func (m *Profile) XXX_Size() int {
	return xxx_messageInfo_Profile.Size(m)
}
func (m *Profile) XXX_DiscardUnknown() {
	xxx_messageInfo_Profile.DiscardUnknown(m)
}

var xxx_messageInfo_Profile proto.InternalMessageInfo

func (m *Profile) GetEnableAimAssist() bool {
	if m != nil && m.EnableAimAssist != nil {
		return *m.EnableAimAssist
	}
	return false
}

func (m *Profile) GetGamepadInvertLook() bool {
	if m != nil && m.GamepadInvertLook != nil {
		return *m.GamepadInvertLook
	}
	return false
}

func (m *Profile) GetGamepadInvertTurn() bool {
	if m != nil && m.GamepadInvertTurn != nil {
		return *m.GamepadInvertTurn
	}
	return false
}

func (m *Profile) GetGamepadInvertMove() bool {
	if m != nil && m.GamepadInvertMove != nil {
		return *m.GamepadInvertMove
	}
	return false
}

func (m *Profile) GetGamepadInvertStrafe() bool {
	if m != nil && m.GamepadInvertStrafe != nil {
		return *m.GamepadInvertStrafe
	}
	return false
}

func (m *Profile) GetEnableVibration() bool {
	if m != nil && m.EnableVibration != nil {
		return *m.EnableVibration
	}
	return false
}

func (m *Profile) GetInvertMousePitch() bool {
	if m != nil && m.InvertMousePitch != nil {
		return *m.InvertMousePitch
	}
	return false
}

func (m *Profile) GetEnableMouseSmoothing() bool {
	if m != nil && m.EnableMouseSmoothing != nil {
		return *m.EnableMouseSmoothing
	}
	return false
}

func (m *Profile) GetMouseScale() float32 {
	if m != nil && m.MouseScale != nil {
		return *m.MouseScale
	}
	return 0
}

func (m *Profile) GetShowDamageNumbers() bool {
	if m != nil && m.ShowDamageNumbers != nil {
		return *m.ShowDamageNumbers
	}
	return false
}

func (m *Profile) GetShowDamageNumberIcons() bool {
	if m != nil && m.ShowDamageNumberIcons != nil {
		return *m.ShowDamageNumberIcons
	}
	return false
}

func (m *Profile) GetEnableTrainingMessages() bool {
	if m != nil && m.EnableTrainingMessages != nil {
		return *m.EnableTrainingMessages
	}
	return false
}

func (m *Profile) GetShowTextChat() bool {
	if m != nil && m.ShowTextChat != nil {
		return *m.ShowTextChat
	}
	return false
}

func (m *Profile) GetCenterCrosshair() bool {
	if m != nil && m.CenterCrosshair != nil {
		return *m.CenterCrosshair
	}
	return false
}

func (m *Profile) GetToggleSprint() bool {
	if m != nil && m.ToggleSprint != nil {
		return *m.ToggleSprint
	}
	return false
}

func (m *Profile) GetToggleCrouch() bool {
	if m != nil && m.ToggleCrouch != nil {
		return *m.ToggleCrouch
	}
	return false
}

func (m *Profile) GetCensorContent() bool {
	if m != nil && m.CensorContent != nil {
		return *m.CensorContent
	}
	return false
}

func (m *Profile) GetMusicVolume() float32 {
	if m != nil && m.MusicVolume != nil {
		return *m.MusicVolume
	}
	return 0
}

func (m *Profile) GetSoundEffectsVolume() float32 {
	if m != nil && m.SoundEffectsVolume != nil {
		return *m.SoundEffectsVolume
	}
	return 0
}

func (m *Profile) GetVoVolume() float32 {
	if m != nil && m.VoVolume != nil {
		return *m.VoVolume
	}
	return 0
}

func (m *Profile) GetVoiceVolume() float32 {
	if m != nil && m.VoiceVolume != nil {
		return *m.VoiceVolume
	}
	return 0
}

func (m *Profile) GetEnableOptionalVo() bool {
	if m != nil && m.EnableOptionalVo != nil {
		return *m.EnableOptionalVo
	}
	return false
}

func (m *Profile) GetPushToTalk() bool {
	if m != nil && m.PushToTalk != nil {
		return *m.PushToTalk
	}
	return false
}

func (m *Profile) GetEnableControllerAudio() bool {
	if m != nil && m.EnableControllerAudio != nil {
		return *m.EnableControllerAudio
	}
	return false
}

func (m *Profile) GetSpeakerAngleFront() float32 {
	if m != nil && m.SpeakerAngleFront != nil {
		return *m.SpeakerAngleFront
	}
	return 0
}

func (m *Profile) GetSpeakerAngleSide() float32 {
	if m != nil && m.SpeakerAngleSide != nil {
		return *m.SpeakerAngleSide
	}
	return 0
}

func (m *Profile) GetSpeakerAngleBack() float32 {
	if m != nil && m.SpeakerAngleBack != nil {
		return *m.SpeakerAngleBack
	}
	return 0
}

func (m *Profile) GetSpeakerSetup() uint32 {
	if m != nil && m.SpeakerSetup != nil {
		return *m.SpeakerSetup
	}
	return 0
}

func (m *Profile) GetMuteAudioOnFocusLoss() bool {
	if m != nil && m.MuteAudioOnFocusLoss != nil {
		return *m.MuteAudioOnFocusLoss
	}
	return false
}

func (m *Profile) GetHideStrictNatHelpDialog() bool {
	if m != nil && m.HideStrictNatHelpDialog != nil {
		return *m.HideStrictNatHelpDialog
	}
	return false
}

func (m *Profile) GetPlayerInputBindings() *PlayerInputBindings {
	if m != nil {
		return m.PlayerInputBindings
	}
	return nil
}

func (m *Profile) GetNewsHashes() []uint32 {
	if m != nil {
		return m.NewsHashes
	}
	return nil
}

func (m *Profile) GetLastUsedSavegameId() uint32 {
	if m != nil && m.LastUsedSavegameId != nil {
		return *m.LastUsedSavegameId
	}
	return 0
}

func (m *Profile) GetGamepadHipSensitivityLevel() int32 {
	if m != nil && m.GamepadHipSensitivityLevel != nil {
		return *m.GamepadHipSensitivityLevel
	}
	return 0
}

func (m *Profile) GetGamepadZoomedSensitivityLevel() int32 {
	if m != nil && m.GamepadZoomedSensitivityLevel != nil {
		return *m.GamepadZoomedSensitivityLevel
	}
	return 0
}

func (m *Profile) GetGamepadVehicleSensitivityLevel() int32 {
	if m != nil && m.GamepadVehicleSensitivityLevel != nil {
		return *m.GamepadVehicleSensitivityLevel
	}
	return 0
}

func (m *Profile) GetGamepadMovementDeadZoneX() float32 {
	if m != nil && m.GamepadMovementDeadZoneX != nil {
		return *m.GamepadMovementDeadZoneX
	}
	return 0
}

func (m *Profile) GetGamepadMovementDeadZoneY() float32 {
	if m != nil && m.GamepadMovementDeadZoneY != nil {
		return *m.GamepadMovementDeadZoneY
	}
	return 0
}

func (m *Profile) GetGamepadLookDeadZoneInnerX() float32 {
	if m != nil && m.GamepadLookDeadZoneInnerX != nil {
		return *m.GamepadLookDeadZoneInnerX
	}
	return 0
}

func (m *Profile) GetGamepadLookDeadZoneOuterX() float32 {
	if m != nil && m.GamepadLookDeadZoneOuterX != nil {
		return *m.GamepadLookDeadZoneOuterX
	}
	return 0
}

func (m *Profile) GetGamepadLookDeadZoneInnerY() float32 {
	if m != nil && m.GamepadLookDeadZoneInnerY != nil {
		return *m.GamepadLookDeadZoneInnerY
	}
	return 0
}

func (m *Profile) GetGamepadLookDeadZoneOuterY() float32 {
	if m != nil && m.GamepadLookDeadZoneOuterY != nil {
		return *m.GamepadLookDeadZoneOuterY
	}
	return 0
}

func (m *Profile) GetGamepadVehicleMovementDeadZoneX() float32 {
	if m != nil && m.GamepadVehicleMovementDeadZoneX != nil {
		return *m.GamepadVehicleMovementDeadZoneX
	}
	return 0
}

func (m *Profile) GetGamepadVehicleMovementDeadZoneY() float32 {
	if m != nil && m.GamepadVehicleMovementDeadZoneY != nil {
		return *m.GamepadVehicleMovementDeadZoneY
	}
	return 0
}

func (m *Profile) GetGamepadVehicleLookDeadZoneInnerX() float32 {
	if m != nil && m.GamepadVehicleLookDeadZoneInnerX != nil {
		return *m.GamepadVehicleLookDeadZoneInnerX
	}
	return 0
}

func (m *Profile) GetGamepadVehicleLookDeadZoneOuterX() float32 {
	if m != nil && m.GamepadVehicleLookDeadZoneOuterX != nil {
		return *m.GamepadVehicleLookDeadZoneOuterX
	}
	return 0
}

func (m *Profile) GetGamepadVehicleLookDeadZoneInnerY() float32 {
	if m != nil && m.GamepadVehicleLookDeadZoneInnerY != nil {
		return *m.GamepadVehicleLookDeadZoneInnerY
	}
	return 0
}

func (m *Profile) GetGamepadVehicleLookDeadZoneOuterY() float32 {
	if m != nil && m.GamepadVehicleLookDeadZoneOuterY != nil {
		return *m.GamepadVehicleLookDeadZoneOuterY
	}
	return 0
}

func (m *Profile) GetGamepadLeftDeadZoneInner() float32 {
	if m != nil && m.GamepadLeftDeadZoneInner != nil {
		return *m.GamepadLeftDeadZoneInner
	}
	return 0
}

func (m *Profile) GetGamepadLeftDeadZoneOuter() float32 {
	if m != nil && m.GamepadLeftDeadZoneOuter != nil {
		return *m.GamepadLeftDeadZoneOuter
	}
	return 0
}

func (m *Profile) GetGamepadRightDeadZoneInner() float32 {
	if m != nil && m.GamepadRightDeadZoneInner != nil {
		return *m.GamepadRightDeadZoneInner
	}
	return 0
}

func (m *Profile) GetGamepadRightDeadZoneOuter() float32 {
	if m != nil && m.GamepadRightDeadZoneOuter != nil {
		return *m.GamepadRightDeadZoneOuter
	}
	return 0
}

func (m *Profile) GetGamepadLookAxialDeadZoneScale() float32 {
	if m != nil && m.GamepadLookAxialDeadZoneScale != nil {
		return *m.GamepadLookAxialDeadZoneScale
	}
	return 0
}

func (m *Profile) GetGamepadMoveAxialDeadZoneScale() float32 {
	if m != nil && m.GamepadMoveAxialDeadZoneScale != nil {
		return *m.GamepadMoveAxialDeadZoneScale
	}
	return 0
}

func (m *Profile) GetGamepadUseAdvancedHipAimSettings() bool {
	if m != nil && m.GamepadUseAdvancedHipAimSettings != nil {
		return *m.GamepadUseAdvancedHipAimSettings
	}
	return false
}

func (m *Profile) GetGamepadUseAdvancedZoomedAimSettings() bool {
	if m != nil && m.GamepadUseAdvancedZoomedAimSettings != nil {
		return *m.GamepadUseAdvancedZoomedAimSettings
	}
	return false
}

func (m *Profile) GetGamepadUseAdvancedVehicleAimSettings() bool {
	if m != nil && m.GamepadUseAdvancedVehicleAimSettings != nil {
		return *m.GamepadUseAdvancedVehicleAimSettings
	}
	return false
}

func (m *Profile) GetGamepadHipYawRate() float32 {
	if m != nil && m.GamepadHipYawRate != nil {
		return *m.GamepadHipYawRate
	}
	return 0
}

func (m *Profile) GetGamepadHipPitchRate() float32 {
	if m != nil && m.GamepadHipPitchRate != nil {
		return *m.GamepadHipPitchRate
	}
	return 0
}

func (m *Profile) GetGamepadHipExtraYaw() float32 {
	if m != nil && m.GamepadHipExtraYaw != nil {
		return *m.GamepadHipExtraYaw
	}
	return 0
}

func (m *Profile) GetGamepadHipExtraPitch() float32 {
	if m != nil && m.GamepadHipExtraPitch != nil {
		return *m.GamepadHipExtraPitch
	}
	return 0
}

func (m *Profile) GetGamepadHipRampUpTime() float32 {
	if m != nil && m.GamepadHipRampUpTime != nil {
		return *m.GamepadHipRampUpTime
	}
	return 0
}

func (m *Profile) GetGamepadHipRampUpDelay() float32 {
	if m != nil && m.GamepadHipRampUpDelay != nil {
		return *m.GamepadHipRampUpDelay
	}
	return 0
}

func (m *Profile) GetGamepadZoomedYawRate() float32 {
	if m != nil && m.GamepadZoomedYawRate != nil {
		return *m.GamepadZoomedYawRate
	}
	return 0
}

func (m *Profile) GetGamepadZoomedPitchRate() float32 {
	if m != nil && m.GamepadZoomedPitchRate != nil {
		return *m.GamepadZoomedPitchRate
	}
	return 0
}

func (m *Profile) GetGamepadZoomedExtraYaw() float32 {
	if m != nil && m.GamepadZoomedExtraYaw != nil {
		return *m.GamepadZoomedExtraYaw
	}
	return 0
}

func (m *Profile) GetGamepadZoomedExtraPitch() float32 {
	if m != nil && m.GamepadZoomedExtraPitch != nil {
		return *m.GamepadZoomedExtraPitch
	}
	return 0
}

func (m *Profile) GetGamepadZoomedRampUpTime() float32 {
	if m != nil && m.GamepadZoomedRampUpTime != nil {
		return *m.GamepadZoomedRampUpTime
	}
	return 0
}

func (m *Profile) GetGamepadZoomedRampUpDelay() float32 {
	if m != nil && m.GamepadZoomedRampUpDelay != nil {
		return *m.GamepadZoomedRampUpDelay
	}
	return 0
}

func (m *Profile) GetGamepadVehicleYawRate() float32 {
	if m != nil && m.GamepadVehicleYawRate != nil {
		return *m.GamepadVehicleYawRate
	}
	return 0
}

func (m *Profile) GetGamepadVehiclePitchRate() float32 {
	if m != nil && m.GamepadVehiclePitchRate != nil {
		return *m.GamepadVehiclePitchRate
	}
	return 0
}

func (m *Profile) GetGamepadVehicleExtraYaw() float32 {
	if m != nil && m.GamepadVehicleExtraYaw != nil {
		return *m.GamepadVehicleExtraYaw
	}
	return 0
}

func (m *Profile) GetGamepadVehicleExtraPitch() float32 {
	if m != nil && m.GamepadVehicleExtraPitch != nil {
		return *m.GamepadVehicleExtraPitch
	}
	return 0
}

func (m *Profile) GetGamepadVehicleRampUpTime() float32 {
	if m != nil && m.GamepadVehicleRampUpTime != nil {
		return *m.GamepadVehicleRampUpTime
	}
	return 0
}

func (m *Profile) GetGamepadVehicleRampUpDelay() float32 {
	if m != nil && m.GamepadVehicleRampUpDelay != nil {
		return *m.GamepadVehicleRampUpDelay
	}
	return 0
}

func (m *Profile) GetIronsightAimAssist() bool {
	if m != nil && m.IronsightAimAssist != nil {
		return *m.IronsightAimAssist
	}
	return false
}

func (m *Profile) GetWalkingJoystickScheme() uint32 {
	if m != nil && m.WalkingJoystickScheme != nil {
		return *m.WalkingJoystickScheme
	}
	return 0
}

func (m *Profile) GetDrivingJoystickScheme() uint32 {
	if m != nil && m.DrivingJoystickScheme != nil {
		return *m.DrivingJoystickScheme
	}
	return 0
}

func (m *Profile) GetMouseAdsScale() float32 {
	if m != nil && m.MouseAdsScale != nil {
		return *m.MouseAdsScale
	}
	return 0
}

func (m *Profile) GetMouseVehicleScale() float32 {
	if m != nil && m.MouseVehicleScale != nil {
		return *m.MouseVehicleScale
	}
	return 0
}

func (m *Profile) GetMouseIronsightAimAssist() bool {
	if m != nil && m.MouseIronsightAimAssist != nil {
		return *m.MouseIronsightAimAssist
	}
	return false
}

func (m *Profile) GetVehicleInputMode() uint32 {
	if m != nil && m.VehicleInputMode != nil {
		return *m.VehicleInputMode
	}
	return 0
}

func (m *Profile) GetWeaponAimToggle() bool {
	if m != nil && m.WeaponAimToggle != nil {
		return *m.WeaponAimToggle
	}
	return false
}

func (m *Profile) GetMantleRequiresButton() bool {
	if m != nil && m.MantleRequiresButton != nil {
		return *m.MantleRequiresButton
	}
	return false
}

func (m *Profile) GetFixedMinimapRotation() bool {
	if m != nil && m.FixedMinimapRotation != nil {
		return *m.FixedMinimapRotation
	}
	return false
}

func (m *Profile) GetMapInvertPitch() bool {
	if m != nil && m.MapInvertPitch != nil {
		return *m.MapInvertPitch
	}
	return false
}

func (m *Profile) GetMapInvertYaw() bool {
	if m != nil && m.MapInvertYaw != nil {
		return *m.MapInvertYaw
	}
	return false
}

func (m *Profile) GetDifficulty() uint32 {
	if m != nil && m.Difficulty != nil {
		return *m.Difficulty
	}
	return 0
}

func (m *Profile) GetSwapDualWieldControls() bool {
	if m != nil && m.SwapDualWieldControls != nil {
		return *m.SwapDualWieldControls
	}
	return false
}

func (m *Profile) GetBaseFov() float32 {
	if m != nil && m.BaseFov != nil {
		return *m.BaseFov
	}
	return 0
}

func (m *Profile) GetCrosshairNeutralColorFrame() uint32 {
	if m != nil && m.CrosshairNeutralColorFrame != nil {
		return *m.CrosshairNeutralColorFrame
	}
	return 0
}

func (m *Profile) GetCrosshairEnemyColorFrame() uint32 {
	if m != nil && m.CrosshairEnemyColorFrame != nil {
		return *m.CrosshairEnemyColorFrame
	}
	return 0
}

func (m *Profile) GetCrosshairAllyColorFrame() uint32 {
	if m != nil && m.CrosshairAllyColorFrame != nil {
		return *m.CrosshairAllyColorFrame
	}
	return 0
}

func (m *Profile) GetEnableSubtitles() bool {
	if m != nil && m.EnableSubtitles != nil {
		return *m.EnableSubtitles
	}
	return false
}

func (m *Profile) GetEnableClosedCaptions() bool {
	if m != nil && m.EnableClosedCaptions != nil {
		return *m.EnableClosedCaptions
	}
	return false
}

func (m *Profile) GetLastStatusMenuPage() string {
	if m != nil && m.LastStatusMenuPage != nil {
		return *m.LastStatusMenuPage
	}
	return ""
}

func (m *Profile) GetInventoryScreenLastFilter() []*OakProfileLastInventoryFilterInfo {
	if m != nil {
		return m.InventoryScreenLastFilter
	}
	return nil
}

func (m *Profile) GetTutorialInfo() *OakProfileMenuTutorialInfo {
	if m != nil {
		return m.TutorialInfo
	}
	return nil
}

func (m *Profile) GetDefaultNetworkType() uint32 {
	if m != nil && m.DefaultNetworkType != nil {
		return *m.DefaultNetworkType
	}
	return 0
}

func (m *Profile) GetDefaultInviteType() uint32 {
	if m != nil && m.DefaultInviteType != nil {
		return *m.DefaultInviteType
	}
	return 0
}

func (m *Profile) GetMatchmakingRegion() string {
	if m != nil && m.MatchmakingRegion != nil {
		return *m.MatchmakingRegion
	}
	return ""
}

func (m *Profile) GetStreamingService() uint32 {
	if m != nil && m.StreamingService != nil {
		return *m.StreamingService
	}
	return 0
}

func (m *Profile) GetMaxCachedFriendEvents() int32 {
	if m != nil && m.MaxCachedFriendEvents != nil {
		return *m.MaxCachedFriendEvents
	}
	return 0
}

func (m *Profile) GetMaxCachedFriendStatuses() int32 {
	if m != nil && m.MaxCachedFriendStatuses != nil {
		return *m.MaxCachedFriendStatuses
	}
	return 0
}

func (m *Profile) GetFriendEvents() []string {
	if m != nil {
		return m.FriendEvents
	}
	return nil
}

func (m *Profile) GetFriendStatuses() []string {
	if m != nil {
		return m.FriendStatuses
	}
	return nil
}

func (m *Profile) GetLastWhisperFetchEventsTime() int64 {
	if m != nil && m.LastWhisperFetchEventsTime != nil {
		return *m.LastWhisperFetchEventsTime
	}
	return 0
}

func (m *Profile) GetLastWhisperFetchStatusesTime() int64 {
	if m != nil && m.LastWhisperFetchStatusesTime != nil {
		return *m.LastWhisperFetchStatusesTime
	}
	return 0
}

func (m *Profile) GetRecentlyMetPlayers() []string {
	if m != nil {
		return m.RecentlyMetPlayers
	}
	return nil
}

func (m *Profile) GetFriendEncounters() []*Profile_FriendEncountersEntry {
	if m != nil {
		return m.FriendEncounters
	}
	return nil
}

func (m *Profile) GetMaxFriendEncounterSize() int32 {
	if m != nil && m.MaxFriendEncounterSize != nil {
		return *m.MaxFriendEncounterSize
	}
	return 0
}

func (m *Profile) GetProfileStatsData() []*GameStatSaveGameData {
	if m != nil {
		return m.ProfileStatsData
	}
	return nil
}

func (m *Profile) GetBankInventoryCategoryList() []*InventoryCategorySaveData {
	if m != nil {
		return m.BankInventoryCategoryList
	}
	return nil
}

func (m *Profile) GetBankInventoryList() [][]byte {
	if m != nil {
		return m.BankInventoryList
	}
	return nil
}

func (m *Profile) GetLostLootInventoryList() [][]byte {
	if m != nil {
		return m.LostLootInventoryList
	}
	return nil
}

func (m *Profile) GetNpcMailItems() []*OakMailItem {
	if m != nil {
		return m.NpcMailItems
	}
	return nil
}

func (m *Profile) GetMailGuids() []string {
	if m != nil {
		return m.MailGuids
	}
	return nil
}

func (m *Profile) GetUnreadMailGuids() []string {
	if m != nil {
		return m.UnreadMailGuids
	}
	return nil
}

func (m *Profile) GetGearSoldByFriends() []*GearSoldByFriendData {
	if m != nil {
		return m.GearSoldByFriends
	}
	return nil
}

func (m *Profile) GetProfileSduList() []*OakSDUSaveGameData {
	if m != nil {
		return m.ProfileSduList
	}
	return nil
}

func (m *Profile) GetUnlockedCustomizations() []*OakCustomizationSaveGameData {
	if m != nil {
		return m.UnlockedCustomizations
	}
	return nil
}

func (m *Profile) GetUnlockedInventoryCustomizationParts() []*OakInventoryCustomizationPartInfo {
	if m != nil {
		return m.UnlockedInventoryCustomizationParts
	}
	return nil
}

func (m *Profile) GetGuardianRank() *GuardianRankProfileData {
	if m != nil {
		return m.GuardianRank
	}
	return nil
}

func (m *Profile) GetUnlockedCrewQuartersDecorations() []*CrewQuartersDecorationItemSaveGameData {
	if m != nil {
		return m.UnlockedCrewQuartersDecorations
	}
	return nil
}

func (m *Profile) GetUnlockedCrewQuartersRooms() []*CrewQuartersRoomItemSaveGameData {
	if m != nil {
		return m.UnlockedCrewQuartersRooms
	}
	return nil
}

func (m *Profile) GetEnableMouseAcceleration() bool {
	if m != nil && m.EnableMouseAcceleration != nil {
		return *m.EnableMouseAcceleration
	}
	return false
}

func (m *Profile) GetEnableGamepadInput() bool {
	if m != nil && m.EnableGamepadInput != nil {
		return *m.EnableGamepadInput
	}
	return false
}

func (m *Profile) GetUseClassicGamepadInput() bool {
	if m != nil && m.UseClassicGamepadInput != nil {
		return *m.UseClassicGamepadInput
	}
	return false
}

func (m *Profile) GetMasterVolume() float32 {
	if m != nil && m.MasterVolume != nil {
		return *m.MasterVolume
	}
	return 0
}

func (m *Profile) GetMonitorDisplayType() uint32 {
	if m != nil && m.MonitorDisplayType != nil {
		return *m.MonitorDisplayType
	}
	return 0
}

func (m *Profile) GetGraphicsMode() uint32 {
	if m != nil && m.GraphicsMode != nil {
		return *m.GraphicsMode
	}
	return 0
}

func (m *Profile) GetFrameRateLimit() uint32 {
	if m != nil && m.FrameRateLimit != nil {
		return *m.FrameRateLimit
	}
	return 0
}

func (m *Profile) GetBaseVehicleFov() float32 {
	if m != nil && m.BaseVehicleFov != nil {
		return *m.BaseVehicleFov
	}
	return 0
}

func (m *Profile) GetGraphicsQuality() uint32 {
	if m != nil && m.GraphicsQuality != nil {
		return *m.GraphicsQuality
	}
	return 0
}

func (m *Profile) GetAnisotropicFiltering() uint32 {
	if m != nil && m.AnisotropicFiltering != nil {
		return *m.AnisotropicFiltering
	}
	return 0
}

func (m *Profile) GetShadowQuality() uint32 {
	if m != nil && m.ShadowQuality != nil {
		return *m.ShadowQuality
	}
	return 0
}

func (m *Profile) GetDisplayPerformanceStats() uint32 {
	if m != nil && m.DisplayPerformanceStats != nil {
		return *m.DisplayPerformanceStats
	}
	return 0
}

func (m *Profile) GetTextureDetail() uint32 {
	if m != nil && m.TextureDetail != nil {
		return *m.TextureDetail
	}
	return 0
}

func (m *Profile) GetDrawDistance() uint32 {
	if m != nil && m.DrawDistance != nil {
		return *m.DrawDistance
	}
	return 0
}

func (m *Profile) GetClutter() uint32 {
	if m != nil && m.Clutter != nil {
		return *m.Clutter
	}
	return 0
}

func (m *Profile) GetTessellation() uint32 {
	if m != nil && m.Tessellation != nil {
		return *m.Tessellation
	}
	return 0
}

func (m *Profile) GetFoliage() uint32 {
	if m != nil && m.Foliage != nil {
		return *m.Foliage
	}
	return 0
}

func (m *Profile) GetFoliageShadows() bool {
	if m != nil && m.FoliageShadows != nil {
		return *m.FoliageShadows
	}
	return false
}

func (m *Profile) GetPlanarReflections() bool {
	if m != nil && m.PlanarReflections != nil {
		return *m.PlanarReflections
	}
	return false
}

func (m *Profile) GetVolumetricFog() uint32 {
	if m != nil && m.VolumetricFog != nil {
		return *m.VolumetricFog
	}
	return 0
}

func (m *Profile) GetScreenSpaceReflections() uint32 {
	if m != nil && m.ScreenSpaceReflections != nil {
		return *m.ScreenSpaceReflections
	}
	return 0
}

func (m *Profile) GetCharacterTextureDetail() uint32 {
	if m != nil && m.CharacterTextureDetail != nil {
		return *m.CharacterTextureDetail
	}
	return 0
}

func (m *Profile) GetCharacterDetail() uint32 {
	if m != nil && m.CharacterDetail != nil {
		return *m.CharacterDetail
	}
	return 0
}

func (m *Profile) GetAmbientOcclusionQuality() uint32 {
	if m != nil && m.AmbientOcclusionQuality != nil {
		return *m.AmbientOcclusionQuality
	}
	return 0
}

func (m *Profile) GetObjectMotionBlur() bool {
	if m != nil && m.ObjectMotionBlur != nil {
		return *m.ObjectMotionBlur
	}
	return false
}

func (m *Profile) GetLensFlare() bool {
	if m != nil && m.LensFlare != nil {
		return *m.LensFlare
	}
	return false
}

func (m *Profile) GetCombatNumberLongFormat() bool {
	if m != nil && m.CombatNumberLongFormat != nil {
		return *m.CombatNumberLongFormat
	}
	return false
}

func (m *Profile) GetShowMinimapLegendaries() bool {
	if m != nil && m.ShowMinimapLegendaries != nil {
		return *m.ShowMinimapLegendaries
	}
	return false
}

func (m *Profile) GetUsePlayerCallouts() bool {
	if m != nil && m.UsePlayerCallouts != nil {
		return *m.UsePlayerCallouts
	}
	return false
}

func (m *Profile) GetFriendEventNotificationLifetime() uint32 {
	if m != nil && m.FriendEventNotificationLifetime != nil {
		return *m.FriendEventNotificationLifetime
	}
	return 0
}

func (m *Profile) GetFriendEventNotificationFrequency() uint32 {
	if m != nil && m.FriendEventNotificationFrequency != nil {
		return *m.FriendEventNotificationFrequency
	}
	return 0
}

func (m *Profile) GetTradeRequestReceptionType() uint32 {
	if m != nil && m.TradeRequestReceptionType != nil {
		return *m.TradeRequestReceptionType
	}
	return 0
}

func (m *Profile) GetHeadBobScale() float32 {
	if m != nil && m.HeadBobScale != nil {
		return *m.HeadBobScale
	}
	return 0
}

func (m *Profile) GetHasSeenFirstBoot() bool {
	if m != nil && m.HasSeenFirstBoot != nil {
		return *m.HasSeenFirstBoot
	}
	return false
}

func (m *Profile) GetSubsCcSize() float32 {
	if m != nil && m.SubsCcSize != nil {
		return *m.SubsCcSize
	}
	return 0
}

func (m *Profile) GetCcSubsBackgroundOpacity() float32 {
	if m != nil && m.CcSubsBackgroundOpacity != nil {
		return *m.CcSubsBackgroundOpacity
	}
	return 0
}

func (m *Profile) GetWalkingButtonScheme() uint32 {
	if m != nil && m.WalkingButtonScheme != nil {
		return *m.WalkingButtonScheme
	}
	return 0
}

func (m *Profile) GetDrivingButtonScheme() uint32 {
	if m != nil && m.DrivingButtonScheme != nil {
		return *m.DrivingButtonScheme
	}
	return 0
}

func (m *Profile) GetGlyphMode() uint32 {
	if m != nil && m.GlyphMode != nil {
		return *m.GlyphMode
	}
	return 0
}

func (m *Profile) GetUse_MPH() bool {
	if m != nil && m.Use_MPH != nil {
		return *m.Use_MPH
	}
	return false
}

func (m *Profile) GetRegisteredDownloadableEntitlements() []*RegisteredDownloadableEntitlements {
	if m != nil {
		return m.RegisteredDownloadableEntitlements
	}
	return nil
}

func (m *Profile) GetSeenNewsItems() []string {
	if m != nil {
		return m.SeenNewsItems
	}
	return nil
}

func (m *Profile) GetAutoCenteringEnabled() bool {
	if m != nil && m.AutoCenteringEnabled != nil {
		return *m.AutoCenteringEnabled
	}
	return false
}

func (m *Profile) GetIncreasedChanceForSubscribers() bool {
	if m != nil && m.IncreasedChanceForSubscribers != nil {
		return *m.IncreasedChanceForSubscribers
	}
	return false
}

func (m *Profile) GetRareChestEventEnabled() bool {
	if m != nil && m.RareChestEventEnabled != nil {
		return *m.RareChestEventEnabled
	}
	return false
}

func (m *Profile) GetBadassEventEnabled() bool {
	if m != nil && m.BadassEventEnabled != nil {
		return *m.BadassEventEnabled
	}
	return false
}

func (m *Profile) GetPinataEventEnabled() bool {
	if m != nil && m.PinataEventEnabled != nil {
		return *m.PinataEventEnabled
	}
	return false
}

func (m *Profile) GetMinTimeBetweenBadassEvents() int32 {
	if m != nil && m.MinTimeBetweenBadassEvents != nil {
		return *m.MinTimeBetweenBadassEvents
	}
	return 0
}

func (m *Profile) GetHudScaleMultiplier() float32 {
	if m != nil && m.HudScaleMultiplier != nil {
		return *m.HudScaleMultiplier
	}
	return 0
}

func (m *Profile) GetDisableSpatialAudio() bool {
	if m != nil && m.DisableSpatialAudio != nil {
		return *m.DisableSpatialAudio
	}
	return false
}

type Profile_FriendEncountersEntry struct {
	Key                  *string                 `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value                *OakFriendEncounterData `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Profile_FriendEncountersEntry) Reset()         { *m = Profile_FriendEncountersEntry{} }
func (m *Profile_FriendEncountersEntry) String() string { return proto.CompactTextString(m) }
func (*Profile_FriendEncountersEntry) ProtoMessage()    {}
func (*Profile_FriendEncountersEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_08b72a8408a178a8, []int{16, 0}
}

func (m *Profile_FriendEncountersEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Profile_FriendEncountersEntry.Unmarshal(m, b)
}
func (m *Profile_FriendEncountersEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Profile_FriendEncountersEntry.Marshal(b, m, deterministic)
}
func (m *Profile_FriendEncountersEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Profile_FriendEncountersEntry.Merge(m, src)
}
func (m *Profile_FriendEncountersEntry) XXX_Size() int {
	return xxx_messageInfo_Profile_FriendEncountersEntry.Size(m)
}
func (m *Profile_FriendEncountersEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_Profile_FriendEncountersEntry.DiscardUnknown(m)
}

var xxx_messageInfo_Profile_FriendEncountersEntry proto.InternalMessageInfo

func (m *Profile_FriendEncountersEntry) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *Profile_FriendEncountersEntry) GetValue() *OakFriendEncounterData {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*PlayerInputBinding_Button)(nil), "OakSave.PlayerInputBinding_Button")
	proto.RegisterType((*PlayerInputBinding_Axis_Key)(nil), "OakSave.PlayerInputBinding_Axis_Key")
	proto.RegisterType((*PlayerInputBinding_Axis)(nil), "OakSave.PlayerInputBinding_Axis")
	proto.RegisterType((*PlayerInputBinding_Category)(nil), "OakSave.PlayerInputBinding_Category")
	proto.RegisterType((*PlayerInputBindings)(nil), "OakSave.PlayerInputBindings")
	proto.RegisterType((*OakProfileLastInventoryFilterInfo)(nil), "OakSave.OakProfileLastInventoryFilterInfo")
	proto.RegisterType((*OakProfileMenuTutorialInfo)(nil), "OakSave.OakProfileMenuTutorialInfo")
	proto.RegisterType((*OakFriendEncounterData)(nil), "OakSave.OakFriendEncounterData")
	proto.RegisterType((*OakMailItem)(nil), "OakSave.OakMailItem")
	proto.RegisterType((*GearSoldByFriendData)(nil), "OakSave.GearSoldByFriendData")
	proto.RegisterType((*OakCustomizationSaveGameData)(nil), "OakSave.OakCustomizationSaveGameData")
	proto.RegisterType((*OakInventoryCustomizationPartInfo)(nil), "OakSave.OakInventoryCustomizationPartInfo")
	proto.RegisterType((*GuardianRankRewardSaveGameData)(nil), "OakSave.GuardianRankRewardSaveGameData")
	proto.RegisterType((*GuardianRankProfileData)(nil), "OakSave.GuardianRankProfileData")
	proto.RegisterType((*CrewQuartersDecorationItemSaveGameData)(nil), "OakSave.CrewQuartersDecorationItemSaveGameData")
	proto.RegisterType((*CrewQuartersRoomItemSaveGameData)(nil), "OakSave.CrewQuartersRoomItemSaveGameData")
	proto.RegisterType((*Profile)(nil), "OakSave.Profile")
	proto.RegisterType((*Profile_FriendEncountersEntry)(nil), "OakSave.Profile.FriendEncountersEntry")
}

func init() {
	proto.RegisterFile("OakProfile.proto", fileDescriptor_08b72a8408a178a8)
}

var fileDescriptor_08b72a8408a178a8 = []byte{
	// 4896 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x7b, 0xe7, 0x77, 0x1c, 0x37,
	0x96, 0xef, 0xa1, 0x6c, 0x8d, 0x28, 0x88, 0xb1, 0xc4, 0x00, 0x4a, 0xb2, 0x4c, 0x53, 0xb2, 0x2c,
	0x7b, 0x6c, 0xc9, 0xb2, 0x1c, 0x47, 0x9e, 0xc0, 0x20, 0x4a, 0x1c, 0x33, 0x68, 0xaa, 0xe9, 0xa0,
	0x99, 0xf7, 0x1e, 0x06, 0x5d, 0x85, 0xee, 0x86, 0xbb, 0x0a, 0x28, 0x17, 0x50, 0x24, 0xdb, 0xe7,
	0xcd, 0x3b, 0xef, 0xc3, 0xe6, 0xd9, 0xbc, 0x7b, 0x36, 0xe7, 0x3c, 0x9b, 0xf3, 0xd9, 0x2f, 0xbb,
	0xb3, 0x39, 0xce, 0xdf, 0xb1, 0x9f, 0xf6, 0x8f, 0xd8, 0x73, 0x2f, 0x50, 0xd5, 0xd5, 0xcd, 0xa6,
	0xa4, 0xfd, 0xc6, 0xbe, 0xbf, 0xdf, 0xef, 0x02, 0xb8, 0xc8, 0xb8, 0x45, 0x32, 0xb3, 0xc7, 0xbb,
	0x0f, 0x72, 0xdd, 0x92, 0x89, 0xb8, 0x91, 0xe5, 0xda, 0xea, 0xe0, 0xcc, 0x1e, 0xef, 0x36, 0xf8,
	0x81, 0xb8, 0x30, 0x0d, 0x7f, 0x74, 0x78, 0x2e, 0x62, 0x87, 0xac, 0x34, 0xc9, 0xd2, 0x83, 0x84,
	0xf7, 0x44, 0xbe, 0xa5, 0xb2, 0xc2, 0xae, 0x49, 0x15, 0x4b, 0xd5, 0x66, 0x6b, 0x85, 0xb5, 0x5a,
	0x05, 0xd7, 0xc9, 0x4c, 0x2e, 0x9a, 0x52, 0xc5, 0x2c, 0xe6, 0x96, 0xb3, 0x8c, 0xdb, 0x0e, 0x1d,
	0x5b, 0x1e, 0xbb, 0x7e, 0x36, 0x9c, 0x72, 0xf6, 0x0d, 0x6e, 0xf9, 0x03, 0x6e, 0x3b, 0xc1, 0x45,
	0x72, 0xb6, 0x2b, 0x7a, 0x4c, 0xf1, 0x54, 0x18, 0x7a, 0x6a, 0xf9, 0xa9, 0xeb, 0x67, 0xc3, 0xf1,
	0xae, 0xe8, 0xed, 0xc2, 0xef, 0x95, 0x26, 0xb9, 0x38, 0xa2, 0x8c, 0xd5, 0x23, 0x69, 0xd8, 0x7b,
	0xa2, 0x17, 0x2c, 0x91, 0xf1, 0x52, 0xeb, 0xbd, 0x9f, 0xf1, 0xd2, 0xe0, 0x3a, 0x19, 0x37, 0x11,
	0x4f, 0x04, 0xbb, 0x1d, 0xd3, 0x53, 0xcb, 0x63, 0xd7, 0xcf, 0xbd, 0x36, 0x79, 0xc3, 0x37, 0xe5,
	0xc6, 0x07, 0x22, 0xba, 0x1d, 0x9e, 0x41, 0xf8, 0x76, 0xbc, 0xf2, 0x0d, 0xb2, 0x78, 0x42, 0x19,
	0xff, 0x83, 0x56, 0xbc, 0x4d, 0x9e, 0xee, 0x8a, 0x9e, 0x6b, 0xc0, 0xb9, 0xd7, 0xae, 0x56, 0x45,
	0x3d, 0xa2, 0xf6, 0x21, 0x2a, 0x56, 0xbe, 0x79, 0x6a, 0x64, 0x1b, 0xd7, 0xb9, 0x15, 0x6d, 0x9d,
	0xf7, 0x82, 0x97, 0x49, 0x10, 0xf9, 0xbf, 0x8f, 0xd5, 0x62, 0xa6, 0x44, 0xaa, 0x7a, 0xbc, 0x44,
	0x66, 0x23, 0xad, 0xac, 0x38, 0xb2, 0x35, 0xf2, 0x29, 0x24, 0x4f, 0x7b, 0xa0, 0xe2, 0xbe, 0x47,
	0xa6, 0x9b, 0xd8, 0x5b, 0xac, 0xe9, 0x0a, 0x35, 0xf4, 0x29, 0xac, 0xfe, 0xca, 0xa3, 0xaa, 0xef,
	0x3a, 0x38, 0x9c, 0x72, 0x52, 0x6f, 0x35, 0xc1, 0x5d, 0x32, 0xc9, 0xa1, 0x61, 0x95, 0xab, 0xa7,
	0xd1, 0xd5, 0xf2, 0xe3, 0x22, 0x11, 0x4e, 0x80, 0xac, 0x74, 0xb3, 0xf2, 0x35, 0x72, 0xfe, 0x38,
	0xd1, 0x04, 0x1b, 0x84, 0xf8, 0xa6, 0x4a, 0x61, 0xe8, 0xd8, 0xe3, 0x83, 0x5c, 0x86, 0x2f, 0xac,
	0xe9, 0x56, 0x3e, 0x21, 0xcf, 0xf5, 0xc7, 0xf7, 0x36, 0x37, 0x76, 0x4b, 0x1d, 0x08, 0x65, 0x75,
	0xde, 0xdb, 0x94, 0x89, 0x05, 0x0f, 0x2d, 0x1d, 0x2c, 0x93, 0x09, 0x93, 0x68, 0xcb, 0x6c, 0x2f,
	0x13, 0x4c, 0xc6, 0x3e, 0xd2, 0x04, 0x6c, 0xfb, 0xbd, 0x4c, 0x6c, 0xc5, 0x10, 0xe3, 0x84, 0x1b,
	0xcb, 0x5a, 0x28, 0x62, 0x52, 0xc5, 0xe2, 0x08, 0x63, 0x7c, 0x3a, 0x9c, 0x06, 0xa0, 0x74, 0x16,
	0x8b, 0xa3, 0x95, 0x6f, 0x8f, 0x91, 0x0b, 0xfd, 0x32, 0x77, 0x84, 0x2a, 0xf6, 0x0b, 0xab, 0x73,
	0xc9, 0x13, 0x2c, 0xec, 0x79, 0x32, 0x65, 0x84, 0x50, 0xcc, 0x7a, 0xa3, 0x6b, 0xdb, 0xd9, 0x70,
	0x12, 0xac, 0x25, 0xd3, 0x04, 0xaf, 0x90, 0xa0, 0x62, 0xb0, 0x58, 0x1a, 0xde, 0x4c, 0x84, 0x1b,
	0xd6, 0xe3, 0xe1, 0x6c, 0x85, 0x6c, 0x78, 0x20, 0x78, 0x8f, 0x5c, 0xe9, 0xd3, 0x79, 0x92, 0xe8,
	0x43, 0x11, 0x33, 0xa9, 0x98, 0xd2, 0x8a, 0xb5, 0x79, 0x2a, 0x58, 0xaa, 0x63, 0x01, 0x9d, 0x0d,
	0xfa, 0xcb, 0x15, 0x75, 0xd5, 0x31, 0xb7, 0xd4, 0xae, 0x56, 0xf7, 0x78, 0x2a, 0x76, 0x80, 0xb5,
	0xa2, 0xc9, 0xc2, 0x1e, 0xef, 0x6e, 0xe6, 0x52, 0xa8, 0xf8, 0xae, 0x8a, 0x74, 0xa1, 0xac, 0xc8,
	0x61, 0x0c, 0x41, 0xe5, 0x55, 0x91, 0x32, 0x51, 0x1a, 0x0d, 0xc6, 0x6a, 0x32, 0x9c, 0x54, 0x45,
	0x5a, 0x31, 0x4d, 0x70, 0x83, 0x9c, 0xb7, 0x32, 0x15, 0x0c, 0x63, 0x56, 0x91, 0xb1, 0xf6, 0x4f,
	0x85, 0xb3, 0x00, 0x41, 0x57, 0x54, 0x82, 0x95, 0xff, 0x3a, 0x45, 0xce, 0xed, 0xf1, 0xee, 0x0e,
	0x97, 0xc9, 0x96, 0x15, 0x69, 0x70, 0x95, 0x4c, 0xa5, 0x5c, 0x26, 0x4c, 0x5a, 0x91, 0x62, 0xaf,
	0xf8, 0x62, 0x26, 0x52, 0xcf, 0x80, 0x6e, 0x81, 0x52, 0x8c, 0x50, 0xb1, 0xc8, 0x21, 0x3e, 0x59,
	0xc2, 0xfd, 0xaa, 0xe0, 0x86, 0xfe, 0xac, 0x83, 0x36, 0x1c, 0x82, 0xeb, 0x03, 0x25, 0x67, 0x4c,
	0xd1, 0xfc, 0x58, 0x44, 0x16, 0xe3, 0x70, 0x36, 0x2c, 0x7f, 0x06, 0x01, 0x79, 0xba, 0xa9, 0xe3,
	0x1e, 0x7d, 0x1a, 0xcd, 0xf8, 0x37, 0x4c, 0xc2, 0xb6, 0xe0, 0x39, 0x33, 0x02, 0x22, 0xc5, 0x54,
	0x91, 0x36, 0x45, 0x4e, 0x4f, 0xbb, 0x49, 0x08, 0x48, 0x03, 0x81, 0x5d, 0xb4, 0xc3, 0x92, 0x86,
	0x35, 0x6e, 0x17, 0x32, 0xa6, 0x9f, 0x41, 0xd2, 0x38, 0x18, 0xee, 0x15, 0x32, 0x06, 0x30, 0xe6,
	0x56, 0x30, 0x23, 0x94, 0xa5, 0x67, 0x30, 0x08, 0xe3, 0x60, 0x68, 0x08, 0x65, 0x83, 0x17, 0xc8,
	0xb4, 0x38, 0xca, 0x64, 0xce, 0xad, 0xd4, 0x0a, 0x66, 0xb0, 0xa0, 0xe3, 0x48, 0x99, 0xea, 0x9b,
	0x37, 0xb8, 0x15, 0x10, 0x94, 0x56, 0xae, 0x53, 0x96, 0xe1, 0xd0, 0x87, 0x71, 0x7a, 0x16, 0xcb,
	0x99, 0x00, 0xab, 0x9f, 0x0f, 0x71, 0xb0, 0x42, 0x26, 0x3b, 0xdc, 0xb0, 0x26, 0x0c, 0xb1, 0x5c,
	0xf0, 0x98, 0x12, 0xec, 0xf2, 0x73, 0x1d, 0x6e, 0xd6, 0x84, 0x50, 0xa1, 0xe0, 0xf1, 0xca, 0xb7,
	0xc6, 0xc8, 0xdc, 0x3d, 0x68, 0x81, 0x4e, 0xe2, 0xb5, 0x9e, 0xeb, 0x67, 0xec, 0xde, 0xd1, 0x6d,
	0x1e, 0x3b, 0xa1, 0xcd, 0x5f, 0x24, 0x97, 0x7c, 0x5d, 0xa2, 0x84, 0x1b, 0xc3, 0x64, 0x2c, 0x94,
	0x95, 0x2d, 0x29, 0x72, 0xd6, 0xe1, 0xa6, 0xe3, 0xe7, 0xc7, 0x92, 0xe3, 0xac, 0x03, 0x65, 0xab,
	0x62, 0xdc, 0xe7, 0xa6, 0x03, 0x75, 0x6d, 0x61, 0xe1, 0x4c, 0x09, 0x0b, 0x0d, 0x72, 0xdd, 0x72,
	0xce, 0x19, 0x77, 0x85, 0xdd, 0x8a, 0x57, 0x34, 0xb9, 0xb4, 0xc7, 0xbb, 0xeb, 0x85, 0xb1, 0x3a,
	0x95, 0x9f, 0x62, 0x34, 0x60, 0x01, 0x80, 0xc1, 0x8a, 0x55, 0x9e, 0x27, 0x9f, 0x91, 0x86, 0x29,
	0x71, 0x88, 0xd5, 0x1c, 0x0f, 0x4f, 0x4b, 0xb3, 0x2b, 0x0e, 0x83, 0xb7, 0x09, 0x8d, 0xea, 0x1a,
	0xc6, 0x8d, 0x11, 0xb6, 0xbe, 0x36, 0x2e, 0x0c, 0xe0, 0xab, 0x00, 0xc3, 0x12, 0xb9, 0x92, 0xe3,
	0x8a, 0x51, 0x2d, 0x13, 0x03, 0x25, 0x3f, 0xe0, 0xb9, 0xc5, 0x49, 0xfc, 0x26, 0x59, 0x1c, 0x74,
	0x9f, 0xf1, 0xdc, 0xba, 0x56, 0xbb, 0x91, 0x3a, 0x1f, 0x0d, 0xeb, 0xb0, 0xc5, 0xfd, 0xda, 0x9e,
	0xaa, 0xd5, 0x76, 0x45, 0x92, 0xcb, 0xf7, 0x0a, 0x9e, 0xc7, 0x92, 0xab, 0x90, 0xab, 0x6e, 0x28,
	0x0e, 0x79, 0x1e, 0x0f, 0x34, 0xf3, 0x19, 0x42, 0x60, 0xe2, 0x59, 0xdd, 0x15, 0xca, 0x4d, 0xba,
	0xd3, 0xe1, 0x59, 0x55, 0xa4, 0xfb, 0x68, 0x70, 0xbb, 0x16, 0x88, 0x8e, 0x6d, 0x01, 0x53, 0xce,
	0x5e, 0xee, 0x00, 0x2b, 0xff, 0x39, 0x46, 0x16, 0xeb, 0x65, 0xf9, 0x65, 0x0a, 0x0b, 0x79, 0x91,
	0xcc, 0xf0, 0x03, 0x2e, 0x13, 0x58, 0x52, 0x06, 0x8b, 0x9a, 0xae, 0xec, 0xbe, 0xc0, 0x2f, 0x93,
	0x89, 0x9c, 0xab, 0x2e, 0x73, 0xde, 0xcb, 0x4d, 0xf0, 0x85, 0x6a, 0x7d, 0x7e, 0x74, 0x73, 0xc2,
	0x73, 0x79, 0x65, 0x37, 0xc1, 0x15, 0x32, 0xd9, 0xf6, 0x74, 0x06, 0x76, 0x1c, 0x06, 0xa7, 0xc3,
	0x89, 0x76, 0xcd, 0x47, 0x70, 0x93, 0x9c, 0xaf, 0x48, 0xe2, 0x28, 0x13, 0x30, 0x44, 0x22, 0x81,
	0x33, 0xf6, 0x74, 0x18, 0x94, 0xd0, 0xdd, 0x0a, 0x59, 0xf9, 0xbf, 0xe4, 0xda, 0x7a, 0x2e, 0x0e,
	0xbf, 0x52, 0xf0, 0x1c, 0xd6, 0xa4, 0x0d, 0x11, 0x69, 0x37, 0x99, 0x60, 0xfd, 0x78, 0x92, 0x21,
	0x74, 0x87, 0x5c, 0x88, 0x2b, 0x91, 0x5b, 0x8a, 0x8e, 0x0d, 0xa2, 0xc5, 0x78, 0xc0, 0x6d, 0x7f,
	0x14, 0x7d, 0x4c, 0x96, 0xeb, 0xa5, 0x87, 0x5a, 0xa7, 0x4f, 0x5a, 0xee, 0x4d, 0x32, 0x97, 0x6b,
	0x9d, 0x9e, 0x50, 0xe2, 0x6c, 0xee, 0x5d, 0xf5, 0xcb, 0xfa, 0xce, 0x2e, 0x39, 0xe3, 0xbb, 0x11,
	0x36, 0x2a, 0xa1, 0xb0, 0xff, 0xb8, 0x44, 0xb5, 0x34, 0xd6, 0xbb, 0x9f, 0x76, 0xc0, 0xaa, 0x04,
	0xa9, 0x34, 0x16, 0xd6, 0x4f, 0xd8, 0x1a, 0x32, 0x0e, 0x3b, 0xc5, 0x81, 0xc8, 0x2d, 0x4b, 0xb4,
	0xee, 0x96, 0x7b, 0x8c, 0x87, 0xb6, 0x10, 0xd9, 0xd6, 0xba, 0x3b, 0x82, 0x6f, 0x8b, 0x5c, 0xf9,
	0x3d, 0x65, 0x90, 0xbf, 0x5f, 0xe4, 0x6a, 0x04, 0x3f, 0xd5, 0x07, 0xae, 0xcb, 0x86, 0xf9, 0x3b,
	0xfa, 0x40, 0x04, 0xaf, 0x91, 0xf9, 0x21, 0xbe, 0xb1, 0x39, 0x6f, 0x09, 0x5c, 0x74, 0xc7, 0xc3,
	0xf3, 0x03, 0x8a, 0x06, 0x42, 0x30, 0x64, 0x7d, 0x7b, 0x0f, 0x64, 0xd3, 0x75, 0x04, 0x2e, 0xbf,
	0x55, 0x73, 0x3f, 0x28, 0xcd, 0xb0, 0xb8, 0x55, 0xd5, 0x28, 0x8c, 0x60, 0x99, 0xb4, 0x51, 0x07,
	0x97, 0xe3, 0xf1, 0x70, 0x46, 0xfa, 0x6a, 0x14, 0x46, 0x3c, 0x00, 0x7b, 0xf0, 0x3a, 0x59, 0xf0,
	0x8e, 0x1d, 0xdb, 0xa4, 0x5a, 0xdb, 0x8e, 0x54, 0x6d, 0x5c, 0x9d, 0xc7, 0xc3, 0x39, 0x87, 0xa2,
	0xa2, 0x51, 0x62, 0xc1, 0xb3, 0xe4, 0x9c, 0xa7, 0xc3, 0x49, 0x13, 0x17, 0xe8, 0x53, 0x21, 0x41,
	0x53, 0x03, 0x2c, 0xb8, 0x67, 0x75, 0xf4, 0x21, 0x8b, 0x79, 0xca, 0xdb, 0xc2, 0xaf, 0xb0, 0xc6,
	0x2f, 0xd2, 0xb3, 0x00, 0x6d, 0x20, 0xe2, 0x96, 0x58, 0x13, 0xbc, 0x45, 0xe8, 0x71, 0x3e, 0x93,
	0x91, 0x56, 0x86, 0x9e, 0x43, 0xd1, 0xfc, 0xb0, 0x68, 0x0b, 0x40, 0x58, 0x00, 0x7d, 0xfd, 0x6d,
	0xce, 0xa5, 0x82, 0x03, 0x52, 0x2a, 0x8c, 0xe1, 0x6d, 0x61, 0xe8, 0x04, 0x0a, 0x7d, 0xfb, 0xf6,
	0x3d, 0xbc, 0xe3, 0x51, 0xd8, 0x67, 0xb0, 0x48, 0x3c, 0x51, 0x46, 0x1d, 0x6e, 0xe9, 0x24, 0xf2,
	0x27, 0xc0, 0xba, 0x2f, 0x8e, 0xec, 0x7a, 0x87, 0x5b, 0x08, 0x7c, 0x24, 0x60, 0xf3, 0x66, 0x51,
	0xae, 0x8d, 0xe9, 0x70, 0x99, 0xd3, 0x29, 0x17, 0x78, 0x67, 0x5f, 0x2f, 0xcd, 0x30, 0xbf, 0xad,
	0x6e, 0xb7, 0x13, 0xc1, 0x4c, 0x96, 0x4b, 0x65, 0xe9, 0xb4, 0xf3, 0xe7, 0x8c, 0x0d, 0xb4, 0xd5,
	0x48, 0x51, 0xae, 0x8b, 0xa8, 0x43, 0x67, 0xea, 0xa4, 0x75, 0xb4, 0xc1, 0xf1, 0x23, 0x12, 0xca,
	0xe8, 0x9c, 0xe1, 0xc1, 0x56, 0x59, 0x3a, 0x8b, 0xac, 0x49, 0x67, 0x5d, 0x77, 0xc6, 0xe0, 0x39,
	0x32, 0x91, 0x16, 0x46, 0x46, 0xec, 0x40, 0x27, 0x45, 0x2a, 0x68, 0x80, 0xdd, 0x70, 0x0e, 0x6d,
	0x1f, 0xa0, 0x29, 0x78, 0x95, 0xcc, 0x19, 0x5d, 0xa8, 0x98, 0x89, 0x56, 0x4b, 0x44, 0xd6, 0x94,
	0xd4, 0xf3, 0x48, 0x0d, 0x10, 0xbb, 0xeb, 0x20, 0xaf, 0xb8, 0x48, 0xce, 0x1e, 0xe8, 0x92, 0x36,
	0x87, 0xb4, 0xf1, 0x03, 0xed, 0xc1, 0xe7, 0xc8, 0xc4, 0x81, 0x96, 0x91, 0x28, 0xf1, 0x79, 0x57,
	0x22, 0xda, 0x3c, 0xe5, 0x65, 0x12, 0xf8, 0x0e, 0xd1, 0x19, 0x8c, 0x47, 0x9e, 0xb0, 0x03, 0x4d,
	0x17, 0xdc, 0xf0, 0x73, 0xc8, 0x9e, 0x07, 0x3e, 0xc0, 0x23, 0x69, 0x56, 0x98, 0x0e, 0xb3, 0x9a,
	0x59, 0x9e, 0x74, 0xe9, 0x22, 0xf2, 0x08, 0xd8, 0xf6, 0xf5, 0x3e, 0x4f, 0xba, 0xb0, 0x05, 0x79,
	0x7f, 0x10, 0x8b, 0x5c, 0x27, 0x89, 0xc8, 0x19, 0x2f, 0x62, 0xa9, 0x29, 0x75, 0x03, 0xc3, 0xc1,
	0xeb, 0x15, 0xba, 0x0a, 0x20, 0x8e, 0xc0, 0x4c, 0xf0, 0x2e, 0xb0, 0x15, 0xc4, 0xbb, 0x95, 0x6b,
	0x65, 0xe9, 0x12, 0xd6, 0x78, 0xd6, 0x43, 0xab, 0x80, 0x6c, 0x02, 0x00, 0xf5, 0x1e, 0xe4, 0x1b,
	0x19, 0x0b, 0x7a, 0x01, 0xe9, 0x33, 0x75, 0x7a, 0x43, 0xc6, 0xe2, 0x38, 0xbb, 0xc9, 0xa3, 0x2e,
	0xbd, 0x78, 0x9c, 0xbd, 0xc6, 0xa3, 0x2e, 0x74, 0x7a, 0xc9, 0x36, 0xc2, 0x16, 0x19, 0xbd, 0xe4,
	0x8e, 0x79, 0xde, 0xd8, 0x00, 0x5b, 0xf0, 0x26, 0xa1, 0x69, 0x61, 0x85, 0x6b, 0x1b, 0xd3, 0x8a,
	0xb5, 0x74, 0x54, 0x18, 0x96, 0x68, 0x63, 0xe8, 0x33, 0x6e, 0x2e, 0x02, 0x8e, 0xad, 0xdb, 0x53,
	0x9b, 0x00, 0x6e, 0x6b, 0x63, 0x82, 0x77, 0xc9, 0xc5, 0x8e, 0x8c, 0x05, 0x2c, 0x22, 0x32, 0xb2,
	0x4c, 0x71, 0xcb, 0x3a, 0x22, 0xc9, 0x58, 0x2c, 0x79, 0xa2, 0xdb, 0x74, 0x05, 0xa5, 0x8b, 0x40,
	0x69, 0x20, 0x63, 0x97, 0xdb, 0xfb, 0x22, 0xc9, 0x36, 0x10, 0x0e, 0x1e, 0x90, 0xf9, 0xf2, 0xa0,
	0x05, 0x97, 0x8c, 0xfe, 0x25, 0xe7, 0x0a, 0xde, 0x2c, 0x2f, 0x3d, 0xe2, 0x26, 0x62, 0xc2, 0xf3,
	0xd9, 0x88, 0x0b, 0xcd, 0xb3, 0xe4, 0x9c, 0x12, 0x87, 0x06, 0x4f, 0x09, 0xc2, 0xd0, 0xab, 0xcb,
	0x4f, 0x5d, 0x9f, 0x0c, 0x09, 0x98, 0xee, 0xa3, 0x25, 0xb8, 0x45, 0xe6, 0xf1, 0xc0, 0x5c, 0x18,
	0x11, 0x33, 0xc3, 0x0f, 0x04, 0x1e, 0xdc, 0x65, 0x4c, 0x9f, 0xc7, 0xa8, 0x04, 0x00, 0xbe, 0x6f,
	0x04, 0xee, 0xa4, 0x00, 0x6d, 0xc5, 0xc1, 0x2a, 0x79, 0xa6, 0x5c, 0x32, 0x3b, 0x32, 0x83, 0x03,
	0xa6, 0x91, 0x56, 0x1e, 0x48, 0xdb, 0x63, 0x89, 0x38, 0x10, 0x09, 0xbd, 0x86, 0xfb, 0xe3, 0x05,
	0x4f, 0xba, 0x2f, 0xb3, 0x46, 0x9f, 0xb2, 0x0d, 0x8c, 0xe0, 0x1e, 0x59, 0x2e, 0x5d, 0x7c, 0xaa,
	0x75, 0x0a, 0x45, 0x1f, 0xf3, 0xf2, 0x02, 0x7a, 0x29, 0x8b, 0xfa, 0x2a, 0xd2, 0x8e, 0x39, 0xda,
	0x22, 0xcf, 0x95, 0x8e, 0x0e, 0x44, 0x47, 0x46, 0x89, 0x18, 0xe1, 0xe9, 0x3a, 0x7a, 0xba, 0xec,
	0x89, 0x1f, 0x38, 0xde, 0x31, 0x57, 0x5f, 0x20, 0x97, 0x4a, 0x57, 0xb0, 0x65, 0xa4, 0x42, 0x59,
	0x16, 0x0b, 0xac, 0xa1, 0x12, 0xec, 0x88, 0xbe, 0x88, 0xe3, 0x89, 0x7a, 0xce, 0x8e, 0xa7, 0x6c,
	0x08, 0xa8, 0x9b, 0x12, 0x1f, 0x3d, 0x46, 0xdf, 0xa3, 0x2f, 0x3d, 0x52, 0xff, 0x30, 0x58, 0x25,
	0x65, 0x0d, 0x71, 0x4b, 0xac, 0x69, 0xa5, 0x52, 0x22, 0x67, 0x47, 0xf4, 0xb3, 0xe8, 0x61, 0xc9,
	0xb3, 0x60, 0x7b, 0x2c, 0xd5, 0x5b, 0xc0, 0xf8, 0xe8, 0x11, 0x2e, 0x74, 0x61, 0xd1, 0xc5, 0xcb,
	0x27, 0xba, 0xd8, 0x03, 0xc6, 0x47, 0x8f, 0xad, 0x45, 0x8f, 0xbe, 0xf2, 0xe8, 0x5a, 0x3c, 0x7c,
	0x6c, 0x2d, 0x7a, 0xf4, 0xc6, 0xa3, 0x6b, 0xf1, 0x30, 0xd8, 0x21, 0x57, 0x87, 0xbb, 0x75, 0x64,
	0x9f, 0xdc, 0x44, 0x47, 0xcf, 0x0e, 0xf6, 0xec, 0xf1, 0xae, 0x79, 0x32, 0x77, 0x3d, 0xfa, 0xea,
	0x93, 0xb8, 0x7b, 0x18, 0x3c, 0x20, 0xd7, 0x86, 0xdd, 0x9d, 0xd0, 0x63, 0xb7, 0xd0, 0xe1, 0xf2,
	0xa0, 0xc3, 0x11, 0x1d, 0xf7, 0x78, 0x8f, 0x65, 0x07, 0xbe, 0xf6, 0x38, 0x8f, 0xbe, 0x1f, 0x9f,
	0xb4, 0x8e, 0x3d, 0x7a, 0xfb, 0x89, 0xea, 0xf8, 0xf0, 0x89, 0xeb, 0xd8, 0xa3, 0xaf, 0x3f, 0x51,
	0x1d, 0x1f, 0xd6, 0x67, 0x4c, 0x22, 0x5a, 0x76, 0xb8, 0x6e, 0xf4, 0x8d, 0x81, 0x19, 0xb3, 0x2d,
	0x5a, 0x76, 0xa0, 0x4a, 0x8f, 0xd0, 0x63, 0x4d, 0xe8, 0x9b, 0x27, 0xea, 0xb1, 0x02, 0xc1, 0x97,
	0xfa, 0x0b, 0x59, 0x2e, 0xdb, 0x9d, 0xe3, 0x15, 0x78, 0x6b, 0x60, 0x9c, 0x86, 0xc0, 0x19, 0xac,
	0xc1, 0x23, 0x3c, 0xb8, 0x2a, 0xbc, 0x7d, 0xb2, 0x07, 0x57, 0x87, 0x2d, 0xb2, 0x32, 0x30, 0x59,
	0xf8, 0x11, 0x5c, 0x82, 0xfb, 0x6e, 0xdc, 0x99, 0xee, 0x1d, 0x74, 0xf3, 0x4c, 0x6d, 0xc2, 0xac,
	0x02, 0xaf, 0x74, 0xe5, 0x8e, 0x79, 0x35, 0x57, 0x30, 0xba, 0x4f, 0x70, 0xf5, 0xb9, 0x01, 0x57,
	0x30, 0xb8, 0x47, 0xb8, 0xda, 0x23, 0xcf, 0x97, 0xae, 0xe0, 0x60, 0xc9, 0xe3, 0x03, 0xae, 0x22,
	0xe1, 0xd6, 0x7b, 0x38, 0xe3, 0x1b, 0x61, 0x2d, 0x6e, 0x4c, 0x77, 0x70, 0x43, 0x2b, 0xbb, 0xfa,
	0x7d, 0x23, 0x56, 0x3d, 0xf5, 0xbe, 0xcc, 0x56, 0x65, 0xda, 0xf0, 0xbc, 0xe0, 0x7d, 0x72, 0x7d,
	0xa4, 0x43, 0xbf, 0xfa, 0x0f, 0xf8, 0x7c, 0x17, 0x7d, 0x5e, 0x39, 0xee, 0xd3, 0xed, 0x01, 0x75,
	0xb7, 0x1f, 0x92, 0x17, 0x47, 0xba, 0x2d, 0x07, 0xe8, 0x80, 0xdf, 0xcf, 0xa3, 0xdf, 0xab, 0xc7,
	0xfd, 0xfa, 0x11, 0x5a, 0x77, 0x7c, 0x93, 0xcc, 0xd5, 0xf7, 0xb8, 0x1e, 0x3f, 0x64, 0x39, 0xb7,
	0x82, 0x7e, 0xc1, 0x9d, 0x58, 0xfa, 0x5b, 0xdb, 0x43, 0x7e, 0x18, 0x72, 0x2b, 0x82, 0xdb, 0x64,
	0xa1, 0x2e, 0xc0, 0x73, 0xbe, 0x93, 0x7c, 0x11, 0x25, 0xe7, 0xfb, 0x12, 0x3c, 0xeb, 0xa3, 0xe8,
	0x56, 0xff, 0xf2, 0x01, 0x22, 0x71, 0x64, 0x73, 0x0e, 0x65, 0xd1, 0x2f, 0xb9, 0x13, 0x61, 0x5f,
	0x73, 0x17, 0xa0, 0x87, 0xfc, 0x30, 0x78, 0x83, 0x2c, 0x1e, 0x97, 0xb8, 0x5b, 0xc5, 0x2a, 0x8a,
	0xe6, 0x86, 0x44, 0xee, 0x66, 0xf1, 0x26, 0xa1, 0x75, 0x59, 0xce, 0xd3, 0x8c, 0x15, 0x19, 0xb3,
	0x32, 0x15, 0x74, 0x6d, 0x58, 0x17, 0xf2, 0x34, 0x7b, 0x3f, 0xdb, 0x97, 0xa9, 0x08, 0xde, 0x26,
	0x4b, 0xa3, 0x74, 0xb1, 0x48, 0x78, 0x8f, 0xae, 0xa3, 0x70, 0x7e, 0x58, 0xb8, 0x01, 0x60, 0xbd,
	0xa2, 0xbe, 0x93, 0xab, 0x20, 0x6e, 0x0c, 0x14, 0xe8, 0x7a, 0xb5, 0x8c, 0xe3, 0x3b, 0xfd, 0x02,
	0xbd, 0xac, 0x16, 0xca, 0xbb, 0x28, 0x5c, 0x18, 0x10, 0xf6, 0xa3, 0xf9, 0x56, 0xbf, 0x8d, 0x5e,
	0xda, 0x0f, 0xe8, 0xe6, 0x40, 0x55, 0x9d, 0xb2, 0x8a, 0xe9, 0x1d, 0x72, 0x61, 0xa4, 0xd0, 0x85,
	0xf5, 0x1e, 0x4a, 0x17, 0x8f, 0x4b, 0x5d, 0x64, 0xdf, 0x25, 0x17, 0x87, 0xc4, 0x03, 0xc1, 0xbd,
	0x3f, 0x42, 0x5d, 0x8b, 0x6f, 0x6d, 0x09, 0x1b, 0x52, 0xbb, 0x10, 0x6f, 0x0d, 0x2c, 0x61, 0x75,
	0xb9, 0x8b, 0x72, 0xad, 0xcd, 0xe5, 0x98, 0xaf, 0xc2, 0xfc, 0xe5, 0x81, 0x36, 0xfb, 0x41, 0x5e,
	0xc6, 0xb9, 0xd6, 0xe6, 0x52, 0x58, 0x0b, 0xf4, 0x7b, 0x03, 0xb5, 0xf6, 0xd2, 0x7e, 0xa4, 0x6b,
	0x9d, 0x54, 0x8a, 0xfb, 0xa1, 0xde, 0x1e, 0xe8, 0x24, 0xaf, 0xad, 0x62, 0xfd, 0xf9, 0x7e, 0xb8,
	0x06, 0xa5, 0x2e, 0xd8, 0x3b, 0x03, 0xed, 0xad, 0x8b, 0x5d, 0xb4, 0x6b, 0xf1, 0x2a, 0xe5, 0x03,
	0xe1, 0xde, 0x1d, 0xa5, 0xaf, 0xc5, 0xbb, 0xb6, 0x60, 0x0f, 0xeb, 0x5d, 0xc0, 0xf7, 0x06, 0x16,
	0xec, 0x01, 0x07, 0x2e, 0xe2, 0xaf, 0x92, 0x39, 0x99, 0x6b, 0x65, 0x70, 0xb9, 0xaf, 0xbd, 0x77,
	0x3c, 0xc0, 0xd5, 0x25, 0xa8, 0xb0, 0xfe, 0x93, 0xc7, 0x9b, 0x64, 0xf1, 0x90, 0x27, 0x5d, 0xb8,
	0x0d, 0x7f, 0xac, 0x7b, 0xc6, 0xca, 0xa8, 0xcb, 0x4c, 0xd4, 0x11, 0xa9, 0xa0, 0x5f, 0x71, 0xef,
	0x76, 0x1e, 0xfe, 0xb2, 0x47, 0x1b, 0x08, 0x82, 0x2e, 0xce, 0xe5, 0xc1, 0x28, 0x5d, 0xe8, 0x74,
	0x1e, 0x1e, 0xd2, 0x5d, 0x23, 0xd3, 0xee, 0x3d, 0x80, 0xc7, 0xc6, 0x2f, 0xfa, 0x0d, 0x6c, 0xd5,
	0x24, 0x9a, 0x57, 0x63, 0x53, 0x3d, 0x0b, 0x38, 0x5e, 0x75, 0x72, 0x46, 0xee, 0xbe, 0x5b, 0xe2,
	0x10, 0x2a, 0xcf, 0xca, 0xc8, 0xbf, 0x43, 0x2e, 0x38, 0xfe, 0xc8, 0xf6, 0xbf, 0xef, 0xae, 0x36,
	0xc8, 0xd8, 0x3a, 0x1e, 0x84, 0x97, 0x49, 0x50, 0x16, 0xe3, 0xee, 0x36, 0xa9, 0x8e, 0x05, 0xfd,
	0x00, 0xdb, 0x31, 0xe3, 0x11, 0xbc, 0xba, 0xec, 0xe8, 0x18, 0x5f, 0x94, 0x0e, 0x05, 0xcf, 0xb4,
	0xc2, 0x12, 0xdc, 0x75, 0x9c, 0x7e, 0xe8, 0x6e, 0xfa, 0x0e, 0x58, 0x95, 0xe9, 0x3e, 0x9a, 0x83,
	0xd7, 0xc9, 0x42, 0xca, 0x95, 0x85, 0x9e, 0x14, 0x9f, 0x14, 0x32, 0x17, 0x86, 0xb9, 0x9c, 0x11,
	0xfd, 0xc8, 0x5f, 0xd4, 0x10, 0x0d, 0x3d, 0xe8, 0x13, 0x87, 0xaf, 0x93, 0x85, 0x96, 0x3c, 0x12,
	0x31, 0x4b, 0xa5, 0x92, 0x29, 0xcf, 0x58, 0xae, 0xad, 0x7b, 0xc9, 0x79, 0xe8, 0x54, 0x88, 0xee,
	0x38, 0x30, 0xf4, 0x58, 0x70, 0x9d, 0xcc, 0x00, 0xd7, 0x3f, 0xe9, 0xb8, 0x21, 0xfb, 0x55, 0xe4,
	0x4f, 0xa5, 0x3c, 0x73, 0x8f, 0x44, 0x6e, 0xa0, 0x62, 0x36, 0xa1, 0x62, 0xc2, 0xbc, 0xf8, 0x9a,
	0x7b, 0x5b, 0xa8, 0x78, 0x30, 0x1b, 0x2e, 0x13, 0x12, 0xcb, 0x56, 0x4b, 0x46, 0x45, 0x62, 0x7b,
	0xf4, 0x7f, 0x61, 0x34, 0x6a, 0x16, 0x7c, 0x89, 0x39, 0xe4, 0x19, 0x8b, 0x0b, 0x9e, 0xb0, 0x43,
	0x29, 0x92, 0xb8, 0xbc, 0x78, 0x1b, 0xfa, 0xbf, 0xfd, 0x4b, 0xcc, 0x21, 0xcf, 0x36, 0x0a, 0x9e,
	0x7c, 0x08, 0xa8, 0xbf, 0x77, 0x9b, 0x60, 0x89, 0x8c, 0x37, 0xb9, 0x11, 0xac, 0xa5, 0x0f, 0xe8,
	0xff, 0xc1, 0x0e, 0x3d, 0x03, 0xbf, 0x37, 0xf5, 0x01, 0x5c, 0xdf, 0xaa, 0xd7, 0x13, 0xa6, 0x44,
	0x61, 0x73, 0x9e, 0xb0, 0x48, 0x27, 0x3a, 0x67, 0xad, 0x9c, 0xa7, 0x82, 0x32, 0xac, 0xc6, 0x85,
	0x8a, 0xb4, 0xeb, 0x38, 0xeb, 0x40, 0xd9, 0x04, 0x06, 0x4c, 0xe2, 0xbe, 0x0b, 0xa1, 0x44, 0xda,
	0x1b, 0x70, 0xf0, 0x75, 0x74, 0x40, 0x2b, 0xca, 0x5d, 0x60, 0xd4, 0xe4, 0x77, 0x48, 0xdf, 0x39,
	0xe3, 0x49, 0x32, 0xa8, 0xe6, 0xa8, 0x5e, 0xac, 0x18, 0xab, 0x49, 0x52, 0x17, 0xf7, 0x1f, 0xdf,
	0x4c, 0xd1, 0xb4, 0xd2, 0x26, 0xc2, 0xd0, 0x66, 0xfd, 0xf1, 0xad, 0x51, 0x9a, 0x6b, 0xcf, 0x69,
	0x51, 0xa2, 0xe1, 0x7e, 0x1b, 0x71, 0x7c, 0xec, 0x30, 0x34, 0xaa, 0x3f, 0xa7, 0xad, 0x23, 0xb8,
	0xee, 0xb1, 0xea, 0x46, 0x6c, 0x2c, 0xb7, 0x85, 0x61, 0xa9, 0x50, 0x05, 0xcb, 0x78, 0x5b, 0xd0,
	0x18, 0xdf, 0x42, 0xf1, 0x46, 0xdc, 0x40, 0x6c, 0x47, 0xa8, 0xe2, 0x01, 0x6f, 0x8b, 0xa0, 0x4b,
	0x2e, 0xc9, 0xf2, 0xed, 0x9e, 0x99, 0x28, 0x17, 0x42, 0xb1, 0x5a, 0xea, 0x8e, 0x0a, 0x7c, 0xa8,
	0x7e, 0xa9, 0xba, 0xbe, 0x3f, 0x36, 0x3b, 0x18, 0x2e, 0x55, 0xfe, 0x1a, 0xe8, 0x6e, 0xbb, 0xca,
	0xf7, 0x05, 0xf7, 0xc9, 0x64, 0x99, 0x4a, 0x63, 0x52, 0xb5, 0x34, 0x6d, 0xe1, 0xe3, 0xc0, 0x95,
	0x11, 0xde, 0x87, 0xf3, 0x80, 0xe1, 0x84, 0xad, 0x67, 0x05, 0x5f, 0x25, 0x73, 0xb1, 0x68, 0xf1,
	0x22, 0xb1, 0x4c, 0x09, 0x7b, 0xa8, 0xf3, 0xae, 0xcb, 0x7b, 0xb5, 0xdd, 0xd5, 0xdf, 0x63, 0xbb,
	0x0e, 0x2a, 0xb3, 0x5f, 0xa5, 0x42, 0xaa, 0x03, 0x69, 0x85, 0x13, 0x74, 0x50, 0x30, 0xeb, 0xa1,
	0x2d, 0x44, 0x90, 0xff, 0x0a, 0x09, 0x52, 0x6e, 0xa3, 0x4e, 0xca, 0x71, 0xf9, 0xcb, 0x45, 0x1b,
	0x66, 0x98, 0x74, 0x8f, 0xca, 0x35, 0x24, 0x44, 0x20, 0xf8, 0x2c, 0x99, 0x35, 0x36, 0x17, 0x3c,
	0x05, 0xb2, 0x11, 0xf9, 0x81, 0x8c, 0x04, 0xfd, 0xd8, 0xad, 0x11, 0x15, 0xd0, 0x70, 0x76, 0x98,
	0x1b, 0x29, 0x3f, 0x62, 0x11, 0x8f, 0x3a, 0x22, 0x66, 0x3e, 0xa7, 0x23, 0x20, 0x6a, 0x86, 0x76,
	0xf1, 0xc6, 0x3f, 0x9f, 0xf2, 0xa3, 0x75, 0x84, 0x7d, 0x5a, 0x11, 0x41, 0x5c, 0xc7, 0x8e, 0x09,
	0x5d, 0x6f, 0x0b, 0x43, 0x13, 0x94, 0x2e, 0x0e, 0x49, 0x1b, 0x1e, 0x0e, 0xae, 0x54, 0xe9, 0x23,
	0x5f, 0x54, 0x8a, 0x89, 0xd4, 0x89, 0x56, 0xbd, 0x84, 0x17, 0xc8, 0xf4, 0xb0, 0x5b, 0x85, 0xb4,
	0xa9, 0xd6, 0xa0, 0xb7, 0x35, 0x72, 0x19, 0xc7, 0xc9, 0x61, 0x47, 0x9a, 0x4c, 0xe4, 0xac, 0x25,
	0x60, 0x0b, 0x76, 0x9e, 0xdd, 0x86, 0xa6, 0x31, 0x2d, 0x77, 0x01, 0x58, 0x1f, 0x3a, 0xd2, 0x26,
	0x70, 0x5c, 0x41, 0xb8, 0xa5, 0x6d, 0x92, 0xe5, 0x11, 0x3e, 0xca, 0x82, 0x9d, 0x97, 0x0c, 0xbd,
	0x5c, 0x1a, 0xf6, 0x52, 0xd6, 0x03, 0xfd, 0xdc, 0x22, 0x73, 0xb9, 0x88, 0x84, 0xb2, 0x49, 0x8f,
	0xa5, 0xc2, 0xfa, 0x94, 0x9f, 0xa1, 0xdf, 0xe5, 0x52, 0xc5, 0x41, 0x09, 0xee, 0x08, 0xeb, 0x9e,
	0x9f, 0x4c, 0xb0, 0x4f, 0x66, 0xcb, 0x60, 0xf4, 0x93, 0xb3, 0xdf, 0xed, 0xd2, 0xe6, 0xd7, 0xfa,
	0x8f, 0x55, 0xfe, 0x43, 0x8f, 0xa1, 0xdc, 0xae, 0xb9, 0xab, 0x6c, 0xde, 0x0b, 0x67, 0x5a, 0x43,
	0xe6, 0xe0, 0x73, 0x64, 0x09, 0xfa, 0x67, 0xd8, 0x33, 0x33, 0xf2, 0x53, 0x41, 0xbf, 0xc7, 0xe5,
	0x86, 0x16, 0x52, 0x7e, 0x34, 0xe4, 0xaf, 0x21, 0x3f, 0x15, 0xc1, 0x36, 0x09, 0x32, 0x57, 0x1c,
	0x46, 0xc0, 0x60, 0x6a, 0x8a, 0x7e, 0xaf, 0xab, 0xd2, 0x33, 0xfd, 0x4c, 0x11, 0x4f, 0x05, 0x34,
	0x7e, 0x20, 0x3f, 0x34, 0xe3, 0x95, 0x00, 0x18, 0x4c, 0x96, 0xc4, 0xe4, 0x52, 0x93, 0xab, 0x2e,
	0xeb, 0x4f, 0xee, 0xea, 0x13, 0x89, 0x04, 0xf6, 0xbc, 0xef, 0x1b, 0x1b, 0xfa, 0x8e, 0xa1, 0x9f,
	0xc1, 0xf3, 0x3c, 0xb0, 0xa2, 0xf3, 0x25, 0x70, 0x74, 0x0c, 0xde, 0x86, 0xad, 0xf1, 0x26, 0x39,
	0x3f, 0x54, 0x0a, 0x3a, 0xff, 0x7e, 0x70, 0x3e, 0x11, 0xce, 0x0e, 0x08, 0x51, 0xf0, 0x36, 0xa1,
	0x89, 0x36, 0x98, 0x39, 0xb1, 0xc3, 0xaa, 0x1f, 0x70, 0xaa, 0x79, 0x20, 0x6c, 0x6b, 0x6d, 0x07,
	0x95, 0x77, 0xc8, 0x94, 0xca, 0x22, 0x56, 0xe5, 0xb9, 0x0d, 0xfd, 0xa6, 0x6b, 0xc2, 0x5c, 0x7d,
	0xf5, 0x28, 0x53, 0xe2, 0xe1, 0x84, 0xca, 0xa2, 0xf2, 0x87, 0x81, 0xcd, 0xaa, 0x4a, 0x37, 0x1b,
	0xfa, 0x83, 0x6e, 0x58, 0x9c, 0x2d, 0x13, 0xce, 0x06, 0x66, 0x6f, 0xa1, 0x72, 0xb8, 0x6e, 0xd6,
	0x68, 0x3f, 0xe4, 0x68, 0xd3, 0x0e, 0xd9, 0xa9, 0xc8, 0x7b, 0x64, 0xce, 0x65, 0x7d, 0x75, 0x12,
	0xb3, 0x66, 0xcf, 0xf7, 0xb6, 0xa1, 0x3f, 0x7c, 0xac, 0xab, 0x46, 0xe4, 0x8c, 0xc3, 0xd9, 0xf6,
	0x90, 0xd5, 0x04, 0x9b, 0x64, 0xa6, 0xea, 0xf9, 0xb8, 0x70, 0xc1, 0xf8, 0x11, 0xe7, 0xec, 0x62,
	0xbd, 0x71, 0x8d, 0x8d, 0xf7, 0x07, 0x7a, 0x7d, 0xaa, 0xec, 0xf5, 0xb8, 0xc0, 0x10, 0x31, 0xb2,
	0x58, 0xa8, 0x44, 0x47, 0x5d, 0xd8, 0x2f, 0xea, 0xf9, 0x54, 0x43, 0x7f, 0xd4, 0xb9, 0x7b, 0xbe,
	0xee, 0xee, 0xc4, 0x24, 0x71, 0xb8, 0x50, 0xba, 0x19, 0xa0, 0x98, 0xe0, 0xff, 0x8f, 0x91, 0x6b,
	0x55, 0x09, 0xb5, 0x91, 0x75, 0x2c, 0xb5, 0x6b, 0xe8, 0x8f, 0x8d, 0x1d, 0xdf, 0x38, 0x1e, 0x9d,
	0x24, 0x0e, 0xaf, 0x94, 0xae, 0x4f, 0xe6, 0x41, 0xac, 0x86, 0x92, 0x9f, 0x3f, 0x3e, 0x86, 0x7b,
	0xc8, 0xf2, 0xc8, 0x54, 0x6a, 0x2d, 0x5b, 0x3b, 0x94, 0x1f, 0xfd, 0x06, 0x59, 0xe9, 0xc7, 0x2a,
	0x17, 0x87, 0xec, 0x13, 0x9f, 0x7a, 0x64, 0xfd, 0x14, 0xa5, 0xa1, 0x3f, 0xe1, 0x5a, 0x71, 0xb3,
	0x72, 0xfe, 0x64, 0x29, 0xd2, 0xf0, 0xd9, 0x2a, 0x80, 0x23, 0xf9, 0x06, 0xb6, 0xdd, 0x13, 0x8a,
	0xcf, 0xb5, 0x4e, 0x0d, 0xfd, 0x49, 0x57, 0xf0, 0x8b, 0x23, 0x0b, 0x1e, 0x95, 0x1d, 0x0d, 0x97,
	0x46, 0x15, 0x09, 0x4c, 0xd8, 0x35, 0x96, 0x06, 0x72, 0x73, 0x3c, 0x8a, 0x44, 0x22, 0x7c, 0xf6,
	0xef, 0xa7, 0x5c, 0xb6, 0x73, 0xb1, 0x96, 0x9f, 0x5b, 0xad, 0xe1, 0xb0, 0xb6, 0x7a, 0x71, 0x3f,
	0xd9, 0x98, 0x15, 0x96, 0xfe, 0xb4, 0xd3, 0xf9, 0x24, 0xcd, 0xbd, 0x32, 0xd7, 0x98, 0x15, 0x16,
	0x56, 0x41, 0x28, 0x06, 0xbf, 0x72, 0x90, 0xd1, 0x90, 0xee, 0x67, 0x9c, 0x6e, 0xa1, 0x30, 0x62,
	0xdd, 0x11, 0x06, 0xb4, 0x57, 0xc9, 0x64, 0xca, 0x0d, 0xac, 0x99, 0x3e, 0x35, 0xf4, 0xb3, 0x63,
	0x78, 0x06, 0x9c, 0x70, 0x56, 0x9f, 0x1c, 0xba, 0x45, 0xe6, 0x52, 0xad, 0xa4, 0xd5, 0xfd, 0x6f,
	0x59, 0x70, 0x37, 0xff, 0x39, 0xf7, 0x35, 0x41, 0xe0, 0x41, 0xff, 0x35, 0x0b, 0xee, 0xe7, 0x57,
	0xc9, 0x64, 0x3b, 0xe7, 0x59, 0x47, 0x46, 0xc6, 0x1d, 0xe0, 0x7f, 0xde, 0x7f, 0x23, 0x53, 0x5a,
	0xf1, 0xf4, 0xfe, 0x22, 0x99, 0xc1, 0xa3, 0x1c, 0xde, 0x25, 0x59, 0x22, 0x53, 0x69, 0xe9, 0x2f,
	0x38, 0xe2, 0x14, 0x02, 0x70, 0x89, 0xdc, 0x06, 0x33, 0x50, 0xf1, 0x9c, 0x5a, 0xde, 0x0d, 0xe0,
	0xbc, 0xfa, 0x8b, 0xae, 0xb2, 0x53, 0x00, 0xf8, 0x0b, 0x08, 0x9c, 0x5b, 0x5f, 0x22, 0x33, 0x55,
	0xd9, 0x9f, 0x14, 0x3c, 0x91, 0xb6, 0x47, 0x7f, 0xc9, 0x79, 0x9d, 0x2e, 0x81, 0xaf, 0x38, 0x7b,
	0xf0, 0x3a, 0x99, 0xe7, 0x4a, 0x1a, 0x6d, 0x73, 0x9d, 0xc9, 0xc8, 0x1f, 0xc3, 0xa4, 0x6a, 0xd3,
	0x5f, 0x76, 0x82, 0xb9, 0x1a, 0xba, 0x59, 0x82, 0xc1, 0x35, 0x32, 0x65, 0x3a, 0x3c, 0xd6, 0x87,
	0x95, 0xff, 0x5f, 0xf1, 0x5f, 0x1a, 0x39, 0x73, 0xe9, 0xfd, 0x0e, 0x59, 0x2a, 0x03, 0x96, 0x89,
	0xbc, 0xa5, 0xf3, 0x94, 0xab, 0xc8, 0x6f, 0x38, 0xf4, 0x57, 0x9d, 0x64, 0xd1, 0x33, 0x1e, 0xf4,
	0x09, 0xb8, 0xaf, 0x40, 0x21, 0x56, 0x1c, 0xd9, 0x22, 0x17, 0x2c, 0x16, 0x96, 0xcb, 0x84, 0xfe,
	0x9a, 0x2f, 0xc4, 0x9b, 0x37, 0xd0, 0x0a, 0xa1, 0x8e, 0x73, 0x7e, 0x08, 0x5d, 0x63, 0x41, 0x4d,
	0x7f, 0xdd, 0x87, 0x1a, 0xac, 0x1b, 0xde, 0x18, 0x2c, 0x91, 0x33, 0x51, 0x52, 0x58, 0x38, 0x64,
	0xfe, 0x86, 0xc3, 0xcb, 0xdf, 0xc1, 0x15, 0x32, 0x61, 0x85, 0x31, 0x22, 0x49, 0xdc, 0x18, 0xfd,
	0x4d, 0xaf, 0xaf, 0x1b, 0x41, 0xdf, 0xd2, 0x89, 0x84, 0xe3, 0xed, 0x6f, 0x79, 0xbd, 0xff, 0x1d,
	0x5c, 0x27, 0xd3, 0xfe, 0x4f, 0xe6, 0x9a, 0x6f, 0xe8, 0x6f, 0xbb, 0x61, 0x37, 0xe5, 0xed, 0x0d,
	0x67, 0x0e, 0x6e, 0x90, 0x20, 0x4b, 0xb8, 0xe2, 0x39, 0xcb, 0x45, 0x2b, 0x11, 0x91, 0x9b, 0xf6,
	0xbf, 0xe3, 0xc8, 0xb3, 0x0e, 0x0a, 0xfb, 0x08, 0x84, 0xc0, 0x8d, 0x4b, 0x9b, 0x43, 0xe7, 0xe8,
	0x36, 0xfd, 0x96, 0x0f, 0x41, 0xdf, 0xbc, 0xa9, 0xdb, 0xc1, 0x3b, 0x84, 0xfa, 0xc3, 0xb4, 0xc9,
	0x78, 0x24, 0x06, 0xbc, 0xff, 0xae, 0x53, 0x2c, 0x38, 0x42, 0x03, 0xf0, 0x7a, 0x11, 0xef, 0x10,
	0x1a, 0x75, 0x78, 0xce, 0x23, 0x98, 0x04, 0x43, 0xf1, 0xfe, 0x3d, 0x2f, 0xad, 0x08, 0xfb, 0x03,
	0x81, 0x7f, 0x89, 0xcc, 0xf4, 0xa5, 0x5e, 0xf2, 0xfb, 0x7e, 0x9c, 0x55, 0x80, 0xe7, 0xde, 0x21,
	0x4b, 0x3c, 0x6d, 0x4a, 0xa1, 0x2c, 0xd3, 0x51, 0x94, 0x14, 0x06, 0xd6, 0xee, 0x72, 0xf0, 0xfc,
	0x81, 0x1f, 0x09, 0x9e, 0xb1, 0x57, 0x12, 0xca, 0x61, 0xf4, 0x0a, 0x09, 0x34, 0x7e, 0x0a, 0xc6,
	0x52, 0x8d, 0x8b, 0x7e, 0x33, 0x29, 0x72, 0xfa, 0x87, 0x2e, 0x6c, 0x33, 0x0e, 0xda, 0x41, 0x64,
	0x2d, 0x29, 0x72, 0xd8, 0x7e, 0x13, 0xa1, 0x0c, 0x6b, 0x25, 0x3c, 0x17, 0xf4, 0x8f, 0x1c, 0xed,
	0x2c, 0x98, 0x36, 0xc1, 0x02, 0x0b, 0x46, 0xa4, 0xd3, 0x26, 0xb7, 0x65, 0xc2, 0x3e, 0xd1, 0xaa,
	0xcd, 0x70, 0xf0, 0x59, 0xfa, 0xc7, 0x7e, 0xc1, 0x70, 0x0c, 0x97, 0xb3, 0xdf, 0xd6, 0xaa, 0xbd,
	0x89, 0x30, 0x46, 0xba, 0xa3, 0x0f, 0xab, 0xcb, 0x70, 0x22, 0xda, 0x42, 0xc5, 0x1c, 0xbf, 0x82,
	0xfc, 0x13, 0x2f, 0x05, 0x82, 0xbf, 0x0f, 0x6f, 0xf7, 0x61, 0x38, 0xbd, 0xe0, 0x87, 0x0d, 0xfe,
	0xa3, 0x2c, 0x9e, 0x24, 0xba, 0xb0, 0x86, 0xfe, 0xa9, 0xef, 0xfd, 0xc2, 0x08, 0x77, 0x5a, 0x5c,
	0xf7, 0x48, 0xb0, 0x4d, 0x56, 0xea, 0x27, 0x68, 0xa6, 0xb4, 0x95, 0x2d, 0x19, 0xb9, 0x7d, 0x2f,
	0x91, 0x2d, 0x81, 0x27, 0xd6, 0x3f, 0x73, 0xc1, 0x7b, 0xb6, 0x76, 0xae, 0xde, 0xad, 0x11, 0xb7,
	0x3d, 0x2f, 0xd8, 0x25, 0x57, 0x4e, 0xf6, 0xd6, 0xca, 0xc5, 0x27, 0x85, 0x50, 0x51, 0x8f, 0xfe,
	0xb9, 0x73, 0xb7, 0x7c, 0x82, 0xbb, 0xcd, 0x92, 0x18, 0x7c, 0x89, 0x5c, 0xb2, 0x39, 0x8f, 0xdd,
	0x63, 0x82, 0x30, 0x96, 0xc1, 0xb1, 0x17, 0x6f, 0x86, 0x6e, 0x71, 0xfc, 0x0b, 0xe7, 0x68, 0x09,
	0x49, 0xa1, 0xe3, 0x84, 0x25, 0x05, 0xd7, 0xc8, 0xe7, 0xc9, 0x54, 0x07, 0x0e, 0x41, 0x4d, 0xdd,
	0xf4, 0x2f, 0x2a, 0x7f, 0xe9, 0x57, 0x5f, 0x30, 0xaf, 0xe9, 0x66, 0xf5, 0xfa, 0xd2, 0xe1, 0x86,
	0xe1, 0x67, 0x99, 0x2d, 0x99, 0x1b, 0xcb, 0x9a, 0x5a, 0x5b, 0xfa, 0x57, 0xbe, 0xfb, 0x3b, 0xdc,
	0x34, 0x84, 0x50, 0x9b, 0x80, 0xac, 0x69, 0x8d, 0xdf, 0x17, 0x98, 0xa2, 0x69, 0x58, 0x14, 0xb9,
	0x83, 0xf0, 0x5f, 0x3b, 0xa7, 0x04, 0x8c, 0xeb, 0x11, 0x1e, 0x7e, 0xdf, 0x25, 0x17, 0x00, 0x05,
	0x56, 0x93, 0x47, 0xdd, 0x76, 0x8e, 0x1f, 0x1b, 0xe8, 0x8c, 0x47, 0x30, 0x1c, 0xff, 0xc6, 0x09,
	0x16, 0xa3, 0xa8, 0x51, 0x34, 0xcd, 0x5a, 0x45, 0xd8, 0x73, 0x78, 0x70, 0x9b, 0x94, 0xef, 0x50,
	0xfe, 0xfd, 0xa4, 0x7c, 0x6c, 0xfa, 0xb6, 0x6b, 0xf2, 0x79, 0x8f, 0xba, 0x07, 0x14, 0xff, 0xd6,
	0x74, 0x9b, 0x94, 0x8f, 0x50, 0x43, 0xa2, 0xbf, 0xf5, 0x22, 0x8f, 0x0e, 0x88, 0x2e, 0x13, 0xd2,
	0x4e, 0x7a, 0x59, 0xc7, 0x6d, 0x21, 0x7f, 0xe7, 0x98, 0x67, 0xd1, 0x84, 0xfb, 0x07, 0x25, 0x67,
	0x60, 0x48, 0xed, 0x3c, 0xb8, 0x4f, 0xff, 0xde, 0x85, 0xe3, 0x33, 0x85, 0x11, 0x3b, 0x0f, 0xee,
	0x07, 0xff, 0x8f, 0x5c, 0x85, 0x3b, 0x24, 0x6c, 0x62, 0x22, 0x66, 0xb1, 0x3e, 0x54, 0x89, 0xe6,
	0x31, 0x6e, 0xac, 0x42, 0xe1, 0xad, 0x3f, 0xc5, 0x4b, 0xd9, 0x3f, 0xb8, 0x9d, 0xff, 0xb3, 0xd5,
	0xce, 0x1f, 0x56, 0xaa, 0x8d, 0x9a, 0xe8, 0x6e, 0x4d, 0x13, 0xae, 0xe4, 0x8f, 0xe5, 0xc0, 0xc5,
	0x0e, 0x3b, 0x0c, 0x73, 0xea, 0xee, 0x00, 0xfd, 0x8f, 0xb5, 0x2f, 0x69, 0x77, 0xc5, 0xa1, 0x71,
	0x67, 0xe5, 0x37, 0xc8, 0x02, 0x2f, 0xac, 0x66, 0xee, 0xb3, 0x14, 0x08, 0x8f, 0xdb, 0xe2, 0x63,
	0xfa, 0x4f, 0xae, 0x45, 0x73, 0x00, 0xaf, 0x97, 0xe8, 0x5d, 0x07, 0x06, 0xf7, 0xc9, 0xb2, 0x54,
	0x51, 0x2e, 0x38, 0xbe, 0x56, 0x74, 0x70, 0x5b, 0x69, 0xe9, 0x1c, 0xfb, 0x34, 0xca, 0x25, 0x7e,
	0xb6, 0xf3, 0xcf, 0xce, 0xc1, 0x33, 0x15, 0x71, 0x1d, 0x79, 0x9b, 0x3a, 0x6f, 0xf4, 0x59, 0x70,
	0x47, 0xc8, 0x79, 0x2e, 0x58, 0xd4, 0x81, 0x41, 0xec, 0xe6, 0x46, 0x59, 0x85, 0x7f, 0x71, 0x1e,
	0xe6, 0x81, 0xb0, 0x0e, 0x38, 0xce, 0x87, 0xb2, 0x0e, 0xb7, 0xc8, 0x5c, 0x93, 0xc7, 0xdc, 0x98,
	0x21, 0xd5, 0xbf, 0xfa, 0xb3, 0x8a, 0x03, 0x87, 0x25, 0x99, 0x54, 0xdc, 0xf2, 0x21, 0xc9, 0xbf,
	0x79, 0x89, 0x03, 0x07, 0x24, 0xeb, 0xe4, 0x72, 0x2a, 0x15, 0xde, 0x4e, 0x59, 0x53, 0xd8, 0x43,
	0x88, 0x6a, 0xbd, 0x58, 0x43, 0xff, 0xdd, 0xdd, 0xf4, 0x2e, 0xa4, 0x52, 0xc1, 0xfd, 0x74, 0xcd,
	0x91, 0xd6, 0xfa, 0xa5, 0x1b, 0x28, 0xb7, 0x53, 0xc4, 0x6e, 0x96, 0xb1, 0xb4, 0x48, 0xac, 0xcc,
	0x12, 0x29, 0x72, 0xfa, 0x1f, 0x6e, 0xa8, 0x07, 0x9d, 0x22, 0xc6, 0xc9, 0xb6, 0x53, 0x41, 0x38,
	0x60, 0xdd, 0xf7, 0xcb, 0xb0, 0xa9, 0x58, 0xc9, 0x13, 0xff, 0xfd, 0xca, 0x77, 0x5c, 0x5d, 0xcf,
	0x7b, 0xb4, 0xe1, 0x40, 0xfc, 0xc0, 0xe3, 0xc2, 0xd7, 0xc9, 0xfc, 0xc8, 0xcb, 0x6b, 0x30, 0x43,
	0x9e, 0xea, 0x8a, 0x9e, 0xff, 0x58, 0x15, 0xfe, 0x0c, 0xde, 0x20, 0xa7, 0x0f, 0x78, 0x52, 0x08,
	0xff, 0xcf, 0x00, 0xcf, 0xd6, 0x8f, 0xee, 0x23, 0x3e, 0x6e, 0x0e, 0x1d, 0x7b, 0xed, 0xc5, 0xaf,
	0xbe, 0xd0, 0x96, 0xb6, 0x53, 0x34, 0x6f, 0x44, 0x3a, 0xbd, 0x19, 0xb5, 0xe4, 0x6b, 0xaf, 0xde,
	0x7a, 0xeb, 0x66, 0x33, 0xb9, 0xfd, 0x8a, 0xe1, 0x07, 0xe2, 0xa6, 0x04, 0xbe, 0xe2, 0xc9, 0xcd,
	0xac, 0xf9, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcb, 0xdc, 0x37, 0x73, 0x3c, 0x31, 0x00, 0x00,
}
